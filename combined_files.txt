File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\Commands.cs 
﻿using Autodesk.AutoCAD.Runtime;
using GMEPElectricalResidential.LoadCalculations;
using GMEPElectricalResidential.SingleLineDiagram;

namespace GMEPElectricalResidential
{
  public class Commands
  {
    private static LOAD_CALCULATION_FORM _loadCalculationForm;
    private static SINGLE_LINE_DIAGRAM _sld;

    [CommandMethod("SLD")]
    public void SLD()
    {
      if (_sld == null || _sld.IsDisposed)
      {
        _sld = new SINGLE_LINE_DIAGRAM();
      }

      _sld.Show();
      _sld.BringToFront();
    }

    [CommandMethod("LoadCalculation")]
    public void LoadCalculation()
    {
      if (_loadCalculationForm == null || _loadCalculationForm.IsDisposed)
      {
        _loadCalculationForm = new LOAD_CALCULATION_FORM(this);
      }

      _loadCalculationForm.Show();
      _loadCalculationForm.BringToFront();
    }
  }
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\HelperFiles\CADObjectCommands.cs 
﻿using Autodesk.AutoCAD.ApplicationServices;
using Autodesk.AutoCAD.DatabaseServices;
using Autodesk.AutoCAD.Geometry;
using Autodesk.AutoCAD.Runtime;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;

namespace GMEPElectricalResidential.HelperFiles
{
  public class CADObjectCommands
  {
    [CommandMethod("GetBlockData")]
    public void GetBlockData()
    {
      var data = new ObjectData();

      Autodesk.AutoCAD.EditorInput.Editor ed = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument.Editor;
      Autodesk.AutoCAD.EditorInput.PromptSelectionResult selectionResult = ed.GetSelection();
      if (selectionResult.Status == Autodesk.AutoCAD.EditorInput.PromptStatus.OK)
      {
        Autodesk.AutoCAD.EditorInput.SelectionSet selectionSet = selectionResult.Value;
        Autodesk.AutoCAD.EditorInput.PromptPointOptions originOptions = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("Select an origin point: ");
        Autodesk.AutoCAD.EditorInput.PromptPointResult originResult = ed.GetPoint(originOptions);
        if (originResult.Status == Autodesk.AutoCAD.EditorInput.PromptStatus.OK)
        {
          Point3d origin = originResult.Value;

          foreach (Autodesk.AutoCAD.DatabaseServices.ObjectId objectId in selectionSet.GetObjectIds())
          {
            using (Transaction transaction = objectId.Database.TransactionManager.StartTransaction())
            {
              Autodesk.AutoCAD.DatabaseServices.DBObject obj = transaction.GetObject(objectId, Autodesk.AutoCAD.DatabaseServices.OpenMode.ForRead);

              if (obj is Autodesk.AutoCAD.DatabaseServices.Polyline)
              {
                data = HandlePolyline(obj as Autodesk.AutoCAD.DatabaseServices.Polyline, data, origin);
              }
              else if (obj is Autodesk.AutoCAD.DatabaseServices.Arc)
              {
                data = HandleArc(obj as Autodesk.AutoCAD.DatabaseServices.Arc, data, origin);
              }
              else if (obj is Autodesk.AutoCAD.DatabaseServices.Circle)
              {
                data = HandleCircle(obj as Autodesk.AutoCAD.DatabaseServices.Circle, data, origin);
              }
              else if (obj is Autodesk.AutoCAD.DatabaseServices.Ellipse)
              {
                data = HandleEllipse(obj as Autodesk.AutoCAD.DatabaseServices.Ellipse, data, origin);
              }
              else if (obj is Autodesk.AutoCAD.DatabaseServices.MText)
              {
                data = HandleMText(obj as Autodesk.AutoCAD.DatabaseServices.MText, data, origin);
              }
              else if (obj is Autodesk.AutoCAD.DatabaseServices.Solid)
              {
                data = HandleSolid(obj as Autodesk.AutoCAD.DatabaseServices.Solid, data, origin);
              }
              else if (obj is Autodesk.AutoCAD.DatabaseServices.Line)
              {
                data = HandleLine(obj as Autodesk.AutoCAD.DatabaseServices.Line, data, origin);
              }
              else if (obj is Autodesk.AutoCAD.DatabaseServices.DBText)
              {
                data = HandleText(obj as Autodesk.AutoCAD.DatabaseServices.DBText, data, origin);
              }

              transaction.Commit();
            }
          }
        }
      }

      // Prompt the user to enter a name for the JSON file
      Autodesk.AutoCAD.EditorInput.PromptStringOptions nameOptions = new Autodesk.AutoCAD.EditorInput.PromptStringOptions("Enter a name for the JSON file: ");

      Autodesk.AutoCAD.EditorInput.PromptResult nameResult = ed.GetString(nameOptions);

      if (nameResult.Status == Autodesk.AutoCAD.EditorInput.PromptStatus.OK)
      {
        string fileName = nameResult.StringResult;

        // Get the directory path of the assembly
        string assemblyDirectory = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);

        // Go up two directories from the assembly directory to get the project directory
        string projectDirectory = System.IO.Directory.GetParent(System.IO.Directory.GetParent(assemblyDirectory).FullName).FullName;

        // Create the BlockData directory if it doesn't exist
        string blockDataDirectory = System.IO.Path.Combine(projectDirectory, "BlockData");
        if (!System.IO.Directory.Exists(blockDataDirectory))
        {
          System.IO.Directory.CreateDirectory(blockDataDirectory);
        }

        // Generate the JSON file path
        string jsonFilePath = System.IO.Path.Combine(blockDataDirectory, $"{fileName}.json");

        // Save the object data to the JSON file
        HelperClass.SaveDataToJsonFile(data, jsonFilePath);
      }
    }

    public static Point3d CreateArc(Point3d basePoint, Transaction acTrans, BlockTableRecord acBlkTblRec, ArcData arcData)
    {
      Arc arc = new Arc();
      arc.Layer = arcData.Layer;
      arc.Center = new Point3d(basePoint.X + arcData.Center.X, basePoint.Y + arcData.Center.Y, basePoint.Z + arcData.Center.Z);
      arc.Radius = arcData.Radius;
      arc.StartAngle = arcData.StartAngle;
      arc.EndAngle = arcData.EndAngle;

      acBlkTblRec.AppendEntity(arc);
      acTrans.AddNewlyCreatedDBObject(arc, true);
      return basePoint;
    }

    public static Point3d CreateCircle(Point3d basePoint, Transaction acTrans, BlockTableRecord acBlkTblRec, CircleData circleData)
    {
      Circle circle = new Circle();
      circle.Layer = circleData.Layer;
      circle.Center = new Point3d(basePoint.X + circleData.Center.X, basePoint.Y + circleData.Center.Y, basePoint.Z + circleData.Center.Z);
      circle.Radius = circleData.Radius;

      acBlkTblRec.AppendEntity(circle);
      acTrans.AddNewlyCreatedDBObject(circle, true);
      return basePoint;
    }

    public static Point3d CreateEllipse(Point3d basePoint, Transaction acTrans, BlockTableRecord acBlkTblRec, EllipseData ellipseData)
    {
      Ellipse ellipse = new Ellipse();
      ellipse.Layer = ellipseData.Layer;
      Point3d center = new Point3d(basePoint.X + ellipseData.Center.X, basePoint.Y + ellipseData.Center.Y, basePoint.Z + ellipseData.Center.Z);
      Vector3d majorAxis = new Vector3d(ellipseData.MajorAxis.X, ellipseData.MajorAxis.Y, ellipseData.MajorAxis.Z);
      double radiusRatio = ellipseData.RadiusRatio();
      double startAngle = ellipseData.StartAngle;
      double endAngle = ellipseData.EndAngle;
      Vector3d unitNormal = new Vector3d(0, 0, 1);

      ellipse.Set(center, unitNormal, majorAxis, radiusRatio, startAngle, endAngle);

      acBlkTblRec.AppendEntity(ellipse);
      acTrans.AddNewlyCreatedDBObject(ellipse, true);
      return basePoint;
    }

    public static Point3d CreateLine(Point3d basePoint, Transaction acTrans, BlockTableRecord acBlkTblRec, LineData lineData)
    {
      Line line = new Line();
      line.Layer = lineData.Layer;
      line.StartPoint = new Point3d(basePoint.X + lineData.StartPoint.X, basePoint.Y + lineData.StartPoint.Y, basePoint.Z + lineData.StartPoint.Z);
      line.EndPoint = new Point3d(basePoint.X + lineData.EndPoint.X, basePoint.Y + lineData.EndPoint.Y, basePoint.Z + lineData.EndPoint.Z);

      acBlkTblRec.AppendEntity(line);
      acTrans.AddNewlyCreatedDBObject(line, true);
      return basePoint;
    }

    public static Point3d CreateMText(Point3d basePoint, Transaction acTrans, BlockTableRecord acBlkTblRec, MTextData mTextData)
    {
      MText mText = new MText();
      mText.Layer = mTextData.Layer;
      SetTextStyleByName(mText, mTextData.Style);
      mText.Attachment = (AttachmentPoint)Enum.Parse(typeof(AttachmentPoint), mTextData.Justification);
      mText.Contents = mTextData.Contents;
      mText.Location = new Point3d(basePoint.X + mTextData.Location.X, basePoint.Y + mTextData.Location.Y, basePoint.Z + mTextData.Location.Z);
      //mText.LineSpacingStyle = mTextData.LineSpacingStyle;
      //mText.LineSpacingFactor = mTextData.LineSpaceFactor;
      mText.TextHeight = mTextData.TextHeight;
      mText.Width = mTextData.Width;
      //mText.Rotation = mTextData.Rotation;
      //mText.Direction = mTextData.Direction;

      acBlkTblRec.AppendEntity(mText);
      acTrans.AddNewlyCreatedDBObject(mText, true);
      return basePoint;
    }

    public static Point3d CreatePolyline(Point3d basePoint, Transaction acTrans, BlockTableRecord acBlkTblRec, PolylineData polylineData)
    {
      Polyline polyline = new Polyline();
      polyline.Layer = polylineData.Layer;
      polyline.Linetype = polylineData.LineType;
      polyline.Closed = polylineData.Closed;

      for (int i = 0; i < polylineData.Vectors.Count; i++)
      {
        SimpleVector3d vector = polylineData.Vectors[i];
        polyline.AddVertexAt(i, new Point2d(basePoint.X + vector.X, basePoint.Y + vector.Y), 0, 0, 0);
      }

      acBlkTblRec.AppendEntity(polyline);
      acTrans.AddNewlyCreatedDBObject(polyline, true);
      return basePoint;
    }

    public static Point3d CreateSolid(Point3d basePoint, Transaction acTrans, BlockTableRecord acBlkTblRec, SolidData solidData)
    {
      Solid solid = new Solid();
      solid.Layer = solidData.Layer;
      for (short i = 0; i < solidData.Vertices.Count; i++)
      {
        SimpleVector3d vector = solidData.Vertices[i];
        solid.SetPointAt(i, new Point3d(basePoint.X + vector.X, basePoint.Y + vector.Y, basePoint.Z + vector.Z));
      }

      acBlkTblRec.AppendEntity(solid);
      acTrans.AddNewlyCreatedDBObject(solid, true);
      return basePoint;
    }

    public static Point3d CreateText(Point3d basePoint, Transaction acTrans, BlockTableRecord acBlkTblRec, TextData text)
    {
      DBText dbText = new DBText();
      var textStyleObject = new TextStyle(0.0, 1.0, "Arial.ttf");
      textStyleObject.CreateStyleIfNotExisting("Load Calcs");

      dbText.Layer = text.Layer;
      dbText.TextString = text.Contents;
      dbText.Height = text.Height;
      dbText.Rotation = text.Rotation;

      SetTextStyleByName(dbText, "Load Calcs");

      if (text.HorizontalMode == TextHorizontalMode.TextLeft)
      {
        dbText.Position = new Point3d(basePoint.X + text.Location.X, basePoint.Y + text.Location.Y, basePoint.Z + text.Location.Z);
      }
      else if (text.HorizontalMode == TextHorizontalMode.TextCenter)
      {
        dbText.HorizontalMode = TextHorizontalMode.TextCenter;
        dbText.AlignmentPoint = new Point3d(basePoint.X + text.AlignmentPoint.X, basePoint.Y + text.AlignmentPoint.Y, basePoint.Z + text.AlignmentPoint.Z);
        dbText.Justify = text.Justification;
      }
      else if (text.HorizontalMode == TextHorizontalMode.TextRight)
      {
        dbText.HorizontalMode = TextHorizontalMode.TextRight;
        dbText.AlignmentPoint = new Point3d(basePoint.X + text.Location.X, basePoint.Y + text.Location.Y, basePoint.Z + text.Location.Z);
      }

      acBlkTblRec.AppendEntity(dbText);
      acTrans.AddNewlyCreatedDBObject(dbText, true);

      return basePoint;
    }

    private static void SetTextStyleByName(Entity textEntity, string styleName)
    {
      if (!(textEntity is MText || textEntity is DBText))
      {
        throw new ArgumentException("The textEntity must be of type MText or DBText.");
      }

      Database db = HostApplicationServices.WorkingDatabase;
      using (Transaction tr = db.TransactionManager.StartTransaction())
      {
        TextStyleTable textStyleTable = tr.GetObject(db.TextStyleTableId, OpenMode.ForRead) as TextStyleTable;
        if (textStyleTable.Has(styleName))
        {
          TextStyleTableRecord textStyle = tr.GetObject(textStyleTable[styleName], OpenMode.ForRead) as TextStyleTableRecord;
          if (textEntity is MText mTextEntity)
          {
            mTextEntity.TextStyleId = textStyle.ObjectId;
          }
          else if (textEntity is DBText dbTextEntity)
          {
            dbTextEntity.TextStyleId = textStyle.ObjectId;
          }
        }
        tr.Commit();
      }
    }

    public static void CreateObjectFromData(string jsonData, Point3d basePoint, BlockTableRecord block)
    {
      ObjectData objectData = JsonConvert.DeserializeObject<ObjectData>(jsonData);

      Document acDoc = Application.DocumentManager.MdiActiveDocument;
      Database acCurDb = acDoc.Database;

      using (Transaction acTrans = acCurDb.TransactionManager.StartTransaction())
      {
        BlockTableRecord acBlkTblRec = block;

        foreach (var polyline in objectData.Polylines)
        {
          basePoint = CreatePolyline(basePoint, acTrans, acBlkTblRec, polyline);
        }

        foreach (var line in objectData.Lines)
        {
          basePoint = CreateLine(basePoint, acTrans, acBlkTblRec, line);
        }

        foreach (var arc in objectData.Arcs)
        {
          basePoint = CreateArc(basePoint, acTrans, acBlkTblRec, arc);
        }

        foreach (var circle in objectData.Circles)
        {
          basePoint = CreateCircle(basePoint, acTrans, acBlkTblRec, circle);
        }

        foreach (var ellipse in objectData.Ellipses)
        {
          basePoint = CreateEllipse(basePoint, acTrans, acBlkTblRec, ellipse);
        }

        foreach (var mText in objectData.MTexts)
        {
          basePoint = CreateMText(basePoint, acTrans, acBlkTblRec, mText);
        }

        foreach (var text in objectData.Texts)
        {
          basePoint = CreateText(basePoint, acTrans, acBlkTblRec, text);
        }

        foreach (var solid in objectData.Solids)
        {
          basePoint = CreateSolid(basePoint, acTrans, acBlkTblRec, solid);
        }

        acTrans.Commit();
      }
    }

    public static ObjectData HandleArc(Arc arc, ObjectData data, Point3d origin)
    {
      var arcData = new ArcData
      {
        Layer = arc.Layer,
        Center = new SimpleVector3d
        {
          X = arc.Center.X - origin.X,
          Y = arc.Center.Y - origin.Y,
          Z = arc.Center.Z - origin.Z
        },
        Radius = arc.Radius,
        StartAngle = arc.StartAngle,
        EndAngle = arc.EndAngle,
      };

      data.Arcs.Add(arcData);

      return data;
    }

    public static ObjectData HandleCircle(Circle circle, ObjectData data, Point3d origin)
    {
      var circleData = new CircleData
      {
        Layer = circle.Layer,
        Center = new SimpleVector3d
        {
          X = circle.Center.X - origin.X,
          Y = circle.Center.Y - origin.Y,
          Z = circle.Center.Z - origin.Z
        },
        Radius = circle.Radius,
      };

      data.Circles.Add(circleData);

      return data;
    }

    public static ObjectData HandleEllipse(Ellipse ellipse, ObjectData data, Point3d origin)
    {
      var ellipseData = new EllipseData
      {
        Layer = ellipse.Layer,
        UnitNormal = new SimpleVector3d
        {
          X = ellipse.Normal.X,
          Y = ellipse.Normal.Y,
          Z = ellipse.Normal.Z
        },
        Center = new SimpleVector3d
        {
          X = ellipse.Center.X - origin.X,
          Y = ellipse.Center.Y - origin.Y,
          Z = ellipse.Center.Z - origin.Z
        },
        MajorAxis = new SimpleVector3d
        {
          X = ellipse.MajorAxis.X,
          Y = ellipse.MajorAxis.Y,
          Z = ellipse.MajorAxis.Z
        },
        MajorRadius = ellipse.MajorRadius,
        MinorRadius = ellipse.MinorRadius,
        StartAngle = ellipse.StartAngle,
        EndAngle = ellipse.EndAngle,
      };

      data.Ellipses.Add(ellipseData);

      return data;
    }

    public static ObjectData HandleLine(Line line, ObjectData data, Point3d origin)
    {
      var lineData = new LineData
      {
        Layer = line.Layer,
        StartPoint = new SimpleVector3d
        {
          X = line.StartPoint.X - origin.X,
          Y = line.StartPoint.Y - origin.Y,
          Z = line.StartPoint.Z - origin.Z
        },
        EndPoint = new SimpleVector3d
        {
          X = line.EndPoint.X - origin.X,
          Y = line.EndPoint.Y - origin.Y,
          Z = line.EndPoint.Z - origin.Z
        },
      };

      data.Lines.Add(lineData);

      return data;
    }

    public static ObjectData HandleMText(MText mText, ObjectData data, Point3d origin)
    {
      var mTextData = new MTextData
      {
        Layer = mText.Layer,
        Style = mText.TextStyleName,
        Justification = mText.Attachment.ToString(),
        Contents = mText.Contents,
        Location = new SimpleVector3d
        {
          X = mText.Location.X - origin.X,
          Y = mText.Location.Y - origin.Y,
          Z = mText.Location.Z - origin.Z
        },
        LineSpaceDistance = mText.LineSpaceDistance,
        LineSpaceFactor = mText.LineSpacingFactor,
        LineSpacingStyle = mText.LineSpacingStyle,
        TextHeight = mText.TextHeight,
        Width = mText.Width,
        Rotation = mText.Rotation,
        Direction = mText.Direction
      };

      data.MTexts.Add(mTextData);

      return data;
    }

    public static ObjectData HandlePolyline(Polyline polyline, ObjectData data, Point3d origin)
    {
      var polylineData = new PolylineData
      {
        Layer = polyline.Layer,
        Vectors = new List<SimpleVector3d>(),
        LineType = polyline.Linetype,
        Closed = polyline.Closed,
      };

      for (int i = 0; i < polyline.NumberOfVertices; i++)
      {
        Point3d point = polyline.GetPoint3dAt(i);
        Vector3d vector = point - origin;
        polylineData.Vectors.Add(new SimpleVector3d { X = vector.X, Y = vector.Y, Z = vector.Z });
      }

      data.Polylines.Add(polylineData);

      return data;
    }

    public static ObjectData HandleSolid(Solid solid, ObjectData data, Point3d origin)
    {
      var solidData = new SolidData
      {
        Layer = solid.Layer,
        Vertices = new List<SimpleVector3d>(),
      };

      for (short i = 0; i < 4; i++)
      {
        Point3d point = solid.GetPointAt(i);
        Vector3d vector = point - origin;
        solidData.Vertices.Add(new SimpleVector3d { X = vector.X, Y = vector.Y, Z = vector.Z });
      }

      data.Solids.Add(solidData);

      return data;
    }

    public static ObjectData HandleText(DBText text, ObjectData data, Point3d origin)
    {
      var textData = new TextData
      {
        Layer = text.Layer,
        Style = text.TextStyleName,
        Contents = text.TextString,
        Location = new SimpleVector3d
        {
          X = text.Position.X - origin.X,
          Y = text.Position.Y - origin.Y,
          Z = text.Position.Z - origin.Z
        },
        LineSpaceDistance = text.WidthFactor,
        Height = text.Height,
        Rotation = text.Rotation,
        AlignmentPoint = new SimpleVector3d
        {
          X = text.AlignmentPoint.X - origin.X,
          Y = text.AlignmentPoint.Y - origin.Y,
          Z = text.AlignmentPoint.Z - origin.Z
        },
        Justification = text.Justify,
        HorizontalMode = text.HorizontalMode,
        IsMirroredInX = text.IsMirroredInX,
        IsMirroredInY = text.IsMirroredInY
      };

      data.Texts.Add(textData);

      return data;
    }
  }

  public class TextStyle
  {
    public double height { get; set; }
    public double widthFactor { get; set; }
    public string fontName { get; set; }

    public TextStyle(double height, double widthFactor, string fontName)
    {
      this.height = height;
      this.widthFactor = widthFactor;
      this.fontName = fontName;
    }

    public void CreateStyleIfNotExisting(string name)
    {
      Autodesk.AutoCAD.ApplicationServices.Document acDoc = Application.DocumentManager.MdiActiveDocument;
      Database acCurDb = acDoc.Database;

      using (Transaction acTrans = acCurDb.TransactionManager.StartTransaction())
      {
        TextStyleTable acTextStyleTable;
        acTextStyleTable = acTrans.GetObject(acCurDb.TextStyleTableId, OpenMode.ForRead) as TextStyleTable;

        if (acTextStyleTable.Has(name) == false)
        {
          acTextStyleTable.UpgradeOpen();

          TextStyleTableRecord acTextStyleTableRec;
          acTextStyleTableRec = new TextStyleTableRecord();

          acTextStyleTableRec.Name = name;
          acTextStyleTableRec.FileName = this.fontName;
          acTextStyleTableRec.TextSize = this.height;
          acTextStyleTableRec.XScale = this.widthFactor;

          acTextStyleTable.Add(acTextStyleTableRec);
          acTrans.AddNewlyCreatedDBObject(acTextStyleTableRec, true);
        }

        acTrans.Commit();
      }
    }

    public List<string> GetStyles()
    {
      List<string> styles = new List<string>();

      Autodesk.AutoCAD.ApplicationServices.Document acDoc = Application.DocumentManager.MdiActiveDocument;
      Database acCurDb = acDoc.Database;

      using (Transaction acTrans = acCurDb.TransactionManager.StartTransaction())
      {
        TextStyleTable acTextStyleTable;
        acTextStyleTable = acTrans.GetObject(acCurDb.TextStyleTableId, OpenMode.ForRead) as TextStyleTable;

        foreach (var styleId in acTextStyleTable)
        {
          TextStyleTableRecord acTextStyleTableRec;
          acTextStyleTableRec = acTrans.GetObject(styleId, OpenMode.ForRead) as TextStyleTableRecord;

          styles.Add(acTextStyleTableRec.Name);
        }

        acTrans.Commit();
      }

      return styles;
    }
  }

  public class ObjectData
  {
    public List<PolylineData> Polylines { get; set; }
    public List<LineData> Lines { get; set; }
    public List<ArcData> Arcs { get; set; }
    public List<CircleData> Circles { get; set; }
    public List<EllipseData> Ellipses { get; set; }
    public List<MTextData> MTexts { get; set; }
    public List<TextData> Texts { get; set; }
    public List<SolidData> Solids { get; set; }
    public int NumberOfRows { get; set; }

    public ObjectData()
    {
      Polylines = new List<PolylineData>();
      Lines = new List<LineData>();
      Arcs = new List<ArcData>();
      Circles = new List<CircleData>();
      Ellipses = new List<EllipseData>();
      MTexts = new List<MTextData>();
      Texts = new List<TextData>();
      Solids = new List<SolidData>();
    }
  }

  public class TextData : BaseData
  {
    public string Style { get; set; }
    public AttachmentPoint Justification { get; set; }
    public string Contents { get; set; }
    public SimpleVector3d Location { get; set; }
    public double LineSpaceDistance { get; set; }
    public double Height { get; set; }
    public double Rotation { get; set; }
    public SimpleVector3d AlignmentPoint { get; set; }
    public TextHorizontalMode HorizontalMode { get; set; }
    public bool IsMirroredInX { get; set; }
    public bool IsMirroredInY { get; set; }
  }

  public class PolylineData : BaseData
  {
    public List<SimpleVector3d> Vectors { get; set; }
    public string LineType { get; set; }
    public bool Closed { get; set; }
  }

  public class LineData : BaseData
  {
    public SimpleVector3d StartPoint { get; set; }
    public SimpleVector3d EndPoint { get; set; }
  }

  public class ArcData : BaseData
  {
    public SimpleVector3d Center { get; set; }
    public double Radius { get; set; }
    public double StartAngle { get; set; }
    public double EndAngle { get; set; }
  }

  public class CircleData : BaseData
  {
    public SimpleVector3d Center { get; set; }
    public double Radius { get; set; }
  }

  public class EllipseData : BaseData
  {
    public SimpleVector3d UnitNormal { get; set; }
    public SimpleVector3d Center { get; set; }
    public SimpleVector3d MajorAxis { get; set; }
    public double MajorRadius { get; set; }
    public double MinorRadius { get; set; }
    public double StartAngle { get; set; }
    public double EndAngle { get; set; }

    public double RadiusRatio()
    {
      if (MinorRadius != 0 && MajorRadius != 0)
      {
        return MinorRadius / MajorRadius;
      }
      else
      {
        return 0;
      }
    }
  }

  public class MTextData : BaseData
  {
    public string Style { get; set; }
    public string Justification { get; set; }
    public string Contents { get; set; }
    public Vector3d Direction { get; set; }
    public SimpleVector3d Location { get; set; }
    public double LineSpaceDistance { get; set; }
    public double LineSpaceFactor { get; set; }
    public LineSpacingStyle LineSpacingStyle { get; set; }
    public double TextHeight { get; set; }
    public double Width { get; set; }
    public double Rotation { get; set; }
  }

  public class SolidData : BaseData
  {
    public List<SimpleVector3d> Vertices { get; set; }
  }

  public class BaseData
  {
    public string Layer { get; set; }
  }

  public class SimpleVector3d
  {
    public SimpleVector3d(double X = 0, double Y = 0, double Z = 0)
    {
      this.X = X;
      this.Y = Y;
      this.Z = Z;
    }

    public double X { get; set; }
    public double Y { get; set; }
    public double Z { get; set; }
  }
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\HelperFiles\HelperClass.cs 
﻿using Autodesk.AutoCAD.ApplicationServices;
using Autodesk.AutoCAD.DatabaseServices;
using Autodesk.AutoCAD.EditorInput;
using Autodesk.AutoCAD.Geometry;
using Autodesk.AutoCAD.Runtime;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace GMEPElectricalResidential.HelperFiles
{
  public class HelperClass
  {
    public static void WriteMessageToAutoCADConsole(object thing, string preMessage = "")
    {
      var settings = new JsonSerializerSettings
      {
        ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
        PreserveReferencesHandling = PreserveReferencesHandling.Objects
      };

      var message = JsonConvert.SerializeObject(thing, Formatting.Indented, settings);
      var doc = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
      doc.Editor.WriteMessage(preMessage + " ");
      doc.Editor.WriteMessage(message + "\n");
    }

    public static void SaveDataToJsonFileOnDesktop(object data, string fileName, bool noOverride = false)
    {
      string jsonData = JsonConvert.SerializeObject(data, Formatting.Indented);
      string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
      string fullPath = Path.Combine(desktopPath, fileName);

      if (noOverride && File.Exists(fullPath))
      {
        int fileNumber = 1;
        string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(fileName);
        string fileExtension = Path.GetExtension(fileName);

        while (File.Exists(fullPath))
        {
          string newFileName = $"{fileNameWithoutExtension} ({fileNumber}){fileExtension}";
          fullPath = Path.Combine(desktopPath, newFileName);
          fileNumber++;
        }
      }

      File.WriteAllText(fullPath, jsonData);
    }

    public static void SaveDataToJsonFile(object data, string filePath)
    {
      string jsonData = JsonConvert.SerializeObject(data, Formatting.Indented);
      File.WriteAllText(filePath, jsonData);
    }

    public static Point3d UserClick()
    {
      var doc = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
      var ed = doc.Editor;

      PromptPointResult pPtRes;
      PromptPointOptions pPtOpts = new PromptPointOptions("");

      pPtOpts.Message = "\nClick a point to place the unit load calculation tables: ";
      pPtRes = ed.GetPoint(pPtOpts);

      if (pPtRes.Status == PromptStatus.OK)
      {
        return pPtRes.Value;
      }
      else
      {
        return new Point3d();
      }
    }
  }
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\LoadCalculations\LoadCalculationForm.cs 
﻿using Autodesk.AutoCAD.ApplicationServices;
using Autodesk.AutoCAD.DatabaseServices;
using Autodesk.AutoCAD.EditorInput;
using Autodesk.AutoCAD.Geometry;
using Autodesk.AutoCAD.Runtime;
using GMEPElectricalResidential.HelperFiles;
using GMEPElectricalResidential.LoadCalculations.Building;
using GMEPElectricalResidential.LoadCalculations.Unit;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics.PerformanceData;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace GMEPElectricalResidential.LoadCalculations
{
  public partial class LOAD_CALCULATION_FORM : Form
  {
    private int _maxUnitID = 0;
    private int _maxBuildingID = 0;
    private ToolTip _toolTip;

    public Commands Commands { get; }
    public bool FormatCheckboxChecked { get; set; }

    private string _initialDocumentPath;

    public LOAD_CALCULATION_FORM(Commands commands)
    {
      Commands = commands;
      InitializeComponent();

      _toolTip = new ToolTip();

      var doc = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
      _initialDocumentPath = doc.Database.Filename;

      bool createdUnitTab = LoadSavedUnitLoadCalculations();
      bool createdBuildingTab = LoadSavedBuildingLoadCalculations();

      if (!createdUnitTab)
      {
        AddNewUnitTab();
      }

      if (!createdBuildingTab)
      {
        AddNewBuildingTab();
      }

      this.FormClosing += LOAD_CALCULATION_FORM_FormClosing;
      this.TAB_CONTROL.SelectedIndexChanged += TAB_CONTROL_SelectedIndexChanged;
      this.BUILDING_TAB_CONTROL.SelectedIndexChanged += TAB_CONTROL_SelectedIndexChanged;
      this.UNIT_TAB_CONTROL.SelectedIndexChanged += TAB_CONTROL_SelectedIndexChanged;
      Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument.BeginDocumentClose += Document_BeginDocumentClose;
    }

    private void Document_BeginDocumentClose(object sender, Autodesk.AutoCAD.ApplicationServices.DocumentBeginCloseEventArgs e)
    {
      SaveLoadCalculationForm();
      Close();
    }

    protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
    {
      if (keyData == (Keys.Control | Keys.S))
      {
        SaveLoadCalculationForm();
        return true;
      }

      return base.ProcessCmdKey(ref msg, keyData);
    }

    public void AddNewBuildingTab(Building.BuildingInformation buildingInformation = null)
    {
      TabPage tabPage;
      if (buildingInformation != null)
      {
        tabPage = new TabPage(buildingInformation.Name);
        _maxBuildingID = Math.Max(_maxBuildingID, buildingInformation.ID);
      }
      else
      {
        tabPage = new TabPage("");
        _maxBuildingID++;
      }

      Building.LoadCalculationForm buildingLoadCalculation = new Building.LoadCalculationForm(this, _maxBuildingID, buildingInformation);
      tabPage.Tag = _maxBuildingID;
      tabPage.Controls.Add(buildingLoadCalculation);

      BUILDING_TAB_CONTROL.TabPages.Add(tabPage);
    }

    public void AddNewUnitTab(Unit.UnitInformation unitInformation = null)
    {
      TabPage tabPage;
      if (unitInformation != null)
      {
        tabPage = new TabPage(unitInformation.Name);
        _maxUnitID = Math.Max(_maxUnitID, unitInformation.ID);
      }
      else
      {
        tabPage = new TabPage("");
        _maxUnitID++;
      }

      Unit.LoadCalculationForm unitLoadCalculation = new Unit.LoadCalculationForm(this, _maxUnitID, unitInformation);
      tabPage.Tag = _maxUnitID;
      tabPage.Controls.Add(unitLoadCalculation);
      UNIT_TAB_CONTROL.TabPages.Add(tabPage);
    }

    private bool LoadSavedUnitLoadCalculations()
    {
      var createdTabFlag = false;
      var doc = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
      string dwgDirectory = Path.GetDirectoryName(doc.Database.Filename);
      string baseSaveDirectory = Path.Combine(dwgDirectory, "Saves", "Load Calculations", "Unit");
      if (Directory.Exists(baseSaveDirectory))
      {
        var unitDirectories = Directory.GetDirectories(baseSaveDirectory).OrderBy(d => Path.GetFileName(d));
        foreach (var unitDirectory in unitDirectories)
        {
          var jsonFiles = Directory.GetFiles(unitDirectory, "*.json");
          if (jsonFiles.Length > 0)
          {
            var latestJsonFile = jsonFiles.OrderByDescending(f => File.GetCreationTime(f)).First();
            var json = File.ReadAllText(latestJsonFile);
            var unitInformation = JsonConvert.DeserializeObject<Unit.UnitInformation>(json);
            if (unitInformation.Voltage != null)
            {
              AddNewUnitTab(unitInformation);
              _maxUnitID = Math.Max(_maxUnitID, unitInformation.ID);
            }
            createdTabFlag = true;
          }
        }
      }
      return createdTabFlag;
    }

    private bool LoadSavedBuildingLoadCalculations()
    {
      var createdTabFlag = false;
      var doc = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
      string dwgDirectory = Path.GetDirectoryName(doc.Database.Filename);
      string baseSaveDirectory = Path.Combine(dwgDirectory, "Saves", "Load Calculations", "Building");
      if (Directory.Exists(baseSaveDirectory))
      {
        var buildingDirectories = Directory.GetDirectories(baseSaveDirectory).OrderBy(d => Path.GetFileName(d));
        foreach (var buildingDirectory in buildingDirectories)
        {
          var jsonFiles = Directory.GetFiles(buildingDirectory, "*.json");
          if (jsonFiles.Length > 0)
          {
            var latestJsonFile = jsonFiles.OrderByDescending(f => File.GetCreationTime(f)).First();
            var json = File.ReadAllText(latestJsonFile);
            var buildingInformation = JsonConvert.DeserializeObject<Building.BuildingInformation>(json);
            if (buildingInformation.Name != null)
            {
              AddNewBuildingTab(buildingInformation);
              _maxBuildingID = Math.Max(_maxBuildingID, buildingInformation.ID);
            }
            createdTabFlag = true;
          }
        }
      }
      return createdTabFlag;
    }

    public void RemoveCurrentTab()
    {
      if (TAB_CONTROL.SelectedTab == UNIT_TAB)
      {
        if (UNIT_TAB_CONTROL.TabCount > 0)
        {
          DialogResult result = MessageBox.Show("Are you sure you want to remove this unit tab?", "Confirmation", MessageBoxButtons.YesNo);
          if (result == DialogResult.Yes)
          {
            var selectedTab = UNIT_TAB_CONTROL.SelectedTab;
            var unitLoadCalculation = selectedTab.Controls.OfType<Unit.LoadCalculationForm>().FirstOrDefault();
            if (unitLoadCalculation != null)
            {
              var unitInformation = unitLoadCalculation.RetrieveUnitInformation();
              var id = unitInformation.ID;
              UNIT_TAB_CONTROL.TabPages.Remove(selectedTab);
              RemoveUnitTypeFromBuildings(id);
              DeleteUnitDirectory(unitInformation);
            }
          }
        }
      }
      else if (TAB_CONTROL.SelectedTab == BUILDING_TAB)
      {
        if (BUILDING_TAB_CONTROL.TabCount > 0)
        {
          DialogResult result = MessageBox.Show("Are you sure you want to remove this building tab?", "Confirmation", MessageBoxButtons.YesNo);
          if (result == DialogResult.Yes)
          {
            var selectedTab = BUILDING_TAB_CONTROL.SelectedTab;
            var buildingLoadCalculation = selectedTab.Controls.OfType<Building.LoadCalculationForm>().FirstOrDefault();
            if (buildingLoadCalculation != null)
            {
              var buildingInformation = buildingLoadCalculation.RetrieveBuildingInformation();
              BUILDING_TAB_CONTROL.TabPages.Remove(selectedTab);
              DeleteBuildingDirectory(buildingInformation);
            }
          }
        }
      }
    }

    private void DeleteUnitDirectory(Unit.UnitInformation unitInfo)
    {
      if (unitInfo != null)
      {
        string dwgDirectory = Path.GetDirectoryName(_initialDocumentPath);
        string baseSaveDirectory = Path.Combine(dwgDirectory, "Saves", "Load Calculations");
        string unitDirectory = Path.Combine(baseSaveDirectory, "Unit");

        string directoryToDelete = Path.Combine(unitDirectory, unitInfo.FilteredFormattedName());
        if (Directory.Exists(directoryToDelete))
        {
          try
          {
            Directory.Delete(directoryToDelete, true);
          }
          catch (Autodesk.AutoCAD.Runtime.Exception ex)
          {
            MessageBox.Show($"Error deleting unit directory: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
          }
        }
      }
    }

    private void DeleteBuildingDirectory(Building.BuildingInformation buildingInfo)
    {
      if (buildingInfo != null)
      {
        string dwgDirectory = Path.GetDirectoryName(_initialDocumentPath);
        string baseSaveDirectory = Path.Combine(dwgDirectory, "Saves", "Load Calculations");
        string buildingDirectory = Path.Combine(baseSaveDirectory, "Building");

        string directoryToDelete = Path.Combine(buildingDirectory, buildingInfo.FilteredFormattedName());
        if (Directory.Exists(directoryToDelete))
        {
          try
          {
            Directory.Delete(directoryToDelete, true);
          }
          catch (Autodesk.AutoCAD.Runtime.Exception ex)
          {
            MessageBox.Show($"Error deleting building directory: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
          }
        }
      }
    }

    private void RemoveUnitTypeFromBuildings(int id)
    {
      for (int i = 0; i < BUILDING_TAB_CONTROL.TabCount; i++)
      {
        var tabPage = BUILDING_TAB_CONTROL.TabPages[i];
        var buildingLoadCalculation = tabPage.Controls.OfType<Building.LoadCalculationForm>().FirstOrDefault();
        if (buildingLoadCalculation != null)
        {
          var buildingInformation = buildingLoadCalculation.RetrieveBuildingInformation();
          var counterToRemove = buildingInformation.Counters.FirstOrDefault(counter => counter.UnitID == id);
          if (counterToRemove != null)
          {
            buildingInformation.Counters.Remove(counterToRemove);
          }
        }
      }
    }

    public List<Unit.UnitInformation> AllUnitInformation()
    {
      List<Unit.UnitInformation> allUnitInformation = new List<Unit.UnitInformation>();

      for (int i = 0; i < UNIT_TAB_CONTROL.TabCount; i++)
      {
        var tabPage = UNIT_TAB_CONTROL.TabPages[i];
        var unitLoadCalculation = tabPage.Controls.OfType<Unit.LoadCalculationForm>().FirstOrDefault();

        if (unitLoadCalculation != null)
        {
          var unitInformation = unitLoadCalculation.RetrieveUnitInformation();
          allUnitInformation.Add(unitInformation);
        }
      }

      return allUnitInformation;
    }

    public List<Building.BuildingInformation> AllBuildingInformation()
    {
      List<Building.BuildingInformation> allBuildingInformation = new List<Building.BuildingInformation>();

      for (int i = 0; i < BUILDING_TAB_CONTROL.TabCount; i++)
      {
        var tabPage = BUILDING_TAB_CONTROL.TabPages[i];
        var buildingLoadCalculation = tabPage.Controls.OfType<Building.LoadCalculationForm>().FirstOrDefault();

        if (buildingLoadCalculation != null)
        {
          var buildingInformation = buildingLoadCalculation.RetrieveBuildingInformation();
          allBuildingInformation.Add(buildingInformation);
        }
      }

      return allBuildingInformation;
    }

    public void UpdateBuildingData(Unit.UnitInformation unitInformation)
    {
      for (int i = 0; i < BUILDING_TAB_CONTROL.TabCount; i++)
      {
        var tabPage = BUILDING_TAB_CONTROL.TabPages[i];
        var buildingLoadCalculationForm = tabPage.Controls.OfType<Building.LoadCalculationForm>().FirstOrDefault();
        if (buildingLoadCalculationForm != null)
        {
          buildingLoadCalculationForm.UpdateUnitData(unitInformation);
        }
      }
    }

    private void SaveLoadCalculationForm()
    {
      string dwgDirectory = Path.GetDirectoryName(_initialDocumentPath);
      string baseSaveDirectory = Path.Combine(dwgDirectory, "Saves", "Load Calculations");

      // Create the Saves directory if it doesn't exist
      string savesDirectory = Path.Combine(dwgDirectory, "Saves");
      Directory.CreateDirectory(savesDirectory);

      // Create the Load Calculations directory if it doesn't exist
      Directory.CreateDirectory(baseSaveDirectory);

      // Create the Unit directory if it doesn't exist
      string unitDirectory = Path.Combine(baseSaveDirectory, "Unit");
      Directory.CreateDirectory(unitDirectory);

      // Create the Building directory if it doesn't exist
      string buildingDirectory = Path.Combine(baseSaveDirectory, "Building");
      Directory.CreateDirectory(buildingDirectory);

      List<Unit.UnitInformation> allUnitInformation = AllUnitInformation();
      HandleUnitDataSaving(unitDirectory, allUnitInformation);

      List<Building.BuildingInformation> allBuildingInformation = AllBuildingInformation();
      HandleBuildingDataSaving(buildingDirectory, allBuildingInformation);
    }

    private static void HandleUnitDataSaving(string unitDirectory, List<Unit.UnitInformation> allUnitInformation)
    {
      var duplicateIds = allUnitInformation
          .GroupBy(u => u.ID)
          .Where(g => g.Count() > 1)
          .Select(g => g.Key)
          .ToHashSet();

      int maximumUnitId = allUnitInformation.Max(u => u.ID);

      foreach (var unitInformation in allUnitInformation)
      {
        if (unitInformation.Name == null) continue;

        if (duplicateIds.Contains(unitInformation.ID))
        {
          unitInformation.ID = ++maximumUnitId;
        }

        string saveDirectory = Path.Combine(unitDirectory, unitInformation.FilteredFormattedName());
        Directory.CreateDirectory(saveDirectory);
        string json = JsonConvert.SerializeObject(unitInformation, Formatting.Indented);
        string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
        string savePath = Path.Combine(saveDirectory, $"{timestamp}.json");
        File.WriteAllText(savePath, json);
      }

      RemoveOldDirectories(unitDirectory, duplicateIds);
    }

    private static void RemoveOldDirectories(string unitDirectory, HashSet<int> duplicateIds)
    {
      var regex = new Regex(@"Unit .+ - ID(\d+)$");

      foreach (var subdirectory in Directory.GetDirectories(unitDirectory))
      {
        string dirName = Path.GetFileName(subdirectory);
        var match = regex.Match(dirName);

        if (match.Success && int.TryParse(match.Groups[1].Value, out int id) && duplicateIds.Contains(id))
        {
          try
          {
            Directory.Delete(subdirectory, true);
            Console.WriteLine($"Removed directory: {subdirectory}");
          }
          catch (Autodesk.AutoCAD.Runtime.Exception ex)
          {
            Console.WriteLine($"Error removing directory {subdirectory}: {ex.Message}");
          }
        }
      }
    }

    private static void HandleBuildingDataSaving(string buildingDirectory, List<Building.BuildingInformation> allBuildingInformation)
    {
      foreach (var oldDir in Directory.GetDirectories(buildingDirectory, "Building *"))
      {
        if (Directory.Exists(oldDir))
        {
          Directory.Delete(oldDir, true);
        }
      }

      var duplicateIds = allBuildingInformation
        .GroupBy(b => b.ID)
        .Where(g => g.Count() > 1)
        .Select(g => g.Key)
        .ToHashSet();

      int maximumBuildingId = allBuildingInformation.Max(b => b.ID);

      foreach (var buildingInformation in allBuildingInformation)
      {
        if (buildingInformation.Name == null) continue;

        if (duplicateIds.Contains(buildingInformation.ID))
        {
          buildingInformation.ID = ++maximumBuildingId;
        }

        string saveDirectory = Path.Combine(buildingDirectory, buildingInformation.FilteredFormattedName());
        Directory.CreateDirectory(saveDirectory);

        string json = JsonConvert.SerializeObject(buildingInformation, Formatting.Indented);
        string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
        string savePath = Path.Combine(saveDirectory, $"{timestamp}.json");
        File.WriteAllText(savePath, json);
      }

      RemoveOldBuildingDirectories(buildingDirectory, duplicateIds);
    }

    private static void RemoveOldBuildingDirectories(string buildingDirectory, HashSet<int> duplicateIds)
    {
      var regex = new Regex(@"^.+ - ID(\d+)$");
      foreach (var subdirectory in Directory.GetDirectories(buildingDirectory))
      {
        string dirName = Path.GetFileName(subdirectory);
        var match = regex.Match(dirName);
        if (match.Success && int.TryParse(match.Groups[1].Value, out int id) && duplicateIds.Contains(id))
        {
          try
          {
            Directory.Delete(subdirectory, true);
            Console.WriteLine($"Removed directory: {subdirectory}");
          }
          catch (Autodesk.AutoCAD.Runtime.Exception ex)
          {
            Console.WriteLine($"Error removing directory {subdirectory}: {ex.Message}");
          }
        }
      }
    }

    private void DisableNumberOfUnitsForAllTabs()
    {
      for (int i = 0; i < BUILDING_TAB_CONTROL.TabCount; i++)
      {
        var tabPage = BUILDING_TAB_CONTROL.TabPages[i];
        var buildingLoadCalculationForm = tabPage.Controls.OfType<Building.LoadCalculationForm>().FirstOrDefault();
        if (buildingLoadCalculationForm != null)
        {
          buildingLoadCalculationForm.DisableNumberOfUnits();
        }
      }
    }

    private void CreateOrUpdateLoadCalculations(bool isCreate)
    {
      var allUnitInfo = AllUnitInformation();
      var allBuildingInfo = AllBuildingInformation();

      Autodesk.AutoCAD.ApplicationServices.Application.MainWindow.Focus();

      using (DocumentLock docLock = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument.LockDocument())
      {
        Point3d point = new Point3d(0, 0, 0);

        if (isCreate)
        {
          point = HelperClass.UserClick();
        }

        foreach (var unitInfo in allUnitInfo)
        {
          Unit.LoadCalculation.CreateUnitLoadCalculationTable(unitInfo, point, isCreate);
          point = new Point3d(point.X - 7, point.Y, point.Z);
        }

        int numberOfBuildingsWithThreeOrMoreUnits = allBuildingInfo.Count(building => building.TotalNumberOfUnits() >= 3);

        foreach (var buildingInfo in allBuildingInfo)
        {
          var numberOfUnits = buildingInfo.TotalNumberOfUnits();

          if (numberOfUnits != 2) continue;

          point = CreateComboUnitLoadCalculationTable(isCreate, allUnitInfo, point, buildingInfo);
        }

        foreach (var buildingInfo in allBuildingInfo)
        {
          var numberOfUnits = buildingInfo.TotalNumberOfUnits();

          if (numberOfUnits < 3) continue;

          double width = Building.LoadCalculation.CreateBuildingLoadCalculationTable(buildingInfo, allUnitInfo, point, isCreate);
          point = new Point3d(point.X - width, point.Y, point.Z);
        }
      }
    }

    private static Point3d CreateComboUnitLoadCalculationTable(bool isCreate, List<UnitInformation> allUnitInfo, Point3d point, BuildingInformation buildingInfo)
    {
      var unitInfo1 = allUnitInfo.FirstOrDefault(unit => buildingInfo.Counters.Any(counter => counter.Count == 2));

      if (unitInfo1 != null)
      {
        var unitInfo2 = unitInfo1;
        unitInfo1 = CombinedUnitInformation.CreateCombinedCopyOfUnitInfo(unitInfo1, unitInfo2);
        Unit.LoadCalculation.CreateUnitLoadCalculationTable(unitInfo1, point, isCreate);
        point = new Point3d(point.X - 7, point.Y, point.Z);
      }
      else
      {
        var units = allUnitInfo.Where(unit => buildingInfo.Counters.Count(counter => counter.UnitID == unit.ID) == 1).ToList();

        if (units.Count == 2)
        {
          unitInfo1 = units[0];
          var unitInfo2 = units[1];

          if (unitInfo1.ID > unitInfo2.ID)
          {
            var temp = unitInfo1;
            unitInfo1 = unitInfo2;
            unitInfo2 = temp;
          }

          unitInfo1 = CombinedUnitInformation.CreateCombinedCopyOfUnitInfo(unitInfo1, unitInfo2);
          Unit.LoadCalculation.CreateUnitLoadCalculationTable(unitInfo1, point, isCreate);
          point = new Point3d(point.X - 7, point.Y, point.Z);
        }
      }

      return point;
    }

    private void TAB_CONTROL_SelectedIndexChanged(object sender, EventArgs e)
    {
      if (TAB_CONTROL.SelectedTab != null && TAB_CONTROL.SelectedTab.Text == "Unit")
      {
        DisableNumberOfUnitsForAllTabs();
      }

      for (int i = 0; i < BUILDING_TAB_CONTROL.TabCount; i++)
      {
        var tabPage = BUILDING_TAB_CONTROL.TabPages[i];
        var buildingLoadCalculationForm = tabPage.Controls.OfType<Building.LoadCalculationForm>().FirstOrDefault();
        if (buildingLoadCalculationForm != null)
        {
          buildingLoadCalculationForm.SetLoadBoxValues();
        }
      }
    }

    private void LOAD_CALCULATION_FORM_FormClosing(object sender, FormClosingEventArgs e)
    {
      SaveLoadCalculationForm();

      Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument.BeginDocumentClose -= Document_BeginDocumentClose;
    }

    private void CREATE_UNIT_BUTTON_Click(object sender, EventArgs e)
    {
      if (TAB_CONTROL.SelectedTab == UNIT_TAB)
      {
        AddNewUnitTab();
        UNIT_TAB_CONTROL.SelectedIndex = UNIT_TAB_CONTROL.TabCount - 1;
      }
      else if (TAB_CONTROL.SelectedTab == BUILDING_TAB)
      {
        AddNewBuildingTab();
        BUILDING_TAB_CONTROL.SelectedIndex = BUILDING_TAB_CONTROL.TabCount - 1;
      }
    }

    private void DELETE_UNIT_BUTTON_Click(object sender, EventArgs e)
    {
      if (TAB_CONTROL.SelectedTab == UNIT_TAB)
      {
        if (UNIT_TAB_CONTROL.SelectedTab != null)
        {
          RemoveCurrentTab();
        }
      }
      else if (TAB_CONTROL.SelectedTab == BUILDING_TAB)
      {
        if (BUILDING_TAB_CONTROL.SelectedTab != null)
        {
          RemoveCurrentTab();
        }
      }
    }

    private void CREATE_Click(object sender, EventArgs e)
    {
      CreateOrUpdateLoadCalculations(true);
    }

    private void SAVE_BUTTON_Click(object sender, EventArgs e)
    {
      SaveLoadCalculationForm();
    }

    private void UPDATE_Click(object sender, EventArgs e)
    {
      CreateOrUpdateLoadCalculations(false);
    }

    private void DUPLICATE_Click(object sender, EventArgs e)
    {
      if (TAB_CONTROL.SelectedTab == UNIT_TAB)
      {
        if (UNIT_TAB_CONTROL.SelectedTab != null)
        {
          var selectedTabPage = UNIT_TAB_CONTROL.SelectedTab;
          var selectedLoadCalculationForm = selectedTabPage.Controls.OfType<Unit.LoadCalculationForm>().FirstOrDefault();
          if (selectedLoadCalculationForm != null)
          {
            var unitInformation = selectedLoadCalculationForm.RetrieveUnitInformation();

            _maxUnitID++;

            var serializedUnitInformation = JsonConvert.SerializeObject(unitInformation);
            var newUnitInformation = JsonConvert.DeserializeObject<Unit.UnitInformation>(serializedUnitInformation);

            newUnitInformation.ID = _maxUnitID;

            TabPage newTabPage = new TabPage(newUnitInformation.FormattedName());
            newTabPage.Tag = _maxUnitID;
            Unit.LoadCalculationForm unitLoadCalculation = new Unit.LoadCalculationForm(this, _maxUnitID, newUnitInformation);
            newTabPage.Controls.Add(unitLoadCalculation);
            UNIT_TAB_CONTROL.TabPages.Add(newTabPage);

            UNIT_TAB_CONTROL.SelectedIndex = UNIT_TAB_CONTROL.TabCount - 1;
          }
        }
      }
      else if (TAB_CONTROL.SelectedTab == BUILDING_TAB)
      {
        if (BUILDING_TAB_CONTROL.SelectedTab != null)
        {
          var selectedTabPage = BUILDING_TAB_CONTROL.SelectedTab;
          var selectedLoadCalculationForm = selectedTabPage.Controls.OfType<Building.LoadCalculationForm>().FirstOrDefault();
          if (selectedLoadCalculationForm != null)
          {
            var buildingInformation = selectedLoadCalculationForm.RetrieveBuildingInformation();

            // Generate a new building ID
            _maxBuildingID++;

            var serializedBuildingInformation = JsonConvert.SerializeObject(buildingInformation);
            var newBuildingInformation = JsonConvert.DeserializeObject<Building.BuildingInformation>(serializedBuildingInformation);

            // Update the building information with the new ID
            newBuildingInformation.ID = _maxBuildingID;

            // Create a new tab with the updated building information
            TabPage newTabPage = new TabPage(newBuildingInformation.Name);
            newTabPage.Tag = _maxBuildingID;
            Building.LoadCalculationForm buildingLoadCalculation = new Building.LoadCalculationForm(this, _maxBuildingID, newBuildingInformation);
            newTabPage.Controls.Add(buildingLoadCalculation);
            BUILDING_TAB_CONTROL.TabPages.Add(newTabPage);

            BUILDING_TAB_CONTROL.SelectedIndex = BUILDING_TAB_CONTROL.TabCount - 1;
          }
        }
      }
    }

    private void LOAD_BUTTON_Click(object sender, EventArgs e)
    {
      // Close the form (this will trigger a save)
      this.Close();

      // Use OpenFileDialog instead of FolderBrowserDialog
      using (var openFileDialog = new OpenFileDialog())
      {
        openFileDialog.Title = "Select the Load Calculations file";
        openFileDialog.Filter = "All Files (*.*)|*.*";
        openFileDialog.CheckFileExists = false;
        openFileDialog.CheckPathExists = true;
        openFileDialog.FileName = "Load Calculations";

        if (openFileDialog.ShowDialog() == DialogResult.OK)
        {
          string selectedPath = Path.GetDirectoryName(openFileDialog.FileName);
          string selectedFileName = Path.GetFileName(openFileDialog.FileName);

          if (selectedFileName == "Load Calculations")
          {
            CopyLoadCalculationData(selectedPath);
          }
          else
          {
            MessageBox.Show("Please select a file or directory named 'Load Calculations'.", "Invalid Selection", MessageBoxButtons.OK, MessageBoxIcon.Warning);
          }
        }
      }
    }

    private void CopyLoadCalculationData(string sourcePath)
    {
      string targetPath = Path.Combine(Path.GetDirectoryName(_initialDocumentPath), "Saves", "Load Calculations");

      // Dictionary to store old and new Unit IDs
      Dictionary<int, int> unitIdMap = new Dictionary<int, int>();

      // Copy unit data
      CopyDirectoryData(Path.Combine(sourcePath, "Unit"), Path.Combine(targetPath, "Unit"),
          (sourceFile, targetDir) => CopyUnitData(sourceFile, targetDir, unitIdMap));

      // Copy building data
      CopyDirectoryData(Path.Combine(sourcePath, "Building"), Path.Combine(targetPath, "Building"),
          (sourceFile, targetDir) => CopyBuildingData(sourceFile, targetDir, unitIdMap));
    }

    private void CopyDirectoryData(string sourceDir, string targetDir, Action<string, string> copyAction)
    {
      if (Directory.Exists(sourceDir))
      {
        Directory.CreateDirectory(targetDir);

        foreach (var subDir in Directory.GetDirectories(sourceDir))
        {
          string dirName = Path.GetFileName(subDir);
          string newTargetSubDir = Path.Combine(targetDir, dirName);
          Directory.CreateDirectory(newTargetSubDir);

          var latestFile = Directory.GetFiles(subDir, "*.json")
                                    .OrderByDescending(f => f)
                                    .FirstOrDefault();

          if (latestFile != null)
          {
            copyAction(latestFile, newTargetSubDir);
          }
        }
      }
    }

    private void CopyUnitData(string sourceFile, string targetDir, Dictionary<int, int> unitIdMap)
    {
      string json = File.ReadAllText(sourceFile);
      var unitInfo = JsonConvert.DeserializeObject<Unit.UnitInformation>(json);

      _maxUnitID++;
      unitInfo.ID = _maxUnitID;

      string newJson = JsonConvert.SerializeObject(unitInfo, Formatting.Indented);
      string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
      string savePath = Path.Combine(targetDir, $"{timestamp}.json");
      File.WriteAllText(savePath, newJson);
    }

    private void CopyBuildingData(string sourceFile, string targetDir, Dictionary<int, int> unitIdMap)
    {
      string json = File.ReadAllText(sourceFile);
      var buildingInfo = JsonConvert.DeserializeObject<Building.BuildingInformation>(json);

      _maxBuildingID++;
      buildingInfo.ID = _maxBuildingID;

      // Update the Counters with new Unit IDs
      if (buildingInfo.Counters != null)
      {
        foreach (var counter in buildingInfo.Counters)
        {
          if (unitIdMap.TryGetValue(counter.UnitID, out int newUnitId))
          {
            counter.UnitID = newUnitId;
          }
          else
          {
            Console.WriteLine($"Warning: Unit ID {counter.UnitID} not found in the new mapping.");
          }
        }
      }

      string newJson = JsonConvert.SerializeObject(buildingInfo, Formatting.Indented);
      string timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
      string savePath = Path.Combine(targetDir, $"{timestamp}.json");
      File.WriteAllText(savePath, newJson);
    }
  }

  public class IdComparer
  {
    public static void CompareAndUpdateIds(List<Unit.UnitInformation> units, List<Building.BuildingInformation> buildings)
    {
      var usedUnitIds = new HashSet<int>();
      var usedBuildingIds = new HashSet<int>();

      // Update Unit IDs
      foreach (var unit in units)
      {
        while (usedUnitIds.Contains(unit.ID))
        {
          unit.ID++;
        }
        usedUnitIds.Add(unit.ID);
      }

      // Update Building IDs
      foreach (var building in buildings)
      {
        while (usedBuildingIds.Contains(building.ID))
        {
          building.ID++;
        }
        usedBuildingIds.Add(building.ID);
      }
    }

    public static void UpdateMaxIds(ref int maxUnitId, ref int maxBuildingId, List<Unit.UnitInformation> units, List<Building.BuildingInformation> buildings)
    {
      maxUnitId = units.Any() ? units.Max(u => u.ID) : maxUnitId;
      maxBuildingId = buildings.Any() ? buildings.Max(b => b.ID) : maxBuildingId;
    }
  }
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\LoadCalculations\LoadCalculationForm.Designer.cs 
﻿namespace GMEPElectricalResidential.LoadCalculations
{
  partial class LOAD_CALCULATION_FORM
  {
    /// <summary>
    /// Required designer variable.
    /// </summary>
    private System.ComponentModel.IContainer components = null;

    /// <summary>
    /// Clean up any resources being used.
    /// </summary>
    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    protected override void Dispose(bool disposing)
    {
      if (disposing && (components != null))
      {
        components.Dispose();
      }
      base.Dispose(disposing);
    }

    #region Windows Form Designer generated code

    /// <summary>
    /// Required method for Designer support - do not modify
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {
      this.TAB_CONTROL = new System.Windows.Forms.TabControl();
      this.UNIT_TAB = new System.Windows.Forms.TabPage();
      this.UNIT_TAB_CONTROL = new System.Windows.Forms.TabControl();
      this.BUILDING_TAB = new System.Windows.Forms.TabPage();
      this.BUILDING_TAB_CONTROL = new System.Windows.Forms.TabControl();
      this.CREATE_UNIT_BUTTON = new System.Windows.Forms.Button();
      this.DELETE_UNIT_BUTTON = new System.Windows.Forms.Button();
      this.SAVE_BUTTON = new System.Windows.Forms.Button();
      this.CREATE = new System.Windows.Forms.Button();
      this.UPDATE = new System.Windows.Forms.Button();
      this.DUPLICATE = new System.Windows.Forms.Button();
      this.LOAD_BUTTON = new System.Windows.Forms.Button();
      this.TAB_CONTROL.SuspendLayout();
      this.UNIT_TAB.SuspendLayout();
      this.BUILDING_TAB.SuspendLayout();
      this.SuspendLayout();
      // 
      // TAB_CONTROL
      // 
      this.TAB_CONTROL.Controls.Add(this.UNIT_TAB);
      this.TAB_CONTROL.Controls.Add(this.BUILDING_TAB);
      this.TAB_CONTROL.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.TAB_CONTROL.Location = new System.Drawing.Point(101, 12);
      this.TAB_CONTROL.Name = "TAB_CONTROL";
      this.TAB_CONTROL.SelectedIndex = 0;
      this.TAB_CONTROL.Size = new System.Drawing.Size(1558, 688);
      this.TAB_CONTROL.TabIndex = 0;
      // 
      // UNIT_TAB
      // 
      this.UNIT_TAB.Controls.Add(this.UNIT_TAB_CONTROL);
      this.UNIT_TAB.Location = new System.Drawing.Point(4, 29);
      this.UNIT_TAB.Name = "UNIT_TAB";
      this.UNIT_TAB.Padding = new System.Windows.Forms.Padding(3);
      this.UNIT_TAB.Size = new System.Drawing.Size(1550, 655);
      this.UNIT_TAB.TabIndex = 0;
      this.UNIT_TAB.Text = "Unit";
      this.UNIT_TAB.UseVisualStyleBackColor = true;
      // 
      // UNIT_TAB_CONTROL
      // 
      this.UNIT_TAB_CONTROL.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.UNIT_TAB_CONTROL.Location = new System.Drawing.Point(3, 3);
      this.UNIT_TAB_CONTROL.Name = "UNIT_TAB_CONTROL";
      this.UNIT_TAB_CONTROL.SelectedIndex = 0;
      this.UNIT_TAB_CONTROL.Size = new System.Drawing.Size(1547, 652);
      this.UNIT_TAB_CONTROL.TabIndex = 1;
      // 
      // BUILDING_TAB
      // 
      this.BUILDING_TAB.Controls.Add(this.BUILDING_TAB_CONTROL);
      this.BUILDING_TAB.Location = new System.Drawing.Point(4, 29);
      this.BUILDING_TAB.Name = "BUILDING_TAB";
      this.BUILDING_TAB.Padding = new System.Windows.Forms.Padding(3);
      this.BUILDING_TAB.Size = new System.Drawing.Size(1550, 655);
      this.BUILDING_TAB.TabIndex = 1;
      this.BUILDING_TAB.Text = "Building";
      this.BUILDING_TAB.UseVisualStyleBackColor = true;
      // 
      // BUILDING_TAB_CONTROL
      // 
      this.BUILDING_TAB_CONTROL.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.BUILDING_TAB_CONTROL.Location = new System.Drawing.Point(2, 1);
      this.BUILDING_TAB_CONTROL.Name = "BUILDING_TAB_CONTROL";
      this.BUILDING_TAB_CONTROL.SelectedIndex = 0;
      this.BUILDING_TAB_CONTROL.Size = new System.Drawing.Size(1547, 652);
      this.BUILDING_TAB_CONTROL.TabIndex = 2;
      // 
      // CREATE_UNIT_BUTTON
      // 
      this.CREATE_UNIT_BUTTON.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.CREATE_UNIT_BUTTON.Location = new System.Drawing.Point(12, 52);
      this.CREATE_UNIT_BUTTON.Name = "CREATE_UNIT_BUTTON";
      this.CREATE_UNIT_BUTTON.Size = new System.Drawing.Size(83, 34);
      this.CREATE_UNIT_BUTTON.TabIndex = 1;
      this.CREATE_UNIT_BUTTON.Text = "New";
      this.CREATE_UNIT_BUTTON.UseVisualStyleBackColor = true;
      this.CREATE_UNIT_BUTTON.Click += new System.EventHandler(this.CREATE_UNIT_BUTTON_Click);
      // 
      // DELETE_UNIT_BUTTON
      // 
      this.DELETE_UNIT_BUTTON.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.DELETE_UNIT_BUTTON.ForeColor = System.Drawing.Color.Red;
      this.DELETE_UNIT_BUTTON.Location = new System.Drawing.Point(12, 663);
      this.DELETE_UNIT_BUTTON.Name = "DELETE_UNIT_BUTTON";
      this.DELETE_UNIT_BUTTON.Size = new System.Drawing.Size(83, 33);
      this.DELETE_UNIT_BUTTON.TabIndex = 2;
      this.DELETE_UNIT_BUTTON.Text = "Delete";
      this.DELETE_UNIT_BUTTON.UseVisualStyleBackColor = true;
      this.DELETE_UNIT_BUTTON.Click += new System.EventHandler(this.DELETE_UNIT_BUTTON_Click);
      // 
      // SAVE_BUTTON
      // 
      this.SAVE_BUTTON.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.SAVE_BUTTON.Location = new System.Drawing.Point(12, 12);
      this.SAVE_BUTTON.Name = "SAVE_BUTTON";
      this.SAVE_BUTTON.Size = new System.Drawing.Size(83, 34);
      this.SAVE_BUTTON.TabIndex = 4;
      this.SAVE_BUTTON.Text = "Save";
      this.SAVE_BUTTON.UseVisualStyleBackColor = true;
      this.SAVE_BUTTON.Click += new System.EventHandler(this.SAVE_BUTTON_Click);
      // 
      // CREATE
      // 
      this.CREATE.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.CREATE.Location = new System.Drawing.Point(12, 92);
      this.CREATE.Name = "CREATE";
      this.CREATE.Size = new System.Drawing.Size(83, 34);
      this.CREATE.TabIndex = 5;
      this.CREATE.Text = "Create";
      this.CREATE.UseVisualStyleBackColor = true;
      this.CREATE.Click += new System.EventHandler(this.CREATE_Click);
      // 
      // UPDATE
      // 
      this.UPDATE.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.UPDATE.Location = new System.Drawing.Point(12, 132);
      this.UPDATE.Name = "UPDATE";
      this.UPDATE.Size = new System.Drawing.Size(83, 34);
      this.UPDATE.TabIndex = 6;
      this.UPDATE.Text = "Update";
      this.UPDATE.UseVisualStyleBackColor = true;
      this.UPDATE.Click += new System.EventHandler(this.UPDATE_Click);
      // 
      // DUPLICATE
      // 
      this.DUPLICATE.Font = new System.Drawing.Font("Microsoft Sans Serif", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.DUPLICATE.Location = new System.Drawing.Point(12, 172);
      this.DUPLICATE.Name = "DUPLICATE";
      this.DUPLICATE.Size = new System.Drawing.Size(83, 34);
      this.DUPLICATE.TabIndex = 206;
      this.DUPLICATE.Text = "Duplicate";
      this.DUPLICATE.UseVisualStyleBackColor = true;
      this.DUPLICATE.Click += new System.EventHandler(this.DUPLICATE_Click);
      // 
      // LOAD_BUTTON
      // 
      this.LOAD_BUTTON.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.LOAD_BUTTON.Location = new System.Drawing.Point(12, 212);
      this.LOAD_BUTTON.Name = "LOAD_BUTTON";
      this.LOAD_BUTTON.Size = new System.Drawing.Size(83, 34);
      this.LOAD_BUTTON.TabIndex = 207;
      this.LOAD_BUTTON.Text = "Load";
      this.LOAD_BUTTON.UseVisualStyleBackColor = true;
      this.LOAD_BUTTON.Click += new System.EventHandler(this.LOAD_BUTTON_Click);
      // 
      // LOAD_CALCULATION_FORM
      // 
      this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
      this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
      this.BackColor = System.Drawing.SystemColors.Control;
      this.ClientSize = new System.Drawing.Size(1671, 710);
      this.Controls.Add(this.LOAD_BUTTON);
      this.Controls.Add(this.DUPLICATE);
      this.Controls.Add(this.UPDATE);
      this.Controls.Add(this.CREATE);
      this.Controls.Add(this.SAVE_BUTTON);
      this.Controls.Add(this.DELETE_UNIT_BUTTON);
      this.Controls.Add(this.CREATE_UNIT_BUTTON);
      this.Controls.Add(this.TAB_CONTROL);
      this.Name = "LOAD_CALCULATION_FORM";
      this.Text = "Load Calculation Form";
      this.TAB_CONTROL.ResumeLayout(false);
      this.UNIT_TAB.ResumeLayout(false);
      this.BUILDING_TAB.ResumeLayout(false);
      this.ResumeLayout(false);

    }

    #endregion

    private System.Windows.Forms.TabControl TAB_CONTROL;
    private System.Windows.Forms.Button CREATE_UNIT_BUTTON;
    private System.Windows.Forms.Button DELETE_UNIT_BUTTON;
    private System.Windows.Forms.Button SAVE_BUTTON;
    private System.Windows.Forms.Button CREATE;
    private System.Windows.Forms.TabPage UNIT_TAB;
    private System.Windows.Forms.TabPage BUILDING_TAB;
    private System.Windows.Forms.TabControl UNIT_TAB_CONTROL;
    private System.Windows.Forms.TabControl BUILDING_TAB_CONTROL;
    private System.Windows.Forms.Button UPDATE;
    private System.Windows.Forms.Button DUPLICATE;
    private System.Windows.Forms.Button LOAD_BUTTON;
  }
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\LoadCalculations\Building\LoadCalculation.cs 
﻿using Autodesk.AutoCAD.ApplicationServices;
using Autodesk.AutoCAD.DatabaseServices;
using Autodesk.AutoCAD.Geometry;
using Autodesk.AutoCAD.Internal.DatabaseServices;
using GMEPElectricalResidential.HelperFiles;
using GMEPElectricalResidential.LoadCalculations.Unit;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Forms;
using System.Windows.Media.Media3D;
using Application = Autodesk.AutoCAD.ApplicationServices.Application;

namespace GMEPElectricalResidential.LoadCalculations.Building
{
  public class LoadCalculation
  {
    public static double CreateBuildingLoadCalculationTable(BuildingInformation buildingInfo, List<UnitInformation> allUnitInformation, Point3d placementPoint, bool placeTheBlocks = true)
    {
      double HEADER_HEIGHT = 0.75;
      double SUBTITLE_HEIGHT = 0.5;
      double ROW_HEIGHT = 0.25;
      double COLUMN_WIDTH = 1.5;
      double width = CalculateDynamicWidth(buildingInfo);
      double shiftHeight = 0;
      double currentHeight = HEADER_HEIGHT;
      string newBlockName = $"BUILDING {buildingInfo.ID}";
      var buildingUnitInfo = buildingInfo.GetListOfBuildingUnitTypes(allUnitInformation);
      var columnCount = buildingUnitInfo.Count;
      double additionalWidth = CalculateAdditionalWidth(buildingUnitInfo, COLUMN_WIDTH);

      placementPoint = GetStartingPoint(buildingInfo, placementPoint, COLUMN_WIDTH, width);

      if (buildingInfo == null)
      {
        return 0;
      }

      if (buildingInfo.Name == null)
      {
        buildingInfo.Name = "";
      }

      var acCurDb = Application.DocumentManager.MdiActiveDocument.Database;

      using (Transaction acTrans = acCurDb.TransactionManager.StartTransaction())
      {
        Point3d point = new Point3d(0, 0, 0);

        BlockTable acBlkTbl;
        acBlkTbl = acTrans.GetObject(acCurDb.BlockTableId, OpenMode.ForRead) as BlockTable;

        BlockTableRecord acBlkTblRec;

        var existingBlock = acBlkTbl.Cast<ObjectId>()
        .Select(id => acTrans.GetObject(id, OpenMode.ForRead) as BlockTableRecord)
        .FirstOrDefault(btr => btr.Name == newBlockName);

        if (existingBlock != null)
        {
          if (existingBlock.Name != newBlockName)
          {
            existingBlock.UpgradeOpen();
            existingBlock.Name = newBlockName;
            existingBlock.DowngradeOpen();
          }
          acBlkTblRec = existingBlock;
          existingBlock.UpgradeOpen();
          WipeExistingBlockContent(acBlkTblRec);
          existingBlock.DowngradeOpen();
        }
        else
        {
          acBlkTbl.UpgradeOpen();
          acBlkTblRec = new BlockTableRecord();
          acBlkTblRec.Name = newBlockName;
          acBlkTbl.Add(acBlkTblRec);
          acTrans.AddNewlyCreatedDBObject(acBlkTblRec, true);
          acBlkTbl.DowngradeOpen();
        }

        ObjectData titleData = GetCopyPasteData("Title");
        ObjectData rowHeaderData = GetCopyPasteData("RowHeader");
        ObjectData rowEntryData = GetCopyPasteData("RowEntry");
        ObjectData subtitleData = GetCopyPasteData("Subtitle");
        ObjectData spacerData = GetCopyPasteData("Spacer");

        UpdateObjectDataBasedOnDynamicWidth(width, COLUMN_WIDTH,
    ref titleData, ref rowHeaderData, ref rowEntryData, ref subtitleData, ref spacerData);

        // Title
        titleData = UpdateBuildingTitleData(titleData, buildingInfo, width, additionalWidth);
        string modifiedTitleData = JsonConvert.SerializeObject(titleData);
        CADObjectCommands.CreateObjectFromData(modifiedTitleData, point, acBlkTblRec);
        shiftHeight -= HEADER_HEIGHT;

        // Dwelling Area
        // Create Subtitle
        CreateSubtitle(subtitleData, shiftHeight, width, additionalWidth, point, acBlkTblRec, "Dwelling Information");
        shiftHeight -= SUBTITLE_HEIGHT;

        // Create Rows
        List<string> dwellingRowHeaders = RowHeaders.Dwelling;
        CreateRow(rowHeaderData, rowEntryData, shiftHeight, buildingUnitInfo, columnCount, point, acBlkTblRec, dwellingRowHeaders, width, COLUMN_WIDTH);
        shiftHeight -= ROW_HEIGHT * dwellingRowHeaders.Count;

        // General Load Area
        // Create Subtitle
        CreateSubtitle(subtitleData, shiftHeight, width, additionalWidth, point, acBlkTblRec, "General Load");
        shiftHeight -= SUBTITLE_HEIGHT;

        // Create Rows
        List<string> generalLoadRowHeaders = RowHeaders.GeneralLoad;
        CreateRow(rowHeaderData, rowEntryData, shiftHeight, buildingUnitInfo, columnCount, point, acBlkTblRec, generalLoadRowHeaders, width, COLUMN_WIDTH);
        shiftHeight -= ROW_HEIGHT * generalLoadRowHeaders.Count;

        // Custom General Loads
        // Create Rows
        List<string> customGeneralLoadRowHeaders = buildingUnitInfo.SelectMany(unit => unit.GeneralLoads.Customs.Select(customLoad => customLoad.Name)).Distinct().ToList();
        CreateRow(rowHeaderData, rowEntryData, shiftHeight, buildingUnitInfo, columnCount, point, acBlkTblRec, customGeneralLoadRowHeaders, width, COLUMN_WIDTH);
        shiftHeight -= ROW_HEIGHT * customGeneralLoadRowHeaders.Count;

        // General Load Calculations
        // Create Spacer
        CreateSpacer(spacerData, shiftHeight, additionalWidth, point, acBlkTblRec, width);
        shiftHeight -= ROW_HEIGHT;

        // Create Rows
        List<string> generalLoadCalculationsRowHeaders = RowHeaders.GeneralLoadCalculations;
        CreateRow(rowHeaderData, rowEntryData, shiftHeight, buildingUnitInfo, columnCount, point, acBlkTblRec, generalLoadCalculationsRowHeaders, width, COLUMN_WIDTH);
        shiftHeight -= ROW_HEIGHT * generalLoadCalculationsRowHeaders.Count;

        // AC Load Area
        // Create Subtitle
        CreateSubtitle(subtitleData, shiftHeight, width, additionalWidth, point, acBlkTblRec, "AC Load");
        shiftHeight -= SUBTITLE_HEIGHT;

        // Create Rows
        List<string> acLoadRowHeaders = RowHeaders.ACLoad;
        CreateRow(rowHeaderData, rowEntryData, shiftHeight, buildingUnitInfo, columnCount, point, acBlkTblRec, acLoadRowHeaders, width, COLUMN_WIDTH);
        shiftHeight -= ROW_HEIGHT * acLoadRowHeaders.Count;

        // Custom Loads if they exist
        if (buildingUnitInfo.Any(unit => unit.CustomLoads.Count > 0))
        {
          // Create Subtitle
          CreateSubtitle(subtitleData, shiftHeight, width, additionalWidth, point, acBlkTblRec, "Additional Load");
          shiftHeight -= SUBTITLE_HEIGHT;

          // Create Rows
          List<string> customLoadRowHeaders = buildingUnitInfo.SelectMany(unit => unit.CustomLoads.Select(customLoad => customLoad.Name)).Distinct().ToList();
          CreateRow(rowHeaderData, rowEntryData, shiftHeight, buildingUnitInfo, columnCount, point, acBlkTblRec, customLoadRowHeaders, width, COLUMN_WIDTH, true);
          shiftHeight -= ROW_HEIGHT * customLoadRowHeaders.Count;
        }

        // Service Sizing Area
        // Create Subtitle
        CreateSubtitle(subtitleData, shiftHeight, width, additionalWidth, point, acBlkTblRec, "Calculated Load for Service");
        shiftHeight -= SUBTITLE_HEIGHT;

        // Create Rows
        List<string> serviceSizingRowHeaders = RowHeaders.ServiceSizingUnits;
        CreateRow(rowHeaderData, rowEntryData, shiftHeight, buildingUnitInfo, columnCount, point, acBlkTblRec, serviceSizingRowHeaders, width, COLUMN_WIDTH, false, buildingInfo);
        shiftHeight -= ROW_HEIGHT * serviceSizingRowHeaders.Count;

        // Create Spacer
        CreateSpacer(spacerData, shiftHeight, additionalWidth, point, acBlkTblRec, width);
        shiftHeight -= ROW_HEIGHT;

        // Create Rows
        List<string> serviceSizingBuildingRowHeaders = RowHeaders.ServiceSizingBuilding;
        UpdateBuildingCalculationVoltage(serviceSizingBuildingRowHeaders, buildingInfo);
        CreateRow(rowHeaderData, rowEntryData, shiftHeight, buildingUnitInfo, columnCount, point, acBlkTblRec, serviceSizingBuildingRowHeaders, width, COLUMN_WIDTH, false, buildingInfo, true);
        shiftHeight -= ROW_HEIGHT * serviceSizingBuildingRowHeaders.Count;

        UpdateAllBlockReferences(newBlockName);

        acTrans.Commit();
      }

      if (placeTheBlocks)
      {
        using (Transaction acTrans = acCurDb.TransactionManager.StartTransaction())
        {
          BlockTable acBlkTbl;
          acBlkTbl = acTrans.GetObject(acCurDb.BlockTableId, OpenMode.ForRead) as BlockTable;
          BlockTableRecord acBlkTblRec;

          if (acCurDb.TileMode)
          {
            acBlkTblRec = acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
          }
          else
          {
            acBlkTblRec = acTrans.GetObject(acBlkTbl[BlockTableRecord.PaperSpace], OpenMode.ForWrite) as BlockTableRecord;
          }

          if (acBlkTbl.Has(newBlockName))
          {
            BlockReference acBlkRef = new BlockReference(placementPoint, acBlkTbl[newBlockName]);

            acBlkTblRec.AppendEntity(acBlkRef);

            acTrans.AddNewlyCreatedDBObject(acBlkRef, true);
          }

          acTrans.Commit();
        }
      }

      if (columnCount == 1)
      {
        return width + COLUMN_WIDTH;
      }
      else
      {
        return width + COLUMN_WIDTH + additionalWidth;
      }
    }

    public static void UpdateObjectDataBasedOnDynamicWidth(double width, double COLUMN_WIDTH,
    ref ObjectData titleData, ref ObjectData rowHeaderData, ref ObjectData rowEntryData,
    ref ObjectData subtitleData, ref ObjectData spacerData)
    {
      UpdateSingleObjectData(width, COLUMN_WIDTH, ref titleData);
      UpdateSingleObjectData(width, COLUMN_WIDTH, ref rowHeaderData, true);
      UpdateSingleObjectData(width, COLUMN_WIDTH, ref rowEntryData);
      UpdateSingleObjectData(width, COLUMN_WIDTH, ref subtitleData);
      UpdateSingleObjectData(width, COLUMN_WIDTH, ref spacerData);
    }

    private static void UpdateSingleObjectData(double width, double COLUMN_WIDTH, ref ObjectData objectData, bool isRowHeader = false)
    {
      const double ORIGINAL_FULL_WIDTH = 8.2033907256843577;
      const double ORIGINAL_ROW_HEADER_WIDTH = 6.7033907256843577;
      const double EPSILON = 0.0001;

      double originalWidth = isRowHeader ? ORIGINAL_ROW_HEADER_WIDTH : ORIGINAL_FULL_WIDTH;
      double newWidth = isRowHeader ? width : (width + COLUMN_WIDTH);

      foreach (var polyline in objectData.Polylines)
      {
        for (int i = 0; i < polyline.Vectors.Count; i++)
        {
          if (Math.Abs(polyline.Vectors[i].X - originalWidth) < EPSILON)
          {
            polyline.Vectors[i] = new SimpleVector3d(newWidth, polyline.Vectors[i].Y, polyline.Vectors[i].Z);
          }
        }
      }

      foreach (var mtext in objectData.MTexts)
      {
        if (Math.Abs(mtext.Location.X - originalWidth / 2) < EPSILON)
        {
          mtext.Location = new SimpleVector3d(newWidth / 2, mtext.Location.Y, mtext.Location.Z);
        }
      }
    }

    public static double CalculateDynamicWidth(BuildingInformation buildingInfo)
    {
      const double BASE_WIDTH = 6.7;
      const double EXTRA_WIDTH_PER_CHAR = 0.18;
      const int BASE_CHAR_COUNT = 46;

      string titleString = $"{buildingInfo.Title} - {buildingInfo.Name}";
      int extraChars = Math.Max(0, titleString.Length - BASE_CHAR_COUNT);
      double extraWidth = extraChars * EXTRA_WIDTH_PER_CHAR;

      return BASE_WIDTH + extraWidth;
    }

    private static void CreateSpacer(ObjectData spacerData, double shiftHeight, double additionalWidth, Point3d point, BlockTableRecord acBlkTblRec, double width)
    {
      var copiedSpacerData = JsonConvert.DeserializeObject<ObjectData>(JsonConvert.SerializeObject(spacerData));

      copiedSpacerData = ShiftDataVertically(copiedSpacerData, shiftHeight);

      foreach (var polyline in copiedSpacerData.Polylines)
      {
        for (int i = 0; i < polyline.Vectors.Count; i++)
        {
          if (Math.Abs(polyline.Vectors[i].X - (width + 1.5)) < 0.001)
          {
            polyline.Vectors[i].X = width + additionalWidth + 1.5;
          }
        }
      }

      string modifiedSpacerData = JsonConvert.SerializeObject(copiedSpacerData);
      CADObjectCommands.CreateObjectFromData(modifiedSpacerData, point, acBlkTblRec);
    }

    private static void CreateSubtitle(ObjectData subtitleData, double shiftHeight, double width, double additionalWidth, Point3d point, BlockTableRecord acBlkTblRec, string subtitle)
    {
      var copiedSubtitleData = JsonConvert.DeserializeObject<ObjectData>(JsonConvert.SerializeObject(subtitleData));

      copiedSubtitleData = ShiftDataVertically(copiedSubtitleData, shiftHeight);
      copiedSubtitleData = UpdateBuildingSubtitleData(copiedSubtitleData, width, additionalWidth, subtitle);

      string modifiedSubtitleData = JsonConvert.SerializeObject(copiedSubtitleData);
      CADObjectCommands.CreateObjectFromData(modifiedSubtitleData, point, acBlkTblRec);
    }

    private static void CreateRow(ObjectData rowHeaderData, ObjectData rowEntryData, double shiftHeight, List<UnitInformation> buildingUnitInfo, int columnCount, Point3d point, BlockTableRecord acBlkTblRec, List<string> rowHeaders, double width, double colWidth, bool isCustom = false, BuildingInformation buildingInfo = null, bool isBuildingData = false)
    {
      double ROW_HEIGHT = 0.25;
      foreach (var header in rowHeaders)
      {
        var copiedRowHeaderData = JsonConvert.DeserializeObject<ObjectData>(JsonConvert.SerializeObject(rowHeaderData));
        var copiedRowEntryData = JsonConvert.DeserializeObject<ObjectData>(JsonConvert.SerializeObject(rowEntryData));

        copiedRowHeaderData = ShiftDataVertically(copiedRowHeaderData, shiftHeight);
        copiedRowEntryData = ShiftDataVertically(copiedRowEntryData, shiftHeight);

        var allRowData = UpdateRowData(copiedRowHeaderData, copiedRowEntryData, buildingUnitInfo, columnCount, header, width, colWidth, isCustom, buildingInfo, isBuildingData);

        foreach (var rowData in allRowData)
        {
          string modifiedRowData = JsonConvert.SerializeObject(rowData);
          CADObjectCommands.CreateObjectFromData(modifiedRowData, point, acBlkTblRec);
        }

        shiftHeight -= ROW_HEIGHT;
      }
    }

    private static List<ObjectData> UpdateRowData(ObjectData rowHeaderData, ObjectData rowEntryData, List<UnitInformation> unitInfo, int colCount, string message, double width, double colWidth, bool isCustom = false, BuildingInformation buildingInfo = null, bool isBuildingData = false)
    {
      List<ObjectData> rowData = new List<ObjectData>();

      var rowHeaderTextObj = rowHeaderData.Texts.FirstOrDefault(text => text.Contents.Contains("Unit"));
      UpdateHeaderText(message, rowHeaderTextObj);
      rowData.Add(rowHeaderData);

      rowEntryData = ShiftDataHorizontally(rowEntryData, width);

      unitInfo = unitInfo.OrderBy(u => u.ID).ToList();

      if (isBuildingData && buildingInfo.Counters.Count != 0)
      {
        var copiedRowEntryData = JsonConvert.DeserializeObject<ObjectData>(JsonConvert.SerializeObject(rowEntryData));

        copiedRowEntryData = ExtendRectangleHorizontally(copiedRowEntryData, colWidth * (colCount - 1), width);
        copiedRowEntryData = ShiftTextHorizontally(copiedRowEntryData, colWidth * (colCount - 1));

        if (buildingInfo != null)
        {
          string value = RowHeaders.GetValueFromBuildingInfo(message, buildingInfo);
          var textObj = copiedRowEntryData.Texts.FirstOrDefault(text => text.Contents.Contains("A"));
          if (textObj != null)
          {
            textObj.Contents = textObj.Contents.Replace("A", value);
          }
        }

        rowData.Add(copiedRowEntryData);
      }
      else
      {
        for (int i = 0; i < colCount; i++)
        {
          var copiedRowEntryData = JsonConvert.DeserializeObject<ObjectData>(JsonConvert.SerializeObject(rowEntryData));

          copiedRowEntryData = ShiftDataHorizontally(copiedRowEntryData, colWidth * i);

          if (i < unitInfo.Count)
          {
            string value = "";
            if (!isCustom)
            {
              value = RowHeaders.GetValueFromUnitInfo(message, unitInfo[i], buildingInfo);
            }
            else
            {
              value = RowHeaders.GetValueFromCustomUnitInfo(message, unitInfo[i]);
            }
            var textObj = copiedRowEntryData.Texts.FirstOrDefault(text => text.Contents.Contains("A"));
            if (textObj != null)
            {
              textObj.Contents = textObj.Contents.Replace("A", value);
            }
          }

          rowData.Add(copiedRowEntryData);
        }
      }

      return rowData;
    }

    private static void UpdateHeaderText(string message, TextData rowHeaderTextObj)
    {
      if (message == "Laundry")
      {
        message = "Laundry (1-20ACKT by CEC 210.11)";
      }
      else if (message == "Bathroom")
      {
        message = "Bathroom (1-20ACKT by CEC 210.11)";
      }
      else if (message == "Small Appliance")
      {
        message = "Small Appliance (3-20ACK by CEC 210.11)";
      }
      rowHeaderTextObj.Contents = rowHeaderTextObj.Contents.Replace("Unit", message);
    }

    private static ObjectData ShiftTextHorizontally(ObjectData copiedRowEntryData, double shiftDistance)
    {
      foreach (var text in copiedRowEntryData.Texts)
      {
        text.Location.X += shiftDistance / 2;
        text.AlignmentPoint.X += shiftDistance / 2;
      }

      return copiedRowEntryData;
    }

    private static ObjectData ExtendRectangleHorizontally(ObjectData copiedRowEntryData, double extendDistance, double initialWidth)
    {
      foreach (var polyline in copiedRowEntryData.Polylines)
      {
        for (int i = 0; i < polyline.Vectors.Count; i++)
        {
          if (Math.Abs(polyline.Vectors[i].X - (initialWidth + 1.5)) < 0.001)
          {
            polyline.Vectors[i].X += extendDistance;
          }
        }
      }

      return copiedRowEntryData;
    }

    private static ObjectData UpdateBuildingSubtitleData(ObjectData subtitleData, double width, double additionalWidth, string message)
    {
      var textObj = subtitleData.MTexts.FirstOrDefault(mText => mText.Contents.Contains("Dwelling Information"));
      textObj.Contents = textObj.Contents.Replace("Dwelling Information", message);
      textObj.Contents = textObj.Contents.Replace("\\Farial|c0", "\\fArial Rounded MT Bold|b1|i1|c0|p34");
      UpdateTitleOrSubtitleText(subtitleData, width, additionalWidth, true);

      return subtitleData;
    }

    private static ObjectData UpdateBuildingTitleData(ObjectData titleData, BuildingInformation buildingInfo, double width, double additionalWidth)
    {
      var serviceLoadCalculationMText = titleData.MTexts.FirstOrDefault(mText => mText.Contents.Contains("SERVICE LOAD CALCULATION"));
      serviceLoadCalculationMText.Contents = serviceLoadCalculationMText.Contents.Replace("SERVICE LOAD CALCULATION", $"{buildingInfo.Title} - {buildingInfo.Name}");
      serviceLoadCalculationMText.Contents = serviceLoadCalculationMText.Contents.Replace("\\Farial|c0", "\\fArial Rounded MT Bold|b1|i0|c0|p34");
      UpdateTitleOrSubtitleText(titleData, width, additionalWidth);

      return titleData;
    }

    private static void UpdateAllBlockReferences(string blockName)
    {
      var acCurDb = Application.DocumentManager.MdiActiveDocument.Database;

      using (Transaction acTrans = acCurDb.TransactionManager.StartTransaction())
      {
        BlockTable acBlkTbl = acTrans.GetObject(acCurDb.BlockTableId, OpenMode.ForRead) as BlockTable;

        if (!acBlkTbl.Has(blockName))
          return;

        ObjectId blockId = acBlkTbl[blockName];

        foreach (ObjectId btrId in acBlkTbl)
        {
          BlockTableRecord btr = (BlockTableRecord)acTrans.GetObject(btrId, OpenMode.ForRead);
          foreach (ObjectId entId in btr)
          {
            Entity ent = acTrans.GetObject(entId, OpenMode.ForRead) as Entity;
            if (ent is BlockReference br && br.BlockTableRecord == blockId)
            {
              br.UpgradeOpen();
              br.RecordGraphicsModified(true);
            }
          }
        }

        acTrans.Commit();
      }
    }

    private static void WipeExistingBlockContent(BlockTableRecord acBlkTblRec)
    {
      foreach (ObjectId id in acBlkTblRec)
      {
        DBObject obj = id.GetObject(OpenMode.ForWrite);
        obj.Erase();
      }
    }

    private static ObjectData ShiftDataVertically(ObjectData bodyData, double shiftHeight)
    {
      bodyData = JsonConvert.DeserializeObject<ObjectData>(JsonConvert.SerializeObject(bodyData));

      foreach (var polyline in bodyData.Polylines)
      {
        for (int i = 0; i < polyline.Vectors.Count; i++)
        {
          polyline.Vectors[i].Y += shiftHeight;
        }
      }

      foreach (var line in bodyData.Lines)
      {
        line.StartPoint.Y += shiftHeight;
        line.EndPoint.Y += shiftHeight;
      }

      foreach (var arc in bodyData.Arcs)
      {
        arc.Center.Y += shiftHeight;
      }

      foreach (var circle in bodyData.Circles)
      {
        circle.Center.Y += shiftHeight;
      }

      foreach (var ellipse in bodyData.Ellipses)
      {
        ellipse.Center.Y += shiftHeight;
      }

      foreach (var mText in bodyData.MTexts)
      {
        mText.Location.Y += shiftHeight;
      }

      foreach (var text in bodyData.Texts)
      {
        text.Location.Y += shiftHeight;
        text.AlignmentPoint.Y += shiftHeight;
      }

      foreach (var solid in bodyData.Solids)
      {
        for (int i = 0; i < solid.Vertices.Count; i++)
        {
          solid.Vertices[i].Y += shiftHeight;
        }
      }

      return bodyData;
    }

    private static ObjectData ShiftDataHorizontally(ObjectData bodyData, double shiftWidth)
    {
      bodyData = JsonConvert.DeserializeObject<ObjectData>(JsonConvert.SerializeObject(bodyData));

      foreach (var polyline in bodyData.Polylines)
      {
        for (int i = 0; i < polyline.Vectors.Count; i++)
        {
          polyline.Vectors[i].X += shiftWidth;
        }
      }

      foreach (var line in bodyData.Lines)
      {
        line.StartPoint.X += shiftWidth;
        line.EndPoint.X += shiftWidth;
      }

      foreach (var arc in bodyData.Arcs)
      {
        arc.Center.X += shiftWidth;
      }

      foreach (var circle in bodyData.Circles)
      {
        circle.Center.X += shiftWidth;
      }

      foreach (var ellipse in bodyData.Ellipses)
      {
        ellipse.Center.X += shiftWidth;
      }

      foreach (var mText in bodyData.MTexts)
      {
        mText.Location.X += shiftWidth;
      }

      foreach (var text in bodyData.Texts)
      {
        text.Location.X += shiftWidth;
        text.AlignmentPoint.X += shiftWidth;
      }

      foreach (var solid in bodyData.Solids)
      {
        for (int i = 0; i < solid.Vertices.Count; i++)
        {
          solid.Vertices[i].X += shiftWidth;
        }
      }

      return bodyData;
    }

    private static ObjectData GetCopyPasteData(string fileName)
    {
      string assemblyLocation = Assembly.GetExecutingAssembly().Location;
      string assemblyDirectory = Path.GetDirectoryName(assemblyLocation);
      string relativeFilePath = Path.Combine(assemblyDirectory, $"LoadCalculations\\Building\\BlockData\\{fileName}.json");

      string jsonData = File.ReadAllText(relativeFilePath);
      ObjectData objectData = JsonConvert.DeserializeObject<ObjectData>(jsonData);
      return objectData;
    }

    private static double CalculateAdditionalWidth(List<Unit.UnitInformation> buildingUnitInfo, double COLUMN_WIDTH)
    {
      if (buildingUnitInfo.Count > 1)
      {
        double additionalWidth = (buildingUnitInfo.Count - 1) * COLUMN_WIDTH;
        return additionalWidth;
      }
      else if (buildingUnitInfo.Count == 1)
      {
        return 0;
      }
      else
      {
        return -COLUMN_WIDTH;
      }
    }

    private static void UpdateTitleOrSubtitleText(ObjectData titleData, double width, double additionalWidth, bool isSubtitle = false)
    {
      foreach (var polyline in titleData.Polylines)
      {
        for (int i = 0; i < polyline.Vectors.Count; i++)
        {
          if (polyline.Vectors[i].X == width + 1.5)
          {
            polyline.Vectors[i].X += additionalWidth;
          }
        }
      }

      if (!isSubtitle)
      {
        foreach (var mText in titleData.MTexts)
        {
          mText.Location.X += additionalWidth / 2;
        }
      }
    }

    private static Point3d GetStartingPoint(BuildingInformation buildingInfo, Point3d point, double COLUMN_WIDTH, double widthNoCols)
    {
      var numberOfUnitTypes = GetNumberOfUnitTypes(buildingInfo);
      var totalWidth = widthNoCols + (COLUMN_WIDTH * numberOfUnitTypes);

      var newPoint = new Point3d(point.X - totalWidth, point.Y, point.Z);
      return newPoint;
    }

    private static int GetNumberOfUnitTypes(BuildingInformation buildingInfo)
    {
      var counters = buildingInfo.Counters;
      var numberOfUnitTypes = counters.Count(c => c.Count > 0);

      return numberOfUnitTypes;
    }

    private static void UpdateBuildingCalculationVoltage(List<string> serviceSizingBuildingRowHeaders, BuildingInformation buildingInfo)
    {
      for (int i = 0; i < serviceSizingBuildingRowHeaders.Count; i++)
      {
        if (serviceSizingBuildingRowHeaders[i].Contains("Total Amperage"))
        {
          serviceSizingBuildingRowHeaders[i] = $"Total Amperage @120/{buildingInfo.Voltage} {buildingInfo.Phase}";
        }
      }
    }
  }

  public static class RowHeaders
  {
    public static List<string> Dwelling = new List<string> {
      "Unit",
      "Floor Area"
    };

    public static List<string> GeneralLoad = new List<string> {
      "General Lighting Subtotal (Floor Area x 3VA/ft²) (CEC 220.42)",
    };

    public static List<string> GeneralLoadCalculations = new List<string>
    {
      "Total General Load",
      "First 10 KVA @ 100% (CEC 220.82(B))",
      "Remaining @ 40% (CEC 220.82(B))",
      "General Calculated Load (CEC 220.82(B))"
    };

    public static List<string> ACLoad = new List<string>
    {
      "Outdoor Condensing Unit Load",
      "Indoor Fan Coil Unit Load",
      "Space Heating Unit Load",
      "Total AC Load (CEC 220.82(C))"
    };

    public static List<string> ServiceSizingUnits = new List<string>
    {
      "Number of Units Per Unit Type",
      "Load Per Unit Type ((Total General + AC + Additional) x # of Units)"
    };

    public static List<string> ServiceSizingBuilding = new List<string>
    {
      "Total Number Of Units",
      "Total Building Load (Sum of Load Per Unit Types)",
      "Demand Factor (CEC 220.84)",
      "Total Building Load with Demand Factor Applied",
      "House Load",
      "Total Building Load with Demand Factor Applied & House Load",
      "Total Amperage @120/208 1 PH",
      "Recommended Service Size"
    };

    public static string GetValueFromUnitInfo(string message, UnitInformation unitInfo, BuildingInformation buildingInfo = null)
    {
      UnitCounter unitType;

      switch (message)
      {
        case "Unit":
          return unitInfo.Name;

        case "Floor Area":
          return unitInfo.DwellingArea.FloorArea + "ft²";

        case "General Lighting Subtotal (Floor Area x 3VA/ft²) (CEC 220.42)":
          return unitInfo.GeneralLoads.Lighting.GetTotal().ToString() + "VA";

        case "Total General Load":
          return unitInfo.Totals.TotalGeneralLoad.ToString() + "VA";

        case "First 10 KVA @ 100% (CEC 220.82(B))":
          return unitInfo.Totals.First10KVA().ToString() + "VA";

        case "Remaining @ 40% (CEC 220.82(B))":
          return unitInfo.Totals.RemainderAt40Percent().ToString() + "VA";

        case "General Calculated Load (CEC 220.82(B))":
          int generalCalculatedLoad = unitInfo.Totals.First10KVA() + unitInfo.Totals.RemainderAt40Percent();
          return generalCalculatedLoad.ToString() + "VA";

        case "Outdoor Condensing Unit Load":
          return unitInfo.ACLoads.Condenser.ToString() + "VA";

        case "Indoor Fan Coil Unit Load":
          return unitInfo.ACLoads.FanCoil.ToString() + "VA";

        case "Space Heating Unit Load":
          return unitInfo.ACLoads.HeatingUnit.Heating.ToString() + "VA";

        case "Total AC Load (CEC 220.82(C))":
          return unitInfo.Totals.TotalACLoad.ToString() + "VA";

        case "Number of Units Per Unit Type":
          unitType = buildingInfo.Counters.FirstOrDefault(c => c.UnitID == unitInfo.ID);
          return unitType != null ? unitType.Count.ToString() : "0";

        case "Load Per Unit Type ((Total General + AC + Additional) x # of Units)":
          unitType = buildingInfo.Counters.FirstOrDefault(c => c.UnitID == unitInfo.ID);
          return unitType != null ? unitType.SubtotalLoad.ToString() + "VA" : "0VA";

        default:
          return TryGeneralCustomLoads(message, unitInfo);
      }
    }

    public static string GetValueFromBuildingInfo(string message, BuildingInformation buildingInfo)
    {
      switch (message)
      {
        case "Total Number Of Units":
          return buildingInfo.TotalNumberOfUnits().ToString();

        case "Total Building Load (Sum of Load Per Unit Types)":
          return buildingInfo.TotalBuildingLoad().ConvertToKVA().ToString("0.0") + "KVA";

        case "Demand Factor (CEC 220.84)":
          return buildingInfo.DemandFactor().ToString();

        case "Total Building Load with Demand Factor Applied":
          return buildingInfo.TotalBuildingLoadWithDemandFactor().ConvertToKVA().ToString("0.0") + "KVA";

        case "House Load":
          int houseLoad = (buildingInfo.HouseLoad ?? 0);
          return houseLoad.ConvertToKVA().ToString("0.0") + "KVA";

        case "Total Building Load with Demand Factor Applied & House Load":
          return buildingInfo.TotalBuildingLoadWithDemandFactorAndHouseLoad().ConvertToKVA().ToString("0.0") + "KVA";

        case "Total Amperage @120/208V 1 PH":
          return buildingInfo.TotalAmperage().ToString() + "A";

        case "Total Amperage @120/240V 1 PH":
          return buildingInfo.TotalAmperage().ToString() + "A";

        case "Total Amperage @120/208V 3 PH":
          return buildingInfo.TotalAmperage().ToString() + "A";

        case "Total Amperage @120/240V 3 PH":
          return buildingInfo.TotalAmperage().ToString() + "A";

        case "Recommended Service Size":
          return buildingInfo.RecommendedServiceSize().ToString() + "A";

        default:
          return "0VA";
      }
    }

    public static string GetValueFromCustomUnitInfo(string message, UnitInformation unitInfo)
    {
      foreach (var customLoad in unitInfo.CustomLoads)
      {
        if (customLoad.Name == message)
        {
          return customLoad.GetTotal().ToString() + "VA";
        }
      }

      return "0VA";
    }

    private static string TryGeneralCustomLoads(string message, UnitInformation unitInfo)
    {
      foreach (var generalCustomLoad in unitInfo.GeneralLoads.Customs)
      {
        if (generalCustomLoad.Name == message)
        {
          return generalCustomLoad.GetTotal().ToString() + "VA";
        }
      }

      return "0VA";
    }
  }
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\LoadCalculations\Building\LoadCalculationForm.cs 
﻿using GMEPElectricalResidential.HelperFiles;
using GMEPElectricalResidential.LoadCalculations.Unit;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static GMEPElectricalResidential.HelperFiles.HelperClass;

namespace GMEPElectricalResidential.LoadCalculations.Building
{
  public partial class LoadCalculationForm : UserControl
  {
    private int _tabID;
    private BuildingInformation _buildingInformation;
    public LOAD_CALCULATION_FORM _parentForm;
    private ToolTip _toolTip;
    private bool _isLoaded = false;
    private bool _buildingNullFlag = false;

    public LoadCalculationForm(LOAD_CALCULATION_FORM parent, int tabID, BuildingInformation buildingInformation = null)
    {
      InitializeComponent();
      _parentForm = parent;
      _toolTip = new ToolTip();
      _tabID = tabID;

      if (buildingInformation != null)
      {
        _buildingInformation = buildingInformation;
      }
      else
      {
        _buildingNullFlag = true;
        _buildingInformation = new BuildingInformation(tabID);
        SetDefaultValues();
      }

      DetectIncorrectInputs();

      this.Load += new EventHandler(BuildingLoadCalculation_Load);
    }

    private void BuildingLoadCalculation_Load(object sender, EventArgs e)
    {
      if (!_buildingNullFlag)
      {
        PopulateUserControlWithBuildingInformation(_buildingInformation);
      }
      _isLoaded = true;
    }

    private void PopulateUserControlWithBuildingInformation(BuildingInformation buildingInformation)
    {
      if (buildingInformation == null) return;

      BUILDING_NAME.Text = buildingInformation.Name;
      BUILDING_TITLE.Text = buildingInformation.Title;
      VOLTAGE.Text = buildingInformation.Voltage;
      PHASE_COMBO.Text = buildingInformation.Phase;
      HOUSE_LOAD.Text = buildingInformation.HouseLoad.ToString();
      HOUSE_LOAD_COPY.Text = buildingInformation.HouseLoad.ToString();
      TOTAL_NUMBER_OF_UNITS.Text = buildingInformation.TotalNumberOfUnits().ToString();
      SUBTOTAL_RESIDENTIAL_LOAD.Text = buildingInformation.TotalBuildingLoad().ToString();
      DEMAND_FACTOR.Text = buildingInformation.DemandFactor().ToString();
      TOTAL_DEMAND_LOAD.Text = buildingInformation.TotalBuildingLoadWithDemandFactor().ToString();
      TOTAL_DEMAND_HOUSE_LOAD.Text = buildingInformation.TotalBuildingLoadWithDemandFactorAndHouseLoad().ToString();
      TOTAL_AMPERAGE.Text = buildingInformation.TotalAmperage().ToString();
      SERVICE_RATING.Text = buildingInformation.RecommendedServiceSize().ToString();

      foreach (var counter in buildingInformation.Counters)
      {
        var unit = _parentForm.AllUnitInformation().FirstOrDefault(u => u.ID == counter.UnitID);
        if (unit != null)
        {
          UNIT_TYPES.Items.Add(unit.FormattedName());
        }
      }
    }

    private void DetectIncorrectInputs()
    {
      HOUSE_LOAD.KeyPress += OnlyDigitInputs;
      HOUSE_LOAD.KeyUp += UpdateHouseLoad;
      NUMBER_OF_UNITS.KeyPress += OnlyDigitInputs;
      NUMBER_OF_UNITS.KeyPress += OnlyWhenLoadBoxSelected;
      NUMBER_OF_UNITS.KeyUp += UpdateUnitCountInformation;
      NUMBER_OF_UNITS_BG.Click += InformUserHowToEnable;
    }

    private void InformUserHowToEnable(object sender, EventArgs e)
    {
      if (!NUMBER_OF_UNITS.Enabled)
      {
        _toolTip.SetToolTip(NUMBER_OF_UNITS, "Please select a unit type first");
        _toolTip.Show("Please select a unit type first", NUMBER_OF_UNITS, 0, -20, 2000);
      }
    }

    private void OnlyDigitInputs(object sender, KeyPressEventArgs e)
    {
      if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar))
      {
        e.Handled = true;
        _toolTip.Show("Input must be a digit", (Control)sender, 0, -20, 2000);
      }
    }

    private void OnlyWhenLoadBoxSelected(object sender, KeyPressEventArgs e)
    {
      if (UNIT_TYPES.SelectedIndex == -1)
      {
        e.Handled = true;
        _toolTip.Show("Select a unit type first", (Control)sender, 0, -20, 2000);
      }
    }

    public BuildingInformation RetrieveBuildingInformation()
    {
      return _buildingInformation;
    }

    private void SetDefaultValues()
    {
      VOLTAGE.SelectedIndex = 0;
      PHASE_COMBO.SelectedIndex = 0;
      BUILDING_TITLE.Text = "ELECTRICAL RESIDENTIAL LOAD CALCULATIONS";
      _buildingInformation.Phase = PHASE_COMBO.Text;
      _buildingInformation.Voltage = VOLTAGE.Text;
      _buildingInformation.Title = BUILDING_TITLE.Text;
      SetLoadBoxValues();
    }

    public void SetLoadBoxValues()
    {
      var allUnitInfo = _parentForm.AllUnitInformation();
      UNIT_TYPES.Items.Clear();
      foreach (var unit in allUnitInfo)
      {
        UNIT_TYPES.Items.Add(unit.FormattedName());
      }
    }

    public void DisableNumberOfUnits()
    {
      NUMBER_OF_UNITS.Enabled = false;
      NUMBER_OF_UNITS.Text = "";
      SUBTOTAL_UNIT_LOADS.Text = "0";
    }

    private void BUILDING_NAME_TextChanged(object sender, EventArgs e)
    {
      var textBox = sender as TextBox;
      if (textBox != null)
      {
        var parentTab = this.Parent as TabPage;
        if (parentTab != null)
        {
          _buildingInformation.Name = textBox.Text;
          parentTab.Text = _buildingInformation.Name;
        }
      }
    }

    private void VOLTAGE_SelectedIndexChanged(object sender, EventArgs e)
    {
      _buildingInformation.Voltage = VOLTAGE.Text;
      UpdateBuildingFormInformation();
    }

    private void UpdateHouseLoad(object sender, KeyEventArgs e)
    {
      string houseLoadText = HOUSE_LOAD.Text;

      if (string.IsNullOrEmpty(houseLoadText))
      {
        houseLoadText = "0";
      }

      _buildingInformation.HouseLoad = int.Parse(houseLoadText);
      HOUSE_LOAD_COPY.Text = _buildingInformation.HouseLoad.ToString();

      UpdateBuildingFormInformation();
    }

    private void UpdateBuildingFormInformation()
    {
      TOTAL_NUMBER_OF_UNITS.Text = _buildingInformation.TotalNumberOfUnits().ToString();
      SUBTOTAL_RESIDENTIAL_LOAD.Text = _buildingInformation.TotalBuildingLoad().ToString();
      DEMAND_FACTOR.Text = _buildingInformation.DemandFactor().ToString();
      TOTAL_DEMAND_LOAD.Text = _buildingInformation.TotalBuildingLoadWithDemandFactor().ToString();
      TOTAL_DEMAND_HOUSE_LOAD.Text = _buildingInformation.TotalBuildingLoadWithDemandFactorAndHouseLoad().ToString();
      TOTAL_AMPERAGE.Text = _buildingInformation.TotalAmperage().ToString();
      SERVICE_RATING.Text = _buildingInformation.RecommendedServiceSize().ToString();
    }

    private void UpdateUnitCountInformation(object sender, KeyEventArgs e)
    {
      UpdateSubtotalOfUnitLoads();
      if (e.KeyValue == '\r') SelectNextItem();
    }

    private void UpdateSubtotalOfUnitLoads()
    {
      UnitInformation selectedUnit = GetSelectedUnit();
      if (selectedUnit == null) return;

      if (int.TryParse(NUMBER_OF_UNITS.Text, out int count))
      {
        var subtotalUnitLoads = count * selectedUnit.Totals.SubtotalOfUnitType();
        _buildingInformation.UpdateCounter(selectedUnit, count, subtotalUnitLoads);
        SUBTOTAL_UNIT_LOADS.Text = subtotalUnitLoads.ToString();
      }
      UpdateBuildingFormInformation();
    }

    private UnitInformation GetSelectedUnit()
    {
      var allUnitInfo = _parentForm.AllUnitInformation();
      var selectedUnit = allUnitInfo.FirstOrDefault(unit => unit.FormattedName() == UNIT_TYPES.Text);
      return selectedUnit;
    }

    private void UNIT_TYPES_SelectedIndexChanged(object sender, EventArgs e)
    {
      NUMBER_OF_UNITS.Enabled = true;
      NUMBER_OF_UNITS.Text = "";
      NUMBER_OF_UNITS.Focus();

      var allUnitInfo = _parentForm.AllUnitInformation();
      var selectedUnit = allUnitInfo.FirstOrDefault(unit => unit.FormattedName() == UNIT_TYPES.Text);
      if (selectedUnit != null)
      {
        var counter = _buildingInformation.Counters.FirstOrDefault(c => c.UnitID == selectedUnit.ID);
        if (counter != null)
        {
          NUMBER_OF_UNITS.Text = counter.Count.ToString();
          SUBTOTAL_UNIT_LOADS.Text = counter.SubtotalLoad.ToString();
        }
        else
        {
          SUBTOTAL_UNIT_LOADS.Text = "0";
        }
        NUMBER_OF_UNITS.SelectAll();
      }
    }

    private void NEXT_Click(object sender, EventArgs e)
    {
      NUMBER_OF_UNITS.Text = "";
      SelectNextItem();
    }

    private void SelectNextItem()
    {
      if (UNIT_TYPES.Items.Count > 0)
      {
        if (UNIT_TYPES.SelectedIndex == -1)
        {
          UNIT_TYPES.SelectedIndex = 0;
        }
        else if (UNIT_TYPES.SelectedIndex == UNIT_TYPES.Items.Count - 1)
        {
          UNIT_TYPES.SelectedIndex = 0;
        }
        else
        {
          UNIT_TYPES.SelectedIndex += 1;
        }
      }
    }

    public void UpdateUnitData(Unit.UnitInformation unitInformation)
    {
      if (_buildingInformation == null) return;
      if (_buildingInformation.Counters == null) return;
      if (unitInformation == null) return;

      var counter = _buildingInformation.Counters.FirstOrDefault(c => c.UnitID == unitInformation.ID);
      if (counter == null) return;

      var existingNumberOfUnits = counter.Count;
      var newSubtotal = unitInformation.Totals.SubtotalOfUnitType() * existingNumberOfUnits;
      _buildingInformation.UpdateCounter(unitInformation, existingNumberOfUnits, newSubtotal);
      UpdateBuildingFormInformation();
    }

    private void PHASE_COMBO_SelectedIndexChanged(object sender, EventArgs e)
    {
      _buildingInformation.Phase = PHASE_COMBO.Text;
      UpdateBuildingFormInformation();
    }

    private void BUILDING_TITLE_TextChanged(object sender, EventArgs e)
    {
      _buildingInformation.Title = BUILDING_TITLE.Text;
    }
  }

  public static class IntExtensions
  {
    public static double ConvertToKVA(this int value)
    {
      return Math.Round(value / 1000.0, 1);
    }
  }

  public class BuildingInformation
  {
    public string Name { get; set; }
    public string Title { get; set; } = "ELECTRICAL RESIDENTIAL LOAD CALCULATIONS";
    public string Voltage { get; set; }
    public string Phase { get; set; }
    public int ID { get; set; }
    public int? HouseLoad { get; set; }
    public List<UnitCounter> Counters { get; set; }

    public BuildingInformation(int id)
    {
      ID = id;
      HouseLoad = 0;
      Counters = new List<UnitCounter>();
    }

    public void UpdateCounter(Unit.UnitInformation unit, int count, int subtotal)
    {
      var existingCounter = Counters.FirstOrDefault(c => c.UnitID == unit.ID);
      if (existingCounter != null)
      {
        Counters.Remove(existingCounter);
      }

      Counters.Add(new UnitCounter
      {
        UnitID = unit.ID,
        Count = count,
        SubtotalLoad = subtotal
      });
    }

    public List<Unit.UnitInformation> GetListOfBuildingUnitTypes(List<Unit.UnitInformation> allUnitInformation)
    {
      var buildingUnitTypes = new List<Unit.UnitInformation>();

      foreach (var counter in Counters)
      {
        if (counter.Count > 0)
        {
          var unitInformation = allUnitInformation.FirstOrDefault(u => u.ID == counter.UnitID);
          if (unitInformation != null)
          {
            buildingUnitTypes.Add(unitInformation);
          }
        }
      }

      return buildingUnitTypes;
    }

    public int TotalNumberOfUnits()
    {
      int total = 0;
      foreach (var counter in Counters)
      {
        total += counter.Count;
      }
      return total;
    }

    public int TotalBuildingLoad()
    {
      int total = 0;
      foreach (var counter in Counters)
      {
        total += counter.SubtotalLoad;
      }
      return total;
    }

    public string FormattedName()
    {
      return $"{Name} - ID{ID}";
    }

    public string FilteredFormattedName()
    {
      if (string.IsNullOrEmpty(Name))
      {
        return $" - ID{ID}";
      }

      string filteredName = new string(Name.Where(c => char.IsLetterOrDigit(c)).ToArray());
      return $"{filteredName} - ID{ID}";
    }

    public int TotalBuildingLoadWithDemandFactor()
    {
      return (int)Math.Round(TotalBuildingLoad() * DemandFactor());
    }

    public double DemandFactor()
    {
      var dwellingUnits = TotalNumberOfUnits();
      if (dwellingUnits >= 3 && dwellingUnits <= 5)
        return 45.0 / 100.0;
      else if (dwellingUnits >= 6 && dwellingUnits <= 7)
        return 44.0 / 100.0;
      else if (dwellingUnits >= 8 && dwellingUnits <= 10)
        return 43.0 / 100.0;
      else if (dwellingUnits == 11)
        return 42.0 / 100.0;
      else if (dwellingUnits >= 12 && dwellingUnits <= 13)
        return 41.0 / 100.0;
      else if (dwellingUnits >= 14 && dwellingUnits <= 15)
        return 40.0 / 100.0;
      else if (dwellingUnits >= 16 && dwellingUnits <= 17)
        return 39.0 / 100.0;
      else if (dwellingUnits >= 18 && dwellingUnits <= 20)
        return 38.0 / 100.0;
      else if (dwellingUnits == 21)
        return 37.0 / 100.0;
      else if (dwellingUnits >= 22 && dwellingUnits <= 23)
        return 36.0 / 100.0;
      else if (dwellingUnits >= 24 && dwellingUnits <= 25)
        return 35.0 / 100.0;
      else if (dwellingUnits >= 26 && dwellingUnits <= 27)
        return 34.0 / 100.0;
      else if (dwellingUnits >= 28 && dwellingUnits <= 30)
        return 33.0 / 100.0;
      else if (dwellingUnits == 31)
        return 32.0 / 100.0;
      else if (dwellingUnits >= 32 && dwellingUnits <= 33)
        return 31.0 / 100.0;
      else if (dwellingUnits >= 34 && dwellingUnits <= 36)
        return 30.0 / 100.0;
      else if (dwellingUnits >= 37 && dwellingUnits <= 38)
        return 29.0 / 100.0;
      else if (dwellingUnits >= 39 && dwellingUnits <= 42)
        return 28.0 / 100.0;
      else if (dwellingUnits >= 43 && dwellingUnits <= 45)
        return 27.0 / 100.0;
      else if (dwellingUnits >= 46 && dwellingUnits <= 50)
        return 26.0 / 100.0;
      else if (dwellingUnits >= 51 && dwellingUnits <= 55)
        return 25.0 / 100.0;
      else if (dwellingUnits >= 56 && dwellingUnits <= 61)
        return 24.0 / 100.0;
      else if (dwellingUnits >= 62)
        return 23.0 / 100.0;
      else
        return 1.0;
    }

    public int TotalBuildingLoadWithDemandFactorAndHouseLoad()
    {
      return (HouseLoad ?? 0) + TotalBuildingLoadWithDemandFactor();
    }

    public int TotalAmperage()
    {
      int voltage = int.Parse(Voltage.TrimEnd('V'));
      double totalDemandHouseLoad = TotalBuildingLoadWithDemandFactorAndHouseLoad();
      if (Phase == "1 PH")
      {
        return (int)Math.Round(totalDemandHouseLoad / voltage);
      }
      else
      {
        return (int)Math.Round(totalDemandHouseLoad / 360);
      }
    }

    public int RecommendedServiceSize()
    {
      int[] possibleValues = { 30, 60, 100, 125, 150, 200, 400, 600, 800, 1000, 1200, 1600, 2000, 2500, 3000 };
      int totalAmperage = TotalAmperage();
      int? serviceRating = possibleValues.FirstOrDefault(value => value >= totalAmperage);

      if (serviceRating == 0)
      {
        serviceRating = 3000;
        int increment = 1000;
        while (serviceRating <= totalAmperage)
        {
          serviceRating += increment;
        }
      }

      return serviceRating ?? 0;
    }
  }

  public class UnitCounter
  {
    public int UnitID { get; set; }
    public int Count { get; set; }
    public int SubtotalLoad { get; set; }
  }
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\LoadCalculations\Building\LoadCalculationForm.Designer.cs 
﻿namespace GMEPElectricalResidential.LoadCalculations.Building
{
  partial class LoadCalculationForm
  {
    /// <summary> 
    /// Required designer variable.
    /// </summary>
    private System.ComponentModel.IContainer components = null;

    /// <summary> 
    /// Clean up any resources being used.
    /// </summary>
    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    protected override void Dispose(bool disposing)
    {
      if (disposing && (components != null))
      {
        components.Dispose();
      }
      base.Dispose(disposing);
    }

    #region Component Designer generated code

    /// <summary> 
    /// Required method for Designer support - do not modify 
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {
      this.panel1 = new System.Windows.Forms.Panel();
      this.BUILDING_NAME = new System.Windows.Forms.TextBox();
      this.labelname = new System.Windows.Forms.Label();
      this.panel2 = new System.Windows.Forms.Panel();
      this.HOUSE_LOAD = new System.Windows.Forms.TextBox();
      this.label1 = new System.Windows.Forms.Label();
      this.UNIT_TYPES = new System.Windows.Forms.ListBox();
      this.label17 = new System.Windows.Forms.Label();
      this.NUMBER_OF_UNITS_BG = new System.Windows.Forms.Panel();
      this.NUMBER_OF_UNITS = new System.Windows.Forms.TextBox();
      this.label3 = new System.Windows.Forms.Label();
      this.label61 = new System.Windows.Forms.Label();
      this.NEXT = new System.Windows.Forms.Button();
      this.label2 = new System.Windows.Forms.Label();
      this.label4 = new System.Windows.Forms.Label();
      this.label5 = new System.Windows.Forms.Label();
      this.label63 = new System.Windows.Forms.Label();
      this.SUBTOTAL_UNIT_LOADS = new System.Windows.Forms.Label();
      this.label16 = new System.Windows.Forms.Label();
      this.label6 = new System.Windows.Forms.Label();
      this.TOTAL_NUMBER_OF_UNITS = new System.Windows.Forms.Label();
      this.label8 = new System.Windows.Forms.Label();
      this.label9 = new System.Windows.Forms.Label();
      this.SUBTOTAL_RESIDENTIAL_LOAD = new System.Windows.Forms.Label();
      this.label11 = new System.Windows.Forms.Label();
      this.DEMAND_FACTOR = new System.Windows.Forms.Label();
      this.label14 = new System.Windows.Forms.Label();
      this.label15 = new System.Windows.Forms.Label();
      this.TOTAL_DEMAND_LOAD = new System.Windows.Forms.Label();
      this.label19 = new System.Windows.Forms.Label();
      this.label12 = new System.Windows.Forms.Label();
      this.HOUSE_LOAD_COPY = new System.Windows.Forms.Label();
      this.label21 = new System.Windows.Forms.Label();
      this.label22 = new System.Windows.Forms.Label();
      this.TOTAL_DEMAND_HOUSE_LOAD = new System.Windows.Forms.Label();
      this.label24 = new System.Windows.Forms.Label();
      this.label25 = new System.Windows.Forms.Label();
      this.TOTAL_AMPERAGE = new System.Windows.Forms.Label();
      this.label27 = new System.Windows.Forms.Label();
      this.label28 = new System.Windows.Forms.Label();
      this.SERVICE_RATING = new System.Windows.Forms.Label();
      this.label30 = new System.Windows.Forms.Label();
      this.VOLTAGE = new System.Windows.Forms.ComboBox();
      this.label7 = new System.Windows.Forms.Label();
      this.label10 = new System.Windows.Forms.Label();
      this.PHASE_COMBO = new System.Windows.Forms.ComboBox();
      this.panel3 = new System.Windows.Forms.Panel();
      this.BUILDING_TITLE = new System.Windows.Forms.TextBox();
      this.label13 = new System.Windows.Forms.Label();
      this.panel1.SuspendLayout();
      this.panel2.SuspendLayout();
      this.NUMBER_OF_UNITS_BG.SuspendLayout();
      this.panel3.SuspendLayout();
      this.SuspendLayout();
      // 
      // panel1
      // 
      this.panel1.BackColor = System.Drawing.SystemColors.Window;
      this.panel1.Controls.Add(this.BUILDING_NAME);
      this.panel1.Location = new System.Drawing.Point(19, 79);
      this.panel1.Margin = new System.Windows.Forms.Padding(6, 0, 48, 12);
      this.panel1.Name = "panel1";
      this.panel1.Padding = new System.Windows.Forms.Padding(5);
      this.panel1.Size = new System.Drawing.Size(291, 28);
      this.panel1.TabIndex = 0;
      // 
      // BUILDING_NAME
      // 
      this.BUILDING_NAME.BorderStyle = System.Windows.Forms.BorderStyle.None;
      this.BUILDING_NAME.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.BUILDING_NAME.Location = new System.Drawing.Point(5, 5);
      this.BUILDING_NAME.Margin = new System.Windows.Forms.Padding(0);
      this.BUILDING_NAME.Name = "BUILDING_NAME";
      this.BUILDING_NAME.Size = new System.Drawing.Size(281, 19);
      this.BUILDING_NAME.TabIndex = 0;
      this.BUILDING_NAME.TextChanged += new System.EventHandler(this.BUILDING_NAME_TextChanged);
      // 
      // labelname
      // 
      this.labelname.AutoSize = true;
      this.labelname.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.labelname.Location = new System.Drawing.Point(17, 52);
      this.labelname.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.labelname.Name = "labelname";
      this.labelname.Size = new System.Drawing.Size(61, 24);
      this.labelname.TabIndex = 3;
      this.labelname.Text = "Name";
      // 
      // panel2
      // 
      this.panel2.BackColor = System.Drawing.SystemColors.Window;
      this.panel2.Controls.Add(this.HOUSE_LOAD);
      this.panel2.Location = new System.Drawing.Point(186, 146);
      this.panel2.Margin = new System.Windows.Forms.Padding(6, 0, 48, 12);
      this.panel2.Name = "panel2";
      this.panel2.Padding = new System.Windows.Forms.Padding(5);
      this.panel2.Size = new System.Drawing.Size(97, 28);
      this.panel2.TabIndex = 3;
      // 
      // HOUSE_LOAD
      // 
      this.HOUSE_LOAD.BorderStyle = System.Windows.Forms.BorderStyle.None;
      this.HOUSE_LOAD.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.HOUSE_LOAD.Location = new System.Drawing.Point(5, 5);
      this.HOUSE_LOAD.Margin = new System.Windows.Forms.Padding(0);
      this.HOUSE_LOAD.Name = "HOUSE_LOAD";
      this.HOUSE_LOAD.Size = new System.Drawing.Size(86, 19);
      this.HOUSE_LOAD.TabIndex = 0;
      // 
      // label1
      // 
      this.label1.AutoSize = true;
      this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label1.Location = new System.Drawing.Point(184, 119);
      this.label1.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label1.Name = "label1";
      this.label1.Size = new System.Drawing.Size(113, 24);
      this.label1.TabIndex = 5;
      this.label1.Text = "House Load";
      // 
      // UNIT_TYPES
      // 
      this.UNIT_TYPES.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
      this.UNIT_TYPES.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.UNIT_TYPES.FormattingEnabled = true;
      this.UNIT_TYPES.ItemHeight = 20;
      this.UNIT_TYPES.Location = new System.Drawing.Point(17, 246);
      this.UNIT_TYPES.Name = "UNIT_TYPES";
      this.UNIT_TYPES.Size = new System.Drawing.Size(253, 242);
      this.UNIT_TYPES.TabIndex = 4;
      this.UNIT_TYPES.SelectedIndexChanged += new System.EventHandler(this.UNIT_TYPES_SelectedIndexChanged);
      // 
      // label17
      // 
      this.label17.AutoSize = true;
      this.label17.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label17.Location = new System.Drawing.Point(14, 216);
      this.label17.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label17.Name = "label17";
      this.label17.Size = new System.Drawing.Size(90, 24);
      this.label17.TabIndex = 57;
      this.label17.Text = "Unit Type";
      // 
      // NUMBER_OF_UNITS_BG
      // 
      this.NUMBER_OF_UNITS_BG.BackColor = System.Drawing.SystemColors.Window;
      this.NUMBER_OF_UNITS_BG.Controls.Add(this.NUMBER_OF_UNITS);
      this.NUMBER_OF_UNITS_BG.Location = new System.Drawing.Point(18, 526);
      this.NUMBER_OF_UNITS_BG.Margin = new System.Windows.Forms.Padding(6, 0, 48, 12);
      this.NUMBER_OF_UNITS_BG.Name = "NUMBER_OF_UNITS_BG";
      this.NUMBER_OF_UNITS_BG.Padding = new System.Windows.Forms.Padding(5);
      this.NUMBER_OF_UNITS_BG.Size = new System.Drawing.Size(143, 28);
      this.NUMBER_OF_UNITS_BG.TabIndex = 5;
      // 
      // NUMBER_OF_UNITS
      // 
      this.NUMBER_OF_UNITS.BorderStyle = System.Windows.Forms.BorderStyle.None;
      this.NUMBER_OF_UNITS.Enabled = false;
      this.NUMBER_OF_UNITS.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.NUMBER_OF_UNITS.Location = new System.Drawing.Point(5, 5);
      this.NUMBER_OF_UNITS.Margin = new System.Windows.Forms.Padding(0);
      this.NUMBER_OF_UNITS.Name = "NUMBER_OF_UNITS";
      this.NUMBER_OF_UNITS.Size = new System.Drawing.Size(133, 19);
      this.NUMBER_OF_UNITS.TabIndex = 0;
      // 
      // label3
      // 
      this.label3.AutoSize = true;
      this.label3.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label3.Location = new System.Drawing.Point(16, 499);
      this.label3.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label3.Name = "label3";
      this.label3.Size = new System.Drawing.Size(263, 24);
      this.label3.TabIndex = 59;
      this.label3.Text = "Number of Units per Unit Type";
      // 
      // label61
      // 
      this.label61.AutoSize = true;
      this.label61.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label61.Location = new System.Drawing.Point(286, 154);
      this.label61.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label61.Name = "label61";
      this.label61.Size = new System.Drawing.Size(25, 16);
      this.label61.TabIndex = 130;
      this.label61.Text = "VA";
      // 
      // NEXT
      // 
      this.NEXT.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.NEXT.Location = new System.Drawing.Point(168, 526);
      this.NEXT.Name = "NEXT";
      this.NEXT.Size = new System.Drawing.Size(103, 28);
      this.NEXT.TabIndex = 6;
      this.NEXT.Text = "Next";
      this.NEXT.UseVisualStyleBackColor = true;
      this.NEXT.Click += new System.EventHandler(this.NEXT_Click);
      // 
      // label2
      // 
      this.label2.AutoSize = true;
      this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif", 15.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label2.Location = new System.Drawing.Point(14, 16);
      this.label2.Margin = new System.Windows.Forms.Padding(0, 0, 0, 12);
      this.label2.Name = "label2";
      this.label2.Size = new System.Drawing.Size(219, 25);
      this.label2.TabIndex = 132;
      this.label2.Text = "General Information";
      // 
      // label4
      // 
      this.label4.AutoSize = true;
      this.label4.Font = new System.Drawing.Font("Microsoft Sans Serif", 15.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label4.Location = new System.Drawing.Point(14, 186);
      this.label4.Margin = new System.Windows.Forms.Padding(0, 0, 0, 12);
      this.label4.Name = "label4";
      this.label4.Size = new System.Drawing.Size(178, 25);
      this.label4.TabIndex = 133;
      this.label4.Text = "Unit Information";
      // 
      // label5
      // 
      this.label5.AutoSize = true;
      this.label5.Font = new System.Drawing.Font("Microsoft Sans Serif", 15.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label5.Location = new System.Drawing.Point(328, 120);
      this.label5.Margin = new System.Windows.Forms.Padding(0, 0, 0, 12);
      this.label5.Name = "label5";
      this.label5.Size = new System.Drawing.Size(142, 25);
      this.label5.TabIndex = 134;
      this.label5.Text = "Calculations";
      // 
      // label63
      // 
      this.label63.AutoSize = true;
      this.label63.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label63.Location = new System.Drawing.Point(183, 590);
      this.label63.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label63.Name = "label63";
      this.label63.Size = new System.Drawing.Size(25, 16);
      this.label63.TabIndex = 177;
      this.label63.Text = "VA";
      // 
      // SUBTOTAL_UNIT_LOADS
      // 
      this.SUBTOTAL_UNIT_LOADS.AutoSize = true;
      this.SUBTOTAL_UNIT_LOADS.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.SUBTOTAL_UNIT_LOADS.Location = new System.Drawing.Point(16, 587);
      this.SUBTOTAL_UNIT_LOADS.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.SUBTOTAL_UNIT_LOADS.Name = "SUBTOTAL_UNIT_LOADS";
      this.SUBTOTAL_UNIT_LOADS.Size = new System.Drawing.Size(19, 20);
      this.SUBTOTAL_UNIT_LOADS.TabIndex = 176;
      this.SUBTOTAL_UNIT_LOADS.Text = "0";
      // 
      // label16
      // 
      this.label16.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label16.Location = new System.Drawing.Point(16, 566);
      this.label16.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label16.Name = "label16";
      this.label16.Size = new System.Drawing.Size(390, 21);
      this.label16.TabIndex = 175;
      this.label16.Text = "Load per Unit Type (Total General + AC + Additional) ";
      // 
      // label6
      // 
      this.label6.AutoSize = true;
      this.label6.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label6.Location = new System.Drawing.Point(496, 184);
      this.label6.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label6.Name = "label6";
      this.label6.Size = new System.Drawing.Size(37, 16);
      this.label6.TabIndex = 180;
      this.label6.Text = "Units";
      // 
      // TOTAL_NUMBER_OF_UNITS
      // 
      this.TOTAL_NUMBER_OF_UNITS.AutoSize = true;
      this.TOTAL_NUMBER_OF_UNITS.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.TOTAL_NUMBER_OF_UNITS.Location = new System.Drawing.Point(329, 181);
      this.TOTAL_NUMBER_OF_UNITS.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.TOTAL_NUMBER_OF_UNITS.Name = "TOTAL_NUMBER_OF_UNITS";
      this.TOTAL_NUMBER_OF_UNITS.Size = new System.Drawing.Size(19, 20);
      this.TOTAL_NUMBER_OF_UNITS.TabIndex = 179;
      this.TOTAL_NUMBER_OF_UNITS.Text = "0";
      // 
      // label8
      // 
      this.label8.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label8.Location = new System.Drawing.Point(329, 160);
      this.label8.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label8.Name = "label8";
      this.label8.Size = new System.Drawing.Size(245, 21);
      this.label8.TabIndex = 178;
      this.label8.Text = "Total Number of Units";
      // 
      // label9
      // 
      this.label9.AutoSize = true;
      this.label9.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label9.Location = new System.Drawing.Point(496, 230);
      this.label9.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label9.Name = "label9";
      this.label9.Size = new System.Drawing.Size(25, 16);
      this.label9.TabIndex = 183;
      this.label9.Text = "VA";
      // 
      // SUBTOTAL_RESIDENTIAL_LOAD
      // 
      this.SUBTOTAL_RESIDENTIAL_LOAD.AutoSize = true;
      this.SUBTOTAL_RESIDENTIAL_LOAD.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.SUBTOTAL_RESIDENTIAL_LOAD.Location = new System.Drawing.Point(329, 227);
      this.SUBTOTAL_RESIDENTIAL_LOAD.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.SUBTOTAL_RESIDENTIAL_LOAD.Name = "SUBTOTAL_RESIDENTIAL_LOAD";
      this.SUBTOTAL_RESIDENTIAL_LOAD.Size = new System.Drawing.Size(19, 20);
      this.SUBTOTAL_RESIDENTIAL_LOAD.TabIndex = 182;
      this.SUBTOTAL_RESIDENTIAL_LOAD.Text = "0";
      // 
      // label11
      // 
      this.label11.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label11.Location = new System.Drawing.Point(329, 206);
      this.label11.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label11.Name = "label11";
      this.label11.Size = new System.Drawing.Size(245, 21);
      this.label11.TabIndex = 181;
      this.label11.Text = "Subtotal Residential Load";
      // 
      // DEMAND_FACTOR
      // 
      this.DEMAND_FACTOR.AutoSize = true;
      this.DEMAND_FACTOR.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.DEMAND_FACTOR.Location = new System.Drawing.Point(329, 271);
      this.DEMAND_FACTOR.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.DEMAND_FACTOR.Name = "DEMAND_FACTOR";
      this.DEMAND_FACTOR.Size = new System.Drawing.Size(19, 20);
      this.DEMAND_FACTOR.TabIndex = 185;
      this.DEMAND_FACTOR.Text = "0";
      // 
      // label14
      // 
      this.label14.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label14.Location = new System.Drawing.Point(329, 250);
      this.label14.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label14.Name = "label14";
      this.label14.Size = new System.Drawing.Size(245, 21);
      this.label14.TabIndex = 184;
      this.label14.Text = "Demand Factor (NEC 220.84)";
      // 
      // label15
      // 
      this.label15.AutoSize = true;
      this.label15.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label15.Location = new System.Drawing.Point(496, 318);
      this.label15.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label15.Name = "label15";
      this.label15.Size = new System.Drawing.Size(33, 16);
      this.label15.TabIndex = 189;
      this.label15.Text = "KVA";
      // 
      // TOTAL_DEMAND_LOAD
      // 
      this.TOTAL_DEMAND_LOAD.AutoSize = true;
      this.TOTAL_DEMAND_LOAD.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.TOTAL_DEMAND_LOAD.Location = new System.Drawing.Point(329, 315);
      this.TOTAL_DEMAND_LOAD.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.TOTAL_DEMAND_LOAD.Name = "TOTAL_DEMAND_LOAD";
      this.TOTAL_DEMAND_LOAD.Size = new System.Drawing.Size(19, 20);
      this.TOTAL_DEMAND_LOAD.TabIndex = 188;
      this.TOTAL_DEMAND_LOAD.Text = "0";
      // 
      // label19
      // 
      this.label19.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label19.Location = new System.Drawing.Point(329, 294);
      this.label19.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label19.Name = "label19";
      this.label19.Size = new System.Drawing.Size(245, 21);
      this.label19.TabIndex = 187;
      this.label19.Text = "Total Residential Demand Load";
      // 
      // label12
      // 
      this.label12.AutoSize = true;
      this.label12.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label12.Location = new System.Drawing.Point(496, 362);
      this.label12.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label12.Name = "label12";
      this.label12.Size = new System.Drawing.Size(25, 16);
      this.label12.TabIndex = 192;
      this.label12.Text = "VA";
      // 
      // HOUSE_LOAD_COPY
      // 
      this.HOUSE_LOAD_COPY.AutoSize = true;
      this.HOUSE_LOAD_COPY.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.HOUSE_LOAD_COPY.Location = new System.Drawing.Point(329, 359);
      this.HOUSE_LOAD_COPY.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.HOUSE_LOAD_COPY.Name = "HOUSE_LOAD_COPY";
      this.HOUSE_LOAD_COPY.Size = new System.Drawing.Size(19, 20);
      this.HOUSE_LOAD_COPY.TabIndex = 191;
      this.HOUSE_LOAD_COPY.Text = "0";
      // 
      // label21
      // 
      this.label21.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label21.Location = new System.Drawing.Point(329, 338);
      this.label21.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label21.Name = "label21";
      this.label21.Size = new System.Drawing.Size(245, 21);
      this.label21.TabIndex = 190;
      this.label21.Text = "House Load";
      // 
      // label22
      // 
      this.label22.AutoSize = true;
      this.label22.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label22.Location = new System.Drawing.Point(496, 406);
      this.label22.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label22.Name = "label22";
      this.label22.Size = new System.Drawing.Size(25, 16);
      this.label22.TabIndex = 195;
      this.label22.Text = "VA";
      // 
      // TOTAL_DEMAND_HOUSE_LOAD
      // 
      this.TOTAL_DEMAND_HOUSE_LOAD.AutoSize = true;
      this.TOTAL_DEMAND_HOUSE_LOAD.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.TOTAL_DEMAND_HOUSE_LOAD.Location = new System.Drawing.Point(329, 403);
      this.TOTAL_DEMAND_HOUSE_LOAD.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.TOTAL_DEMAND_HOUSE_LOAD.Name = "TOTAL_DEMAND_HOUSE_LOAD";
      this.TOTAL_DEMAND_HOUSE_LOAD.Size = new System.Drawing.Size(19, 20);
      this.TOTAL_DEMAND_HOUSE_LOAD.TabIndex = 194;
      this.TOTAL_DEMAND_HOUSE_LOAD.Text = "0";
      // 
      // label24
      // 
      this.label24.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label24.Location = new System.Drawing.Point(329, 382);
      this.label24.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label24.Name = "label24";
      this.label24.Size = new System.Drawing.Size(245, 21);
      this.label24.TabIndex = 193;
      this.label24.Text = "Total Demand + House Load";
      // 
      // label25
      // 
      this.label25.AutoSize = true;
      this.label25.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label25.Location = new System.Drawing.Point(496, 450);
      this.label25.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label25.Name = "label25";
      this.label25.Size = new System.Drawing.Size(16, 16);
      this.label25.TabIndex = 198;
      this.label25.Text = "A";
      // 
      // TOTAL_AMPERAGE
      // 
      this.TOTAL_AMPERAGE.AutoSize = true;
      this.TOTAL_AMPERAGE.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.TOTAL_AMPERAGE.Location = new System.Drawing.Point(329, 447);
      this.TOTAL_AMPERAGE.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.TOTAL_AMPERAGE.Name = "TOTAL_AMPERAGE";
      this.TOTAL_AMPERAGE.Size = new System.Drawing.Size(19, 20);
      this.TOTAL_AMPERAGE.TabIndex = 197;
      this.TOTAL_AMPERAGE.Text = "0";
      // 
      // label27
      // 
      this.label27.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label27.Location = new System.Drawing.Point(329, 426);
      this.label27.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label27.Name = "label27";
      this.label27.Size = new System.Drawing.Size(245, 21);
      this.label27.TabIndex = 196;
      this.label27.Text = "Total Amperage";
      // 
      // label28
      // 
      this.label28.AutoSize = true;
      this.label28.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label28.Location = new System.Drawing.Point(496, 494);
      this.label28.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label28.Name = "label28";
      this.label28.Size = new System.Drawing.Size(16, 16);
      this.label28.TabIndex = 201;
      this.label28.Text = "A";
      // 
      // SERVICE_RATING
      // 
      this.SERVICE_RATING.AutoSize = true;
      this.SERVICE_RATING.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.SERVICE_RATING.Location = new System.Drawing.Point(329, 491);
      this.SERVICE_RATING.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.SERVICE_RATING.Name = "SERVICE_RATING";
      this.SERVICE_RATING.Size = new System.Drawing.Size(19, 20);
      this.SERVICE_RATING.TabIndex = 200;
      this.SERVICE_RATING.Text = "0";
      // 
      // label30
      // 
      this.label30.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label30.Location = new System.Drawing.Point(329, 470);
      this.label30.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label30.Name = "label30";
      this.label30.Size = new System.Drawing.Size(245, 21);
      this.label30.TabIndex = 199;
      this.label30.Text = "Service Size";
      // 
      // VOLTAGE
      // 
      this.VOLTAGE.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
      this.VOLTAGE.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.VOLTAGE.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.VOLTAGE.FormattingEnabled = true;
      this.VOLTAGE.Items.AddRange(new object[] {
            "208V",
            "240V"});
      this.VOLTAGE.Location = new System.Drawing.Point(19, 146);
      this.VOLTAGE.Margin = new System.Windows.Forms.Padding(6, 0, 48, 24);
      this.VOLTAGE.Name = "VOLTAGE";
      this.VOLTAGE.Size = new System.Drawing.Size(72, 28);
      this.VOLTAGE.TabIndex = 1;
      this.VOLTAGE.SelectedIndexChanged += new System.EventHandler(this.VOLTAGE_SelectedIndexChanged);
      // 
      // label7
      // 
      this.label7.AutoSize = true;
      this.label7.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label7.Location = new System.Drawing.Point(17, 119);
      this.label7.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label7.Name = "label7";
      this.label7.Size = new System.Drawing.Size(74, 24);
      this.label7.TabIndex = 203;
      this.label7.Text = "Voltage";
      // 
      // label10
      // 
      this.label10.AutoSize = true;
      this.label10.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label10.Location = new System.Drawing.Point(105, 120);
      this.label10.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label10.Name = "label10";
      this.label10.Size = new System.Drawing.Size(63, 24);
      this.label10.TabIndex = 204;
      this.label10.Text = "Phase";
      // 
      // PHASE_COMBO
      // 
      this.PHASE_COMBO.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
      this.PHASE_COMBO.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.PHASE_COMBO.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.PHASE_COMBO.FormattingEnabled = true;
      this.PHASE_COMBO.Items.AddRange(new object[] {
            "1 PH",
            "3 PH"});
      this.PHASE_COMBO.Location = new System.Drawing.Point(103, 146);
      this.PHASE_COMBO.Margin = new System.Windows.Forms.Padding(6, 0, 48, 24);
      this.PHASE_COMBO.Name = "PHASE_COMBO";
      this.PHASE_COMBO.Size = new System.Drawing.Size(72, 28);
      this.PHASE_COMBO.TabIndex = 2;
      this.PHASE_COMBO.SelectedIndexChanged += new System.EventHandler(this.PHASE_COMBO_SelectedIndexChanged);
      // 
      // panel3
      // 
      this.panel3.BackColor = System.Drawing.SystemColors.Window;
      this.panel3.Controls.Add(this.BUILDING_TITLE);
      this.panel3.Location = new System.Drawing.Point(328, 79);
      this.panel3.Margin = new System.Windows.Forms.Padding(6, 0, 48, 12);
      this.panel3.Name = "panel3";
      this.panel3.Padding = new System.Windows.Forms.Padding(5);
      this.panel3.Size = new System.Drawing.Size(458, 28);
      this.panel3.TabIndex = 4;
      // 
      // BUILDING_TITLE
      // 
      this.BUILDING_TITLE.BorderStyle = System.Windows.Forms.BorderStyle.None;
      this.BUILDING_TITLE.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.BUILDING_TITLE.Location = new System.Drawing.Point(5, 5);
      this.BUILDING_TITLE.Margin = new System.Windows.Forms.Padding(0);
      this.BUILDING_TITLE.Name = "BUILDING_TITLE";
      this.BUILDING_TITLE.Size = new System.Drawing.Size(448, 19);
      this.BUILDING_TITLE.TabIndex = 0;
      this.BUILDING_TITLE.TextChanged += new System.EventHandler(this.BUILDING_TITLE_TextChanged);
      // 
      // label13
      // 
      this.label13.AutoSize = true;
      this.label13.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label13.Location = new System.Drawing.Point(326, 52);
      this.label13.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label13.Name = "label13";
      this.label13.Size = new System.Drawing.Size(45, 24);
      this.label13.TabIndex = 5;
      this.label13.Text = "Title";
      // 
      // LoadCalculationForm
      // 
      this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.None;
      this.Controls.Add(this.panel3);
      this.Controls.Add(this.PHASE_COMBO);
      this.Controls.Add(this.label13);
      this.Controls.Add(this.label10);
      this.Controls.Add(this.VOLTAGE);
      this.Controls.Add(this.label7);
      this.Controls.Add(this.label28);
      this.Controls.Add(this.SERVICE_RATING);
      this.Controls.Add(this.label30);
      this.Controls.Add(this.label25);
      this.Controls.Add(this.TOTAL_AMPERAGE);
      this.Controls.Add(this.label27);
      this.Controls.Add(this.label22);
      this.Controls.Add(this.TOTAL_DEMAND_HOUSE_LOAD);
      this.Controls.Add(this.label24);
      this.Controls.Add(this.label12);
      this.Controls.Add(this.HOUSE_LOAD_COPY);
      this.Controls.Add(this.label21);
      this.Controls.Add(this.label15);
      this.Controls.Add(this.TOTAL_DEMAND_LOAD);
      this.Controls.Add(this.label19);
      this.Controls.Add(this.DEMAND_FACTOR);
      this.Controls.Add(this.label14);
      this.Controls.Add(this.label9);
      this.Controls.Add(this.SUBTOTAL_RESIDENTIAL_LOAD);
      this.Controls.Add(this.label11);
      this.Controls.Add(this.label6);
      this.Controls.Add(this.TOTAL_NUMBER_OF_UNITS);
      this.Controls.Add(this.label8);
      this.Controls.Add(this.label63);
      this.Controls.Add(this.SUBTOTAL_UNIT_LOADS);
      this.Controls.Add(this.label16);
      this.Controls.Add(this.label5);
      this.Controls.Add(this.label4);
      this.Controls.Add(this.label2);
      this.Controls.Add(this.NEXT);
      this.Controls.Add(this.label61);
      this.Controls.Add(this.NUMBER_OF_UNITS_BG);
      this.Controls.Add(this.label3);
      this.Controls.Add(this.UNIT_TYPES);
      this.Controls.Add(this.label17);
      this.Controls.Add(this.panel2);
      this.Controls.Add(this.label1);
      this.Controls.Add(this.panel1);
      this.Controls.Add(this.labelname);
      this.Name = "LoadCalculationForm";
      this.Size = new System.Drawing.Size(1545, 627);
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      this.panel2.ResumeLayout(false);
      this.panel2.PerformLayout();
      this.NUMBER_OF_UNITS_BG.ResumeLayout(false);
      this.NUMBER_OF_UNITS_BG.PerformLayout();
      this.panel3.ResumeLayout(false);
      this.panel3.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();

    }

    #endregion

    private System.Windows.Forms.Panel panel1;
    private System.Windows.Forms.TextBox BUILDING_NAME;
    private System.Windows.Forms.Label labelname;
    private System.Windows.Forms.Panel panel2;
    private System.Windows.Forms.TextBox HOUSE_LOAD;
    private System.Windows.Forms.Label label1;
    private System.Windows.Forms.ListBox UNIT_TYPES;
    private System.Windows.Forms.Label label17;
    private System.Windows.Forms.Panel NUMBER_OF_UNITS_BG;
    private System.Windows.Forms.TextBox NUMBER_OF_UNITS;
    private System.Windows.Forms.Label label3;
    private System.Windows.Forms.Label label61;
    private System.Windows.Forms.Button NEXT;
    private System.Windows.Forms.Label label2;
    private System.Windows.Forms.Label label4;
    private System.Windows.Forms.Label label5;
    private System.Windows.Forms.Label label63;
    private System.Windows.Forms.Label SUBTOTAL_UNIT_LOADS;
    private System.Windows.Forms.Label label16;
    private System.Windows.Forms.Label label6;
    private System.Windows.Forms.Label TOTAL_NUMBER_OF_UNITS;
    private System.Windows.Forms.Label label8;
    private System.Windows.Forms.Label label9;
    private System.Windows.Forms.Label SUBTOTAL_RESIDENTIAL_LOAD;
    private System.Windows.Forms.Label label11;
    private System.Windows.Forms.Label DEMAND_FACTOR;
    private System.Windows.Forms.Label label14;
    private System.Windows.Forms.Label label15;
    private System.Windows.Forms.Label TOTAL_DEMAND_LOAD;
    private System.Windows.Forms.Label label19;
    private System.Windows.Forms.Label label12;
    private System.Windows.Forms.Label HOUSE_LOAD_COPY;
    private System.Windows.Forms.Label label21;
    private System.Windows.Forms.Label label22;
    private System.Windows.Forms.Label TOTAL_DEMAND_HOUSE_LOAD;
    private System.Windows.Forms.Label label24;
    private System.Windows.Forms.Label label25;
    private System.Windows.Forms.Label TOTAL_AMPERAGE;
    private System.Windows.Forms.Label label27;
    private System.Windows.Forms.Label label28;
    private System.Windows.Forms.Label SERVICE_RATING;
    private System.Windows.Forms.Label label30;
    private System.Windows.Forms.ComboBox VOLTAGE;
    private System.Windows.Forms.Label label7;
    private System.Windows.Forms.Label label10;
    private System.Windows.Forms.ComboBox PHASE_COMBO;
    private System.Windows.Forms.Panel panel3;
    private System.Windows.Forms.TextBox BUILDING_TITLE;
    private System.Windows.Forms.Label label13;
  }
}
 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\LoadCalculations\Building\BlockData\RowEntry.json 
{
  "Polylines": [
    {
      "Vectors": [
        {
          "X": 0.0,
          "Y": 0.0,
          "Z": 0.0
        },
        {
          "X": 1.5,
          "Y": 0.0,
          "Z": 0.0
        },
        {
          "X": 1.5,
          "Y": -0.24999999999999822,
          "Z": 0.0
        },
        {
          "X": 0.0,
          "Y": -0.24999999999999822,
          "Z": 0.0
        }
      ],
      "LineType": "ByLayer",
      "Closed": true,
      "Layer": "E-TEXT"
    }
  ],
  "Lines": [],
  "Arcs": [],
  "Circles": [],
  "Ellipses": [],
  "MTexts": [],
  "Texts": [
    {
      "Style": "Load Calcs",
      "Justification": 5,
      "Contents": "A",
      "Location": {
        "X": 0.68011596180081924,
        "Y": -0.19999999999999929,
        "Z": 0.0
      },
      "LineSpaceDistance": 1.0,
      "Height": 0.15,
      "Rotation": 0.0,
      "AlignmentPoint": {
        "X": 0.75,
        "Y": -0.125,
        "Z": 0.0
      },
      "HorizontalMode": 1,
      "IsMirroredInX": false,
      "IsMirroredInY": false,
      "Layer": "E-TEXT"
    }
  ],
  "Solids": [],
  "NumberOfRows": 0
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\LoadCalculations\Building\BlockData\RowHeader.json 
{
  "Polylines": [
    {
      "Vectors": [
        {
          "X": 0.0,
          "Y": 0.0,
          "Z": 0.0
        },
        {
          "X": 6.7033907256843577,
          "Y": 0.0,
          "Z": 0.0
        },
        {
          "X": 6.7033907256843577,
          "Y": -0.25000000000000178,
          "Z": 0.0
        },
        {
          "X": 0.0,
          "Y": -0.25000000000000178,
          "Z": 0.0
        }
      ],
      "LineType": "ByLayer",
      "Closed": true,
      "Layer": "E-TEXT"
    }
  ],
  "Lines": [],
  "Arcs": [],
  "Circles": [],
  "Ellipses": [],
  "MTexts": [],
  "Texts": [
    {
      "Style": "Load Calcs",
      "Justification": 10,
      "Contents": "Unit:",
      "Location": {
        "X": 0.20000000000000284,
        "Y": -0.19397062333007575,
        "Z": 0.0
      },
      "LineSpaceDistance": 1.0,
      "Height": 0.15,
      "Rotation": 0.0,
      "AlignmentPoint": {
        "X": 31.709260330471409,
        "Y": -15.962236720615405,
        "Z": 0.0
      },
      "HorizontalMode": 0,
      "IsMirroredInX": false,
      "IsMirroredInY": false,
      "Layer": "E-TEXT"
    }
  ],
  "Solids": [],
  "NumberOfRows": 0
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\LoadCalculations\Building\BlockData\Spacer.json 
{
  "Polylines": [
    {
      "Vectors": [
        {
          "X": 0.0,
          "Y": 0.0,
          "Z": 0.0
        },
        {
          "X": 8.2033907256843577,
          "Y": 0.0,
          "Z": 0.0
        },
        {
          "X": 8.2033907256843577,
          "Y": -0.24999999999999822,
          "Z": 0.0
        },
        {
          "X": 0.0,
          "Y": -0.24999999999999822,
          "Z": 0.0
        }
      ],
      "LineType": "ByLayer",
      "Closed": true,
      "Layer": "E-TEXT"
    }
  ],
  "Lines": [],
  "Arcs": [],
  "Circles": [],
  "Ellipses": [],
  "MTexts": [],
  "Texts": [],
  "Solids": [],
  "NumberOfRows": 0
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\LoadCalculations\Building\BlockData\Subtitle.json 
{
  "Polylines": [
    {
      "Vectors": [
        {
          "X": 8.2033907256843577,
          "Y": 0.0,
          "Z": 0.0
        },
        {
          "X": 0.0,
          "Y": 0.0,
          "Z": 0.0
        },
        {
          "X": 0.0,
          "Y": -0.5,
          "Z": 0.0
        },
        {
          "X": 8.2033907256843577,
          "Y": -0.5,
          "Z": 0.0
        }
      ],
      "LineType": "ByLayer",
      "Closed": true,
      "Layer": "E-TEXT"
    }
  ],
  "Lines": [],
  "Arcs": [],
  "Circles": [],
  "Ellipses": [],
  "MTexts": [
    {
      "Style": "Standard",
      "Justification": "MiddleLeft",
      "Contents": "{\\Farial|c0;\\LDwelling Information:}",
      "Direction": {
        "LargestElement": 0,
        "LengthSqrd": 1.0,
        "Length": 1.0,
        "Z": 0.0,
        "Y": 0.0,
        "X": 1.0
      },
      "Location": {
        "X": 0.19996033047138795,
        "Y": -0.25003672061541238,
        "Z": 0.0
      },
      "LineSpaceDistance": 0.25,
      "LineSpaceFactor": 1.0,
      "LineSpacingStyle": 1,
      "TextHeight": 0.15,
      "Width": 0.0,
      "Rotation": 0.0,
      "Layer": "E-TEXT"
    }
  ],
  "Texts": [],
  "Solids": [],
  "NumberOfRows": 0
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\LoadCalculations\Building\BlockData\Title.json 
{
  "Polylines": [
    {
      "Vectors": [
        {
          "X": 8.2033907256843577,
          "Y": 0.0,
          "Z": 0.0
        },
        {
          "X": 0.0,
          "Y": 0.0,
          "Z": 0.0
        },
        {
          "X": 0.0,
          "Y": -0.75000000000000355,
          "Z": 0.0
        },
        {
          "X": 8.2033907256843577,
          "Y": -0.75000000000000355,
          "Z": 0.0
        }
      ],
      "LineType": "ByLayer",
      "Closed": true,
      "Layer": "E-TEXT"
    }
  ],
  "Lines": [],
  "Arcs": [],
  "Circles": [],
  "Ellipses": [],
  "MTexts": [
    {
      "Style": "Standard",
      "Justification": "MiddleCenter",
      "Contents": "{\\Farial|c0;SERVICE LOAD CALCULATION}",
      "Direction": {
        "LargestElement": 0,
        "LengthSqrd": 1.0,
        "Length": 1.0,
        "Z": 0.0,
        "Y": 0.0,
        "X": 1.0
      },
      "Location": {
        "X": 4.1016953628421788,
        "Y": -0.375,
        "Z": 0.0
      },
      "LineSpaceDistance": 0.33333333333333331,
      "LineSpaceFactor": 1.0,
      "LineSpacingStyle": 1,
      "TextHeight": 0.2,
      "Width": 0.0,
      "Rotation": 0.0,
      "Layer": "E-TEXT"
    }
  ],
  "Texts": [],
  "Solids": [],
  "NumberOfRows": 0
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\LoadCalculations\Unit\CombinedUnitInformation.cs 
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GMEPElectricalResidential.LoadCalculations.Unit
{
  public class CombinedUnitInformation
  {
    public static UnitInformation CreateCombinedCopyOfUnitInfo(UnitInformation unitInfo1, UnitInformation unitInfo2)
    {
      UnitInformation combinedUnitInfo = new UnitInformation(unitInfo1.ID);

      combinedUnitInfo.Name = $"{unitInfo1.Name} & {unitInfo2.Name}";
      combinedUnitInfo.Voltage = unitInfo1.Voltage;
      combinedUnitInfo.Demand40Percent = unitInfo1.Demand40Percent;
      combinedUnitInfo.DwellingArea = CreateCombinedDwellingArea(unitInfo1.DwellingArea, unitInfo2.DwellingArea);
      combinedUnitInfo.GeneralLoads = CreateCombinedGeneralLoads(unitInfo1.GeneralLoads, unitInfo2.GeneralLoads);
      combinedUnitInfo.CustomLoads = CreateCombinedCustomLoads(unitInfo1.CustomLoads, unitInfo2.CustomLoads);
      combinedUnitInfo.ACLoads = CreateCombinedACLoads(unitInfo1.ACLoads, unitInfo2.ACLoads);
      combinedUnitInfo.Totals = CreateCombinedTotals(unitInfo1.Totals, unitInfo2.Totals);

      return combinedUnitInfo;
    }

    public static UnitGeneralLoadContainer CreateCombinedGeneralLoads(UnitGeneralLoadContainer generalLoads1, UnitGeneralLoadContainer generalLoads2)
    {
      UnitGeneralLoadContainer combinedGeneralLoads = new UnitGeneralLoadContainer();

      combinedGeneralLoads.Lighting = new UnitLoad(generalLoads1.Lighting.Name, (generalLoads1.Lighting.Total + generalLoads2.Lighting.Total).ToString(), "1");

      combinedGeneralLoads.Customs = CreateCombinedCustomLoads(generalLoads1.Customs, generalLoads2.Customs);

      combinedGeneralLoads.LightingOccupancyType = generalLoads1.LightingOccupancyType;

      return combinedGeneralLoads;
    }

    public static List<UnitLoad> CreateCombinedCustomLoads(List<UnitLoad> customLoads1, List<UnitLoad> customLoads2)
    {
      Dictionary<string, UnitLoad> combinedCustomLoads = new Dictionary<string, UnitLoad>();

      foreach (UnitLoad customLoad in customLoads1)
      {
        combinedCustomLoads[customLoad.Name] = new UnitLoad(customLoad.Name, customLoad.Total.ToString(), customLoad.Multiplier.ToString(), customLoad.IsCookingAppliance);
      }

      foreach (UnitLoad customLoad in customLoads2)
      {
        if (combinedCustomLoads.ContainsKey(customLoad.Name))
        {
          UnitLoad existingLoad = combinedCustomLoads[customLoad.Name];
          existingLoad.Total += customLoad.Total;
          existingLoad.Multiplier += customLoad.Multiplier;
          existingLoad.IsCookingAppliance = existingLoad.IsCookingAppliance || customLoad.IsCookingAppliance;
        }
        else
        {
          combinedCustomLoads[customLoad.Name] = new UnitLoad(customLoad.Name, customLoad.Total.ToString(), customLoad.Multiplier.ToString(), customLoad.IsCookingAppliance);
        }
      }

      return combinedCustomLoads.Values.ToList();
    }

    public static UnitDwellingArea CreateCombinedDwellingArea(UnitDwellingArea dwellingArea1, UnitDwellingArea dwellingArea2)
    {
      UnitDwellingArea combinedDwellingArea = new UnitDwellingArea();

      combinedDwellingArea.FloorArea = (int.Parse(dwellingArea1.FloorArea) + int.Parse(dwellingArea2.FloorArea)).ToString();
      combinedDwellingArea.Heater = dwellingArea1.Heater;
      combinedDwellingArea.Dryer = dwellingArea1.Dryer;
      combinedDwellingArea.Oven = dwellingArea1.Oven;
      combinedDwellingArea.Cooktop = dwellingArea1.Cooktop;

      return combinedDwellingArea;
    }

    public static UnitACLoadContainer CreateCombinedACLoads(UnitACLoadContainer acLoads1, UnitACLoadContainer acLoads2)
    {
      UnitACLoadContainer combinedACLoads = new UnitACLoadContainer();

      combinedACLoads.Condenser = acLoads1.Condenser + acLoads2.Condenser;
      combinedACLoads.FanCoil = acLoads1.FanCoil + acLoads2.FanCoil;

      HeatingUnit combinedHeatingUnit = new HeatingUnit();
      combinedHeatingUnit.Heating = acLoads1.HeatingUnit.Heating + acLoads2.HeatingUnit.Heating;
      combinedHeatingUnit.NumberOfUnits = acLoads1.HeatingUnit.NumberOfUnits + acLoads2.HeatingUnit.NumberOfUnits;
      combinedACLoads.HeatingUnit = combinedHeatingUnit;

      combinedACLoads.ElectricalCode = acLoads1.ElectricalCode;

      return combinedACLoads;
    }

    public static UnitTotalContainer CreateCombinedTotals(UnitTotalContainer totals1, UnitTotalContainer totals2)
    {
      UnitTotalContainer combinedTotals = new UnitTotalContainer();

      combinedTotals.TotalGeneralLoad = totals1.TotalGeneralLoad + totals2.TotalGeneralLoad;
      combinedTotals.TotalACLoad = totals1.TotalACLoad + totals2.TotalACLoad;
      combinedTotals.SubtotalGeneralLoad = totals1.SubtotalGeneralLoad + totals2.SubtotalGeneralLoad;
      combinedTotals.CustomLoad = totals1.CustomLoad + totals2.CustomLoad;
      combinedTotals.ServiceLoad = totals1.ServiceLoad + totals2.ServiceLoad;

      return combinedTotals;
    }
  }
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\LoadCalculations\Unit\LoadCalculation.cs 
﻿using Autodesk.AutoCAD.ApplicationServices;
using Autodesk.AutoCAD.DatabaseServices;
using Autodesk.AutoCAD.Geometry;
using GMEPElectricalResidential.HelperFiles;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace GMEPElectricalResidential.LoadCalculations.Unit
{
  public class LoadCalculation
  {
    public static void CreateUnitLoadCalculationTable(UnitInformation unitInfo, Point3d placementPoint, bool placeTheBlocks = true)
    {
      double HEADER_HEIGHT = 0.75;
      double currentHeight = HEADER_HEIGHT;
      string newBlockName = $"UNIT {unitInfo.ID}";

      if (unitInfo == null)
      {
        return;
      }

      if (unitInfo.Name == null)
      {
        unitInfo.Name = "";
      }

      var acCurDb = Application.DocumentManager.MdiActiveDocument.Database;

      using (Transaction acTrans = acCurDb.TransactionManager.StartTransaction())
      {
        Point3d point = new Point3d(0, 0, 0);

        BlockTable acBlkTbl;
        acBlkTbl = acTrans.GetObject(acCurDb.BlockTableId, OpenMode.ForRead) as BlockTable;

        BlockTableRecord acBlkTblRec;

        var existingBlock = acBlkTbl.Cast<ObjectId>()
            .Select(id => acTrans.GetObject(id, OpenMode.ForRead) as BlockTableRecord)
            .FirstOrDefault(btr => btr.Name == newBlockName);

        if (existingBlock != null)
        {
          if (existingBlock.Name != newBlockName)
          {
            existingBlock.UpgradeOpen();
            existingBlock.Name = newBlockName;
            existingBlock.DowngradeOpen();
          }
          acBlkTblRec = existingBlock;
          existingBlock.UpgradeOpen();
          WipeExistingBlockContent(acBlkTblRec);
          existingBlock.DowngradeOpen();
        }
        else
        {
          acBlkTbl.UpgradeOpen();
          acBlkTblRec = new BlockTableRecord();
          acBlkTblRec.Name = newBlockName;
          acBlkTbl.Add(acBlkTblRec);
          acTrans.AddNewlyCreatedDBObject(acBlkTblRec, true);
          acBlkTbl.DowngradeOpen();
        }

        ObjectData headerData = GetCopyPasteData("UnitLoadCalculationHeader");
        ObjectData bodyData = GetCopyPasteData("UnitLoadCalculationBody");

        headerData = UpdateHeaderData(headerData, unitInfo);

        ObjectData dwellingBodyData = ShiftData(bodyData, -currentHeight);
        dwellingBodyData = UpdateDwellingData(dwellingBodyData, unitInfo);
        double dwellingSectionHeight = CreateUnitLoadCalculationRectangle(point, -currentHeight, dwellingBodyData.NumberOfRows, acBlkTblRec);

        currentHeight += dwellingSectionHeight;

        ObjectData generalBodyData = ShiftData(bodyData, -currentHeight);
        generalBodyData = UpdateGeneralData(generalBodyData, unitInfo);
        double generalSectionHeight = CreateUnitLoadCalculationRectangle(point, -currentHeight, generalBodyData.NumberOfRows, acBlkTblRec);

        currentHeight += generalSectionHeight;

        ObjectData generalBodyCalcData = ShiftData(bodyData, -currentHeight);
        generalBodyCalcData = UpdateGeneralCalculationData(generalBodyCalcData, unitInfo);
        double generalCalcSectionHeight = CreateUnitLoadCalculationRectangle(point, -currentHeight, generalBodyCalcData.NumberOfRows, acBlkTblRec);

        currentHeight += generalCalcSectionHeight;

        ObjectData airConditioningBodyData = ShiftData(bodyData, -currentHeight);
        airConditioningBodyData = UpdateAirConditioningData(airConditioningBodyData, unitInfo);
        double airConditioningSectionHeight = CreateUnitLoadCalculationRectangle(point, -currentHeight, airConditioningBodyData.NumberOfRows, acBlkTblRec);

        currentHeight += airConditioningSectionHeight;

        ObjectData customBodyData = ShiftData(bodyData, -currentHeight);
        customBodyData = UpdateCustomData(customBodyData, unitInfo);
        double customSectionHeight = CreateUnitLoadCalculationRectangle(point, -currentHeight, customBodyData.NumberOfRows, acBlkTblRec);

        currentHeight += customSectionHeight;

        ObjectData serviceBodyData = ShiftData(bodyData, -currentHeight);
        serviceBodyData = UpdateServiceData(serviceBodyData, unitInfo);
        double _ = CreateUnitLoadCalculationRectangle(point, -currentHeight, serviceBodyData.NumberOfRows, acBlkTblRec);

        string modifiedHeaderData = JsonConvert.SerializeObject(headerData);
        string modifiedDwellingBodyData = JsonConvert.SerializeObject(dwellingBodyData);
        string modifiedGeneralBodyData = JsonConvert.SerializeObject(generalBodyData);
        string modifiedGeneralBodyCalcData = JsonConvert.SerializeObject(generalBodyCalcData);
        string modifiedAirConditioningBodyData = JsonConvert.SerializeObject(airConditioningBodyData);
        string modifiedCustomBodyData = JsonConvert.SerializeObject(customBodyData);
        string modifiedServiceBodyData = JsonConvert.SerializeObject(serviceBodyData);

        CADObjectCommands.CreateObjectFromData(modifiedHeaderData, point, acBlkTblRec);
        CADObjectCommands.CreateObjectFromData(modifiedDwellingBodyData, point, acBlkTblRec);
        CADObjectCommands.CreateObjectFromData(modifiedGeneralBodyData, point, acBlkTblRec);
        CADObjectCommands.CreateObjectFromData(modifiedGeneralBodyCalcData, point, acBlkTblRec);
        CADObjectCommands.CreateObjectFromData(modifiedAirConditioningBodyData, point, acBlkTblRec);
        CADObjectCommands.CreateObjectFromData(modifiedCustomBodyData, point, acBlkTblRec);
        CADObjectCommands.CreateObjectFromData(modifiedServiceBodyData, point, acBlkTblRec);

        UpdateAllBlockReferences(newBlockName);

        acTrans.Commit();
      }

      if (placeTheBlocks)
      {
        using (Transaction acTrans = acCurDb.TransactionManager.StartTransaction())
        {
          BlockTable acBlkTbl;
          acBlkTbl = acTrans.GetObject(acCurDb.BlockTableId, OpenMode.ForRead) as BlockTable;
          BlockTableRecord acBlkTblRec;

          if (acCurDb.TileMode)
          {
            acBlkTblRec = acTrans.GetObject(acBlkTbl[BlockTableRecord.ModelSpace], OpenMode.ForWrite) as BlockTableRecord;
          }
          else
          {
            acBlkTblRec = acTrans.GetObject(acBlkTbl[BlockTableRecord.PaperSpace], OpenMode.ForWrite) as BlockTableRecord;
          }

          if (acBlkTbl.Has(newBlockName))
          {
            BlockReference acBlkRef = new BlockReference(placementPoint, acBlkTbl[newBlockName]);

            acBlkTblRec.AppendEntity(acBlkRef);

            acTrans.AddNewlyCreatedDBObject(acBlkRef, true);
          }

          acTrans.Commit();
        }
      }
    }

    private static void UpdateAllBlockReferences(string blockName)
    {
      var acCurDb = Application.DocumentManager.MdiActiveDocument.Database;

      using (Transaction acTrans = acCurDb.TransactionManager.StartTransaction())
      {
        BlockTable acBlkTbl = acTrans.GetObject(acCurDb.BlockTableId, OpenMode.ForRead) as BlockTable;

        if (!acBlkTbl.Has(blockName))
          return;

        ObjectId blockId = acBlkTbl[blockName];

        foreach (ObjectId btrId in acBlkTbl)
        {
          BlockTableRecord btr = (BlockTableRecord)acTrans.GetObject(btrId, OpenMode.ForRead);
          foreach (ObjectId entId in btr)
          {
            Entity ent = acTrans.GetObject(entId, OpenMode.ForRead) as Entity;
            if (ent is BlockReference br && br.BlockTableRecord == blockId)
            {
              br.UpgradeOpen();
              br.RecordGraphicsModified(true);
            }
          }
        }

        acTrans.Commit();
      }
    }

    private static void WipeExistingBlockContent(BlockTableRecord acBlkTblRec)
    {
      foreach (ObjectId id in acBlkTblRec)
      {
        DBObject obj = id.GetObject(OpenMode.ForWrite);
        obj.Erase();
      }
    }

    private static ObjectData UpdateHeaderData(ObjectData headerData, UnitInformation unitInfo)
    {
      var serviceLoadCalculationMText = headerData.MTexts.FirstOrDefault(mText => mText.Contents.Contains("SERVICE LOAD CALCULATION"));
      serviceLoadCalculationMText.Contents = serviceLoadCalculationMText.Contents.Replace("SERVICE LOAD CALCULATION", $"SERVICE LOAD CALCULATION - UNIT {unitInfo.Name}");
      serviceLoadCalculationMText.Contents = serviceLoadCalculationMText.Contents.Replace("\\Farial|c0", "\\fArial Rounded MT Bold|b1|i0|c0|p34");
      return headerData;
    }

    private static ObjectData UpdateDwellingData(ObjectData dwellingBodyData, UnitInformation unitInfo)
    {
      var headers = dwellingBodyData.MTexts.FirstOrDefault(mText => mText.Contents.Contains("Title"));

      if (headers != null)
      {
        headers.Contents = "";
        string dwellingTitle = "Dwelling Information:".Underline().BoldItalic().NewLine();
        string dwellingSubtitles = "Floor Area:".NewLine() +
                                   "Heater:".NewLine() +
                                   "Dryer:".NewLine() +
                                   "Oven:".NewLine() +
                                   "Cooktop:";
        string dwellingTitleAndSubtitles = dwellingTitle + dwellingSubtitles;
        headers.Contents = dwellingTitleAndSubtitles.SetFont("Arial");
      }

      var values = dwellingBodyData.MTexts.FirstOrDefault(mText => mText.Contents.Contains("Subtitle VA"));
      if (values != null)
      {
        int area1 = int.Parse(unitInfo.DwellingArea.FloorArea);
        string heater = unitInfo.DwellingArea.Heater.ToString();
        string dryer = unitInfo.DwellingArea.Dryer.ToString();
        string oven = unitInfo.DwellingArea.Oven.ToString();
        string cooktop = unitInfo.DwellingArea.Cooktop.ToString();

        values.Contents = "";
        string dwellingValues = "".NewLine() +
                                $"{area1}ft\u00B2".NewLine() +
                                $"{heater}".NewLine() +
                                $"{dryer}".NewLine() +
                                $"{oven}".NewLine() +
                                $"{cooktop}";
        values.Contents = dwellingValues.SetFont("Arial");
      }

      dwellingBodyData.NumberOfRows = 6;

      return dwellingBodyData;
    }

    private static ObjectData UpdateServiceData(ObjectData serviceBodyData, UnitInformation unitInfo)
    {
      int startingRows = 4;
      int totalServiceRating = unitInfo.Totals.ServiceLoad;
      var combinedUnitTotals = new UnitTotalContainer();
      combinedUnitTotals.ServiceLoad = totalServiceRating;
      var headers = serviceBodyData.MTexts.FirstOrDefault(mText => mText.Contents.Contains("Title"));
      if (headers != null)
      {
        headers.Contents = "";
        string serviceSubtitles = "Calculated Load for Service:".Underline().BoldItalic().NewLine();

        int totalSubtotalGeneralLoad = unitInfo.Totals.SubtotalGeneralLoad;
        int totalTotalACLoad = unitInfo.Totals.TotalACLoad;
        int totalCustomLoad = unitInfo.Totals.CustomLoad;

        serviceSubtitles += $"({totalSubtotalGeneralLoad}VA+{totalTotalACLoad}VA+{totalCustomLoad}VA)/{unitInfo.Voltage}={totalServiceRating}A (Service Rating)".NewLine().NewLine();

        serviceSubtitles += "Provided Service Rating:";

        headers.Contents = serviceSubtitles.SetFont("Arial");
      }

      var values = serviceBodyData.MTexts.FirstOrDefault(mText => mText.Contents.Contains("Subtitle VA"));
      if (values != null)
      {
        values.Contents = "";
        string serviceValues = "".NewLine().NewLine().NewLine();

        serviceValues += $"{combinedUnitTotals.ServiceRating()}A";

        values.Contents = serviceValues.SetFont("Arial");
      }

      serviceBodyData.NumberOfRows = startingRows;

      return serviceBodyData;
    }

    private static ObjectData UpdateCustomData(ObjectData customBodyData, UnitInformation unitInfo)
    {
      ObjectData customBodyDataCopy = Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectData>(Newtonsoft.Json.JsonConvert.SerializeObject(customBodyData));

      int startingRows = 0;
      var headers = customBodyDataCopy.MTexts.FirstOrDefault(mText => mText.Contents.Contains("Title"));
      if (headers != null)
      {
        headers.Contents = "";
        string customSubtitles = "";

        var combinedCustomLoads = new Dictionary<string, UnitLoad>();
        foreach (var customLoad in unitInfo.CustomLoads)
        {
          combinedCustomLoads[customLoad.Name] = new UnitLoad(customLoad.Name, customLoad.Total.ToString(), customLoad.Multiplier.ToString(), customLoad.IsCookingAppliance);
        }

        if (combinedCustomLoads.Count > 0)
        {
          customSubtitles = "Additional Load:".Underline().BoldItalic().NewLine();
          startingRows++;
        }

        foreach (var customLoad in combinedCustomLoads.Values)
        {
          customSubtitles += $"{customLoad.Name}{((customLoad.Multiplier <= 1) ? ":" : $" ({customLoad.Multiplier}):")}".NewLine();
          startingRows++;
        }

        headers.Contents = customSubtitles.SetFont("Arial");

        var values = customBodyDataCopy.MTexts.FirstOrDefault(mText => mText.Contents.Contains("Subtitle VA"));
        if (values != null)
        {
          values.Contents = "";
          string customValues = "";

          if (combinedCustomLoads.Count > 0)
          {
            customValues = "".NewLine();
          }

          foreach (var customLoad in combinedCustomLoads.Values)
          {
            customValues += $"{customLoad.GetTotal()}VA".NewLine();
          }

          values.Contents = customValues.SetFont("Arial");
        }
      }

      customBodyDataCopy.NumberOfRows = startingRows;

      return customBodyDataCopy;
    }

    private static ObjectData UpdateAirConditioningData(ObjectData airConditioningBodyData, UnitInformation unitInfo)
    {
      int startingRows = 2;
      var headers = airConditioningBodyData.MTexts.FirstOrDefault(mText => mText.Contents.Contains("Title"));
      if (headers != null)
      {
        headers.Contents = "";
        string dwellingSubtitles = "AC Load:".Underline().BoldItalic().NewLine();
        if (unitInfo.ACLoads.Condenser > 0)
        {
          dwellingSubtitles += "Outdoor Condensing Unit:".NewLine();
          startingRows++;
        }
        if (unitInfo.ACLoads.FanCoil > 0)
        {
          dwellingSubtitles += "Indoor Fan Coil Unit:".NewLine();
          startingRows++;
        }
        if (unitInfo.ACLoads.HeatingUnit.Heating > 0)
        {
          dwellingSubtitles += "Heating Unit" + $" {(unitInfo.ACLoads.HeatingUnit.NumberOfUnits > 1 ? $"({unitInfo.ACLoads.HeatingUnit.NumberOfUnits}):" : ":")}".NewLine();
          startingRows++;
        }

        dwellingSubtitles += $"Total AC Load (CEC {unitInfo.ACLoads.ElectricalCode}):".NewLine();

        headers.Contents = dwellingSubtitles.SetFont("Arial");
      }

      var values = airConditioningBodyData.MTexts.FirstOrDefault(mText => mText.Contents.Contains("Subtitle VA"));
      if (values != null)
      {
        values.Contents = "";
        string dwellingValues = "".NewLine();
        if (unitInfo.ACLoads.Condenser > 0)
        {
          dwellingValues += $"{unitInfo.ACLoads.Condenser}VA".NewLine();
        }
        if (unitInfo.ACLoads.FanCoil > 0)
        {
          dwellingValues += $"{unitInfo.ACLoads.FanCoil}VA".NewLine();
        }
        if (unitInfo.ACLoads.HeatingUnit.Heating > 0)
        {
          dwellingValues += $"{unitInfo.ACLoads.HeatingUnit.Heating}VA".NewLine();
        }

        dwellingValues += $"{unitInfo.Totals.TotalACLoad}VA".NewLine();

        values.Contents = dwellingValues.SetFont("Arial");
      }

      airConditioningBodyData.NumberOfRows = startingRows;

      return airConditioningBodyData;
    }

    private static ObjectData UpdateGeneralCalculationData(ObjectData generalBodyCalcData, UnitInformation unitInfo)
    {
      var headers = generalBodyCalcData.MTexts.FirstOrDefault(mText => mText.Contents.Contains("Title"));
      var isUsing40Percent = unitInfo.Demand40Percent;
      if (headers != null)
      {
        headers.Contents = "";
        string dwellingSubtitles = "Total General Load:".NewLine();
        if (isUsing40Percent)
        {
          dwellingSubtitles += "First 10 KVA @ 100% (CEC  220.82(B)):".NewLine() +
                               $"Remainder @ 40% ({unitInfo.Totals.AmountOver10KVA()}VA x 0.4) (CEC 220.82(B)):".NewLine() +
                               "General Calculated Load (CEC  220.82(B)):".NewLine();
        }
        headers.Contents = dwellingSubtitles.SetFont("Arial");
      }

      var values = generalBodyCalcData.MTexts.FirstOrDefault(mText => mText.Contents.Contains("Subtitle VA"));
      if (values != null)
      {
        var unitTotal = new UnitTotalContainer();
        unitTotal.TotalGeneralLoad = unitInfo.Totals.TotalGeneralLoad;
        unitTotal.SubtotalGeneralLoad = unitInfo.Totals.SubtotalGeneralLoad;
        values.Contents = "";
        string dwellingValues = $"{unitTotal.TotalGeneralLoad}VA".NewLine();
        if (isUsing40Percent)
        {
          dwellingValues += $"{unitTotal.First10KVA()}VA".NewLine() +
                            $"{unitTotal.RemainderAt40Percent()}VA".NewLine() +
                            $"{unitTotal.SubtotalGeneralLoad}VA".NewLine();
        }
        values.Contents = dwellingValues.SetFont("Arial");
      }

      generalBodyCalcData.NumberOfRows = isUsing40Percent ? 4 : 1;
      return generalBodyCalcData;
    }

    private static ObjectData UpdateGeneralData(ObjectData generalBodyData, UnitInformation unitInfo)
    {
      int startingRows = 2;
      List<string> contents;
      var mTextObj = generalBodyData.MTexts.FirstOrDefault(mText => mText.Contents.Contains("Title"));
      if (mTextObj != null)
      {
        contents = new List<string>
        {
            $"General Lighting (Floor Area x 3VA/ft²) (CEC {UnitGeneralLoadContainer.LightingCode}):",
        };

        unitInfo.GeneralLoads.Customs.ForEach(customLoad =>
        {
          if (!customLoad.IsCookingAppliance)
          {
            contents.Add($"{customLoad.Name}{((customLoad.Multiplier <= 1) ? ":" : $" ({customLoad.Multiplier}):")}");
            startingRows++;
          }
        });

        startingRows += InsertTitleLightingBreakdown(1, unitInfo, contents);
        startingRows += InsertTitleCookingApplianceBreakdown(unitInfo, contents);

        AddTextObjectsToObjectData(generalBodyData, contents, mTextObj, 0.25, 0.16);

        mTextObj.Contents = "General Load:".Underline().BoldItalic();
      }

      var values = generalBodyData.MTexts.FirstOrDefault(mText => mText.Contents.Contains("Subtitle VA"));
      if (values != null)
      {
        List<string> generalValues = new List<string>
        {
            $"{unitInfo.GeneralLoads.Lighting.GetTotal()}VA",
        };

        unitInfo.GeneralLoads.Customs.ForEach(customLoad =>
        {
          if (!customLoad.IsCookingAppliance)
          {
            generalValues.Add($"{customLoad.GetTotal()}VA");
          }
        });

        InsertValueLightingBreakdown(1, unitInfo, generalValues);
        InsertValueCookingApplianceBreakdown(unitInfo, generalValues);

        AddTextObjectsToObjectData(generalBodyData, generalValues, values, 0.25, 0.16);

        values.Contents = "";
      }

      generalBodyData.NumberOfRows = startingRows;

      return generalBodyData;
    }

    private static void InsertValueCookingApplianceBreakdown(UnitInformation unitInfo, List<string> generalValues)
    {
      var cookingAppInfo = unitInfo.GeneralLoads.GetCookingApplianceInfo();
      var numberOfApps = cookingAppInfo.NumberOfCookingAppliancesUnder8750 + cookingAppInfo.NumberOfCookingAppliancesOver8750;
      if (numberOfApps == 0) return;

      if (numberOfApps == 1)
      {
        generalValues.Add($"{cookingAppInfo.CookingAppliances[0].GetTotal()}VA");
      }
      else
      {
        var appliancesUnder8750 = cookingAppInfo.CookingAppliancesUnder8750;
        var appliancesOver8750 = cookingAppInfo.CookingAppliancesOver8750;

        generalValues.Add("");

        if (cookingAppInfo.NumberOfCookingAppliancesUnder8750 >= 1 && cookingAppInfo.NumberOfCookingAppliancesOver8750 >= 1)
        {
          for (int i = 0; i < appliancesUnder8750.Count; i++)
          {
            generalValues.Add("");
          }
          for (int i = 0; i < appliancesOver8750.Count; i++)
          {
            generalValues.Add("");
          }
        }
        else if (cookingAppInfo.NumberOfCookingAppliancesUnder8750 >= 1)
        {
          for (int i = 0; i < appliancesUnder8750.Count; i++)
          {
            generalValues.Add("");
          }
        }
        else if (cookingAppInfo.NumberOfCookingAppliancesOver8750 >= 1)
        {
          for (int i = 0; i < appliancesOver8750.Count; i++)
          {
            generalValues.Add("");
          }
        }

        generalValues.Add($"{cookingAppInfo.TotalDemand}VA");
      }
    }

    private static int InsertTitleCookingApplianceBreakdown(UnitInformation unitInfo, List<string> contents)
    {
      var cookingAppInfo = unitInfo.GeneralLoads.GetCookingApplianceInfo();
      var numberOfApps = cookingAppInfo.NumberOfCookingAppliancesUnder8750 + cookingAppInfo.NumberOfCookingAppliancesOver8750;
      if (numberOfApps == 0) return 0;
      if (numberOfApps == 1)
      {
        var appliances = cookingAppInfo.CookingAppliances;
        var customLoad = appliances[0];
        contents.Add($"{customLoad.Name}{((customLoad.Multiplier <= 1) ? ":" : $" ({customLoad.Multiplier}):")}");
        return 1;
      }

      var appliancesUnder8750 = cookingAppInfo.CookingAppliancesUnder8750;
      var appliancesOver8750 = cookingAppInfo.CookingAppliancesOver8750;
      var demandFactorsUnder8750 = new double[2];
      demandFactorsUnder8750[0] = cookingAppInfo.DemandFactor1750to3500;
      demandFactorsUnder8750[1] = cookingAppInfo.DemandFactor3500to8750;

      int additionalRows = 1;
      string title = "Cooking Appliances (CEC Table 220.55)";
      contents.Add(title);

      if (cookingAppInfo.NumberOfCookingAppliancesUnder8750 >= 1 && cookingAppInfo.NumberOfCookingAppliancesOver8750 >= 1)
      {
        additionalRows = UpdateContentsWithAppliances(contents, appliancesUnder8750, additionalRows, demandFactorsUnder8750);
        additionalRows = UpdateContentsWithAppliances(contents, appliancesOver8750, additionalRows);
      }
      else if (cookingAppInfo.NumberOfCookingAppliancesUnder8750 >= 1)
      {
        additionalRows = UpdateContentsWithAppliances(contents, appliancesUnder8750, additionalRows, demandFactorsUnder8750);
      }
      else if (cookingAppInfo.NumberOfCookingAppliancesOver8750 >= 1)
      {
        additionalRows = UpdateContentsWithAppliances(contents, appliancesOver8750, additionalRows);
      }

      contents.Add("   Cooking Appliance Subtotal:");
      additionalRows++;

      return additionalRows;
    }

    private static int UpdateContentsWithAppliances(List<string> contents, List<UnitLoad> appliances, int additionalRows, double[] demandFactors = null)
    {
      appliances.ForEach(customLoad =>
      {
        customLoad.GetIndividual();
        if (demandFactors != null)
        {
          int load = customLoad.GetIndividual();
          double demandFactor = (load > 3500) ? demandFactors[1] : demandFactors[0];
          contents.Add($"   {customLoad.Name} {load}VA @ {demandFactor}% with Demand Applied ({customLoad.Multiplier})");
        }
        else
        {
          int load = customLoad.GetIndividual();
          contents.Add($"   {customLoad.Name} {load}VA with Demand Applied ({customLoad.Multiplier})");
        }
        additionalRows++;
      });
      return additionalRows;
    }

    private static void InsertValueLightingBreakdown(int index, UnitInformation unitInfo, List<string> generalValues)
    {
      int lightingVA = unitInfo.GeneralLoads.Lighting.GetTotal();

      if (unitInfo.GeneralLoads.LightingOccupancyType == LightingOccupancyType.Dwelling)
      {
        InsertValueLightingBreakdownDwelling(index, unitInfo, generalValues, lightingVA);
      }
      else if (unitInfo.GeneralLoads.LightingOccupancyType == LightingOccupancyType.HotelAndMotel)
      {
        InsertValueLightingBreakdownHotelMotel(index, unitInfo, generalValues, lightingVA);
      }
      else if (unitInfo.GeneralLoads.LightingOccupancyType == LightingOccupancyType.Warehouse)
      {
        InsertValueLightingBreakdownWarehouse(index, unitInfo, generalValues, lightingVA);
      }
    }

    private static void InsertValueLightingBreakdownDwelling(int index, UnitInformation unitInfo, List<string> generalValues, int lightingVA)
    {
      var firstValue = Math.Min(lightingVA, 3000);
      var secondValue = (int)Math.Ceiling(Math.Min(Math.Max(lightingVA - 3000, 0), 117000) * 0.35);
      var thirdValue = (int)Math.Ceiling(Math.Max(lightingVA - 120000, 0) * 0.25);

      var total = firstValue + secondValue + thirdValue;

      generalValues.Insert(index, $"{firstValue}VA");
      generalValues.Insert(index + 1, $"{secondValue}VA");
      generalValues.Insert(index + 2, $"{thirdValue}VA");
      generalValues.Insert(index + 3, $"{total}VA");
    }

    private static void InsertValueLightingBreakdownHotelMotel(int index, UnitInformation unitInfo, List<string> generalValues, int lightingVA)
    {
      var firstValue = (int)Math.Ceiling(Math.Min(lightingVA, 20000) * 0.6);
      var secondValue = (int)Math.Ceiling(Math.Min(Math.Max(lightingVA - 20000, 0), 80000) * 0.5);
      var thirdValue = (int)Math.Ceiling(Math.Max(lightingVA - 100000, 0) * 0.35);
      var total = firstValue + secondValue + thirdValue;

      generalValues.Insert(index, $"{firstValue}VA");
      generalValues.Insert(index + 1, $"{secondValue}VA");
      generalValues.Insert(index + 2, $"{thirdValue}VA");
      generalValues.Insert(index + 3, $"{total}VA");
    }

    private static void InsertValueLightingBreakdownWarehouse(int index, UnitInformation unitInfo, List<string> generalValues, int lightingVA)
    {
      var firstValue = Math.Min(lightingVA, 12500);
      var secondValue = (int)Math.Ceiling(Math.Max(lightingVA - 12500, 0) * 0.5);
      var total = firstValue + secondValue;

      generalValues.Insert(index, $"{firstValue}VA");
      generalValues.Insert(index + 1, $"{secondValue}VA");
      generalValues.Insert(index + 2, $"{total}VA");
    }

    private static int InsertTitleLightingBreakdown(int index, UnitInformation unitInfo, List<string> contents)
    {
      int additionalRows = 0;
      if (unitInfo.GeneralLoads.LightingOccupancyType == LightingOccupancyType.Dwelling)
      {
        additionalRows = InsertTitleLightingBreakdownDwelling(index, unitInfo, contents);
      }
      else if (unitInfo.GeneralLoads.LightingOccupancyType == LightingOccupancyType.HotelAndMotel)
      {
        additionalRows = InsertTitleLightingBreakdownHotelMotel(index, unitInfo, contents);
      }
      else if (unitInfo.GeneralLoads.LightingOccupancyType == LightingOccupancyType.Warehouse)
      {
        additionalRows = InsertTitleLightingBreakdownWarehouse(index, unitInfo, contents);
      }
      return additionalRows;
    }

    private static int InsertTitleLightingBreakdownDwelling(int index, UnitInformation unitInfo, List<string> contents)
    {
      contents.Insert(index, "   0-3KVA @ 100%:");
      contents.Insert(index + 1, "   3-120KVA @ 35%:");
      contents.Insert(index + 2, "   120+KVA @ 25%:");
      contents.Insert(index + 3, "   General Lighting Subtotal:");

      return 4;
    }

    private static int InsertTitleLightingBreakdownHotelMotel(int index, UnitInformation unitInfo, List<string> contents)
    {
      contents.Insert(index, "   0-20KVA @ 60%:");
      contents.Insert(index + 1, "   20-100KVA @ 50%:");
      contents.Insert(index + 2, "   100+KVA @ 35%:");
      contents.Insert(index + 3, "   Lighting Subtotal:");

      return 4;
    }

    private static int InsertTitleLightingBreakdownWarehouse(int index, UnitInformation unitInfo, List<string> contents)
    {
      contents.Insert(index, "   0-12.5KVA @ 100%:");
      contents.Insert(index + 1, "   12.5+KVA @ 50%:");
      contents.Insert(index + 2, "   Lighting Subtotal:");

      return 3;
    }

    private static void AddTextObjectsToObjectData(ObjectData objectData, List<string> lines, MTextData mText, double spacing, double marginTop)
    {
      List<TextData> textData = new List<TextData>();
      for (int i = 0; i < lines.Count; i++)
      {
        TextData text = new TextData
        {
          Contents = lines[i],
          Location = new SimpleVector3d(mText.Location.X, mText.Location.Y - marginTop - ((spacing * i) + 0.25), 0),
          Height = mText.TextHeight,
          Layer = mText.Layer,
          Rotation = mText.Rotation,
          Style = mText.Style,
          HorizontalMode = (mText.Justification.Contains("Left") ? TextHorizontalMode.TextLeft : TextHorizontalMode.TextRight),
        };
        textData.Add(text);
      }

      objectData.Texts.AddRange(textData);
    }

    private static double CreateUnitLoadCalculationRectangle(Point3d point, double shiftY, int numberOfRows, BlockTableRecord block)
    {
      if (numberOfRows == 0)
      {
        return 0;
      }

      double MARGIN_TOP = 0.16;
      double MARGIN_BOT = 0.08;
      double ROW_HEIGHT = 0.25;
      double WIDTH = 7.0;

      Point3d topRight = new Point3d(point.X, point.Y + shiftY, point.Z);
      Point3d topLeft = new Point3d(point.X - WIDTH, point.Y + shiftY, point.Z);

      double height = MARGIN_TOP + MARGIN_BOT + (ROW_HEIGHT * numberOfRows);

      Point3d bottomLeft = new Point3d(point.X - WIDTH, point.Y + shiftY - height, point.Z);
      Point3d bottomRight = new Point3d(point.X, point.Y + shiftY - height, point.Z);

      List<Point3d> points = new List<Point3d> { topRight, topLeft, bottomLeft, bottomRight };

      CreateClosedPolylineGivenPoints(points, block);

      return height;
    }

    private static void CreateClosedPolylineGivenPoints(List<Point3d> points, BlockTableRecord block)
    {
      Document acDoc = Application.DocumentManager.MdiActiveDocument;
      Database acCurDb = acDoc.Database;

      using (Transaction acTrans = acCurDb.TransactionManager.StartTransaction())
      {
        BlockTableRecord acBlkTblRec = block;

        Polyline acPoly = new Polyline();
        for (int i = 0; i < points.Count; i++)
        {
          acPoly.AddVertexAt(i, new Point2d(points[i].X, points[i].Y), 0, 0, 0);
        }

        acPoly.Closed = true;
        acPoly.Layer = "E-TEXT";

        acBlkTblRec.AppendEntity(acPoly);
        acTrans.AddNewlyCreatedDBObject(acPoly, true);

        acTrans.Commit();
      }
    }

    private static ObjectData ShiftData(ObjectData bodyData, double shiftHeight)
    {
      bodyData = JsonConvert.DeserializeObject<ObjectData>(JsonConvert.SerializeObject(bodyData));

      foreach (var polyline in bodyData.Polylines)
      {
        for (int i = 0; i < polyline.Vectors.Count; i++)
        {
          polyline.Vectors[i].Y += shiftHeight;
        }
      }

      foreach (var line in bodyData.Lines)
      {
        line.StartPoint.Y += shiftHeight;
        line.EndPoint.Y += shiftHeight;
      }

      foreach (var arc in bodyData.Arcs)
      {
        arc.Center.Y += shiftHeight;
      }

      foreach (var circle in bodyData.Circles)
      {
        circle.Center.Y += shiftHeight;
      }

      foreach (var ellipse in bodyData.Ellipses)
      {
        ellipse.Center.Y += shiftHeight;
      }

      foreach (var mText in bodyData.MTexts)
      {
        mText.Location.Y += shiftHeight;
      }

      foreach (var text in bodyData.Texts)
      {
        text.Location.Y += shiftHeight;
      }

      foreach (var solid in bodyData.Solids)
      {
        for (int i = 0; i < solid.Vertices.Count; i++)
        {
          solid.Vertices[i].Y += shiftHeight;
        }
      }

      return bodyData;
    }

    private static ObjectData GetCopyPasteData(string fileName)
    {
      string assemblyLocation = Assembly.GetExecutingAssembly().Location;
      string assemblyDirectory = Path.GetDirectoryName(assemblyLocation);
      string relativeFilePath = Path.Combine(assemblyDirectory, $"LoadCalculations\\Unit\\BlockData\\{fileName}.json");

      string jsonData = File.ReadAllText(relativeFilePath);
      ObjectData objectData = JsonConvert.DeserializeObject<ObjectData>(jsonData);
      return objectData;
    }
  }

  public static class StringExtensions
  {
    public static string fontName = "Arial";

    public static string Underline(this string text)
    {
      return "\\L" + text + "\\l";
    }

    public static string BoldItalic(this string text)
    {
      return "{\\fArial Rounded MT Bold|b1|i1|c0|p34;" + text + "}";
    }

    public static string Bold(this string text)
    {
      return "{\\fArial Rounded MT Bold|b1|i0|c0|p34;" + text + "}";
    }

    public static string NewLine(this string text)
    {
      return text + "\\P";
    }

    public static string SetFont(this string text, string fontName)
    {
      return $"{{\\F{fontName};" + text + "}";
    }
  }
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\LoadCalculations\Unit\LoadCalculationForm.cs 
﻿using GMEPElectricalResidential.HelperFiles;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml.Linq;

namespace GMEPElectricalResidential.LoadCalculations.Unit
{
  public partial class LoadCalculationForm : UserControl
  {
    private string _NameWatermark = "Enter name...";
    private string _VAWatermark = "Enter VA...";
    private ToolTip _toolTip;
    private UnitInformation _unitInformation;
    private LOAD_CALCULATION_FORM _parent;
    private bool _isLoaded = false;
    private bool _unitNullFlag = false;
    private int _dragIndex = -1;

    public LoadCalculationForm(LOAD_CALCULATION_FORM parent, int tabId, UnitInformation unitInformation = null)
    {
      InitializeComponent();
      SetDefaultValues();
      AddWaterMarks();
      DetectIncorrectInputs();
      DetectEnterPresses();
      SubscribeTextBoxesToTextChangedEvent(this.Controls);
      SubscribeComboBoxesToTextChangedEvent(this.Controls);

      _parent = parent;

      if (unitInformation != null)
      {
        _unitInformation = unitInformation;
      }
      else
      {
        _unitNullFlag = true;
        _unitInformation = new UnitInformation(tabId);
      }

      this.Load += new EventHandler(UnitLoadCalculation_Load);
      GENERAL_CUSTOM_LOAD_BOX.DrawMode = DrawMode.OwnerDrawFixed;
      GENERAL_CUSTOM_LOAD_BOX.DrawItem += GENERAL_CUSTOM_LOAD_BOX_DrawItem;
    }

    private void PopulateBoxFormItems(ListBox box, TextBox name, ComboBox multiplier, TextBox total)
    {
      if (box.SelectedIndex != -1)
      {
        var selectedItem = box.SelectedItem.ToString().Split(',');
        name.Text = selectedItem[0].Trim();
        total.Text = selectedItem[1].Trim();
        multiplier.Text = selectedItem[2].Trim();

        name.ForeColor = Color.Black;
        total.ForeColor = Color.Black;
        multiplier.ForeColor = Color.Black;
      }
    }

    private void UnitLoadCalculation_Load(object sender, EventArgs e)
    {
      if (!_unitNullFlag)
      {
        PopulateUserControlWithUnitInformation(_unitInformation);
      }
      else
      {
        var defaultValues = DefaultGeneralValuesProvider.GetDefaultGeneralValues();
        foreach (var value in defaultValues)
        {
          GENERAL_CUSTOM_LOAD_BOX.Items.Add(value);
        }
      }
      _isLoaded = true;
      UpdateDataAndLoads();
    }

    private void PopulateUserControlWithUnitInformation(UnitInformation unitInformation)
    {
      if (unitInformation == null) return;

      // Set TextBox and ComboBox values with the saved data
      UNIT_NAME.Text = unitInformation.Name;
      VOLTAGE.Text = unitInformation.Voltage;

      // Set Radio Buttons
      ELECTRIC_HEATER.Checked = unitInformation.DwellingArea.Heater == ApplianceType.Electric;
      GAS_HEATER.Checked = unitInformation.DwellingArea.Heater == ApplianceType.Gas;
      NA_HEATER.Checked = unitInformation.DwellingArea.Heater == ApplianceType.NA;

      ELECTRIC_DRYER.Checked = unitInformation.DwellingArea.Dryer == ApplianceType.Electric;
      GAS_DRYER.Checked = unitInformation.DwellingArea.Dryer == ApplianceType.Gas;
      NA_DRYER.Checked = unitInformation.DwellingArea.Dryer == ApplianceType.NA;

      ELECTRIC_OVEN.Checked = unitInformation.DwellingArea.Oven == ApplianceType.Electric;
      GAS_OVEN.Checked = unitInformation.DwellingArea.Oven == ApplianceType.Gas;
      NA_OVEN.Checked = unitInformation.DwellingArea.Oven == ApplianceType.NA;

      ELECTRIC_COOKTOP.Checked = unitInformation.DwellingArea.Cooktop == ApplianceType.Electric;
      GAS_COOKTOP.Checked = unitInformation.DwellingArea.Cooktop == ApplianceType.Gas;
      NA_COOKTOP.Checked = unitInformation.DwellingArea.Cooktop == ApplianceType.NA;

      // Set area
      AREA.Text = unitInformation.DwellingArea.FloorArea.ToString();

      if (unitInformation.GeneralLoads.Customs != null)
      {
        foreach (var load in unitInformation.GeneralLoads.Customs)
        {
          GENERAL_CUSTOM_LOAD_BOX.Items.Add(load.FormattedName());
        }
      }

      if (unitInformation.CustomLoads != null)
      {
        foreach (var load in unitInformation.CustomLoads)
        {
          CUSTOM_LOAD_BOX.Items.Add(load.FormattedName());
        }
      }

      if (unitInformation.GeneralLoads.LightingOccupancyType == LightingOccupancyType.Dwelling)
      {
        LIGHTING_DWELLING.Checked = true;
      }
      else if (unitInformation.GeneralLoads.LightingOccupancyType == LightingOccupancyType.HotelAndMotel)
      {
        LIGHTING_HOTEL_MOTEL.Checked = true;
      }
      else if (unitInformation.GeneralLoads.LightingOccupancyType == LightingOccupancyType.Warehouse)
      {
        LIGHTING_WAREHOUSE.Checked = true;
      }
      else if (unitInformation.GeneralLoads.LightingOccupancyType == LightingOccupancyType.Other)
      {
        LIGHTING_OTHER.Checked = true;
      }

      // Set AC loads
      OUTDOOR_CONDENSER_VA.Text = unitInformation.ACLoads.Condenser.ToString();
      INDOOR_FAN_COIL_VA.Text = unitInformation.ACLoads.FanCoil.ToString();
      OUTDOOR_HEATER_UNIT.Text = unitInformation.ACLoads.HeatingUnit?.Heating.ToString() ?? "0";
      OUTDOOR_HEATER_UNIT_AMOUNT.Text = unitInformation.ACLoads.HeatingUnit?.NumberOfUnits.ToString() ?? "1";

      // Set totals
      TOTAL_GENERAL_LOAD_CALCULATION.Text = unitInformation.Totals.TotalGeneralLoad.ToString();
      TOTAL_AC_LOAD_CALCULATION.Text = unitInformation.Totals.TotalACLoad.ToString();
      SUBTOTAL_GENERAL_LOAD_CALCULATION.Text = unitInformation.Totals.SubtotalGeneralLoad.ToString();
      TOTAL_CUSTOM_LOAD_CALCULATION.Text = unitInformation.Totals.CustomLoad.ToString();
      CALCULATED_LOAD_FOR_SERVICE.Text = unitInformation.Totals.ServiceLoad.ToString();

      // Set Checkbox
      DEMAND_40PC.Checked = unitInformation.Demand40Percent;
    }

    public UnitInformation RetrieveUnitInformation()
    {
      return _unitInformation;
    }

    protected override void OnVisibleChanged(EventArgs e)
    {
      base.OnVisibleChanged(e);

      if (this.Visible)
      {
        UNIT_NAME.Select();
      }
    }

    private void SubscribeComboBoxesToTextChangedEvent(Control.ControlCollection controls)
    {
      foreach (Control control in controls)
      {
        if (control is ComboBox comboBox)
        {
          comboBox.TextChanged += TextBox_TextChanged;
        }

        if (control.HasChildren)
        {
          SubscribeComboBoxesToTextChangedEvent(control.Controls);
        }
      }
    }

    private void SubscribeTextBoxesToTextChangedEvent(Control.ControlCollection controls)
    {
      foreach (Control control in controls)
      {
        if (control is TextBox textBox)
        {
          textBox.TextChanged += TextBox_TextChanged;
        }

        if (control.HasChildren)
        {
          SubscribeTextBoxesToTextChangedEvent(control.Controls);
        }
      }
    }

    private void TextBox_TextChanged(object sender, EventArgs e)
    {
      if (_isLoaded) UpdateDataAndLoads();
    }

    private Tuple<int, string> GetLargestACInformation()
    {
      var numberOfUnits = _unitInformation.ACLoads.HeatingUnit.NumberOfUnits;
      var heaterVA = _unitInformation.ACLoads.HeatingUnit.Heating;
      var condenserVA = _unitInformation.ACLoads.Condenser;
      var fanCoilVA = _unitInformation.ACLoads.FanCoil;

      var totalACAndCooling = condenserVA + fanCoilVA;
      var heatingAt65pc = Math.Ceiling(heaterVA * 0.65);
      var heatingAt40pc = Math.Ceiling(heaterVA * 0.40);

      if (numberOfUnits < 4)
      {
        if (totalACAndCooling > heatingAt65pc)
        {
          return Tuple.Create(totalACAndCooling, "220.82(C)(1)");
        }
        else
        {
          return Tuple.Create((int)heatingAt65pc, "220.82(C)(4)");
        }
      }

      if (totalACAndCooling > heatingAt40pc)
      {
        return Tuple.Create(totalACAndCooling, "220.82(C)(1)");
      }
      else
      {
        return Tuple.Create((int)heatingAt40pc, "220.82(C)(5)");
      }
    }

    private void UpdateDataAndLoads()
    {
      UpdateGeneralData();
      UpdateDwellingData();

      UpdateGeneralLoadData();
      UpdateACLoadData();
      UpdateCustomLoadData();

      UpdateTotalGeneralLoadCalculation();
      UpdateTotalACLoadCalculation();
      UpdateTotalCustomLoadCalculation();

      UpdateServiceLoadDataAndCalculation();
      _parent.UpdateBuildingData(_unitInformation);
    }

    private void UpdateServiceLoadDataAndCalculation()
    {
      if (int.TryParse(SUBTOTAL_GENERAL_LOAD_CALCULATION.Text, out int subtotalGeneralLoad) &&
          int.TryParse(TOTAL_AC_LOAD_CALCULATION.Text, out int totalACLoad) &&
          int.TryParse(TOTAL_CUSTOM_LOAD_CALCULATION.Text, out int totalCustomLoad))
      {
        string voltageText = VOLTAGE.Text;
        if (voltageText.Length > 0 && voltageText[voltageText.Length - 1] == 'V')
        {
          voltageText = voltageText.Substring(0, voltageText.Length - 1);
        }

        if (int.TryParse(voltageText, out int voltage) && voltage != 0) // Avoid division by zero
        {
          var amperage = (int)Math.Ceiling((double)(subtotalGeneralLoad + totalACLoad + totalCustomLoad) / voltage);
          CALCULATED_LOAD_FOR_SERVICE.Text = amperage.ToString();
          _unitInformation.Totals.ServiceLoad = amperage;
        }
      }
    }

    private void UpdateDwellingData()
    {
      _unitInformation.DwellingArea.FloorArea = AREA.Text;
    }

    private void UpdateGeneralData()
    {
      _unitInformation.Name = UNIT_NAME.Text;
      _unitInformation.Voltage = VOLTAGE.Text;
      _unitInformation.Demand40Percent = DEMAND_40PC.Checked;
    }

    private void UpdateTotalCustomLoadCalculation()
    {
      var totalLoad = 0;
      foreach (var customLoad in _unitInformation.CustomLoads)
      {
        totalLoad += customLoad.GetTotal();
      }
      _unitInformation.Totals.CustomLoad = totalLoad;
      TOTAL_CUSTOM_LOAD_CALCULATION.Text = totalLoad.ToString();
    }

    private void UpdateCustomLoadData()
    {
      List<UnitLoad> customs = new List<UnitLoad>();

      foreach (var item in CUSTOM_LOAD_BOX.Items)
      {
        var split = item.ToString().Trim().Split(',');

        var unitCustomLoad = new UnitLoad(split[0], split[1], split[2]);
        customs.Add(unitCustomLoad);
      }

      _unitInformation.CustomLoads = customs;
    }

    private void UpdateTotalACLoadCalculation()
    {
      var ACInformation = GetLargestACInformation();
      var loadValue = ACInformation.Item1;
      var loadCode = ACInformation.Item2;

      TOTAL_AC_LOAD_CALCULATION.Text = loadValue.ToString();
      _unitInformation.Totals.TotalACLoad = loadValue;
      _unitInformation.ACLoads.ElectricalCode = loadCode;
    }

    private void UpdateACLoadData()
    {
      UnitACLoadContainer unitACLoadContainer = new UnitACLoadContainer();

      int.TryParse(OUTDOOR_CONDENSER_VA.Text, out int condenser);
      int.TryParse(INDOOR_FAN_COIL_VA.Text, out int fanCoil);

      HeatingUnit heatingUnit = new HeatingUnit();

      int.TryParse(OUTDOOR_HEATER_UNIT.Text, out int heating);
      int.TryParse(OUTDOOR_HEATER_UNIT_AMOUNT.Text, out int numberOfUnits);

      heatingUnit.Heating = heating;
      heatingUnit.NumberOfUnits = numberOfUnits;

      unitACLoadContainer.Condenser = condenser;
      unitACLoadContainer.FanCoil = fanCoil;
      unitACLoadContainer.HeatingUnit = heatingUnit;

      _unitInformation.ACLoads = unitACLoadContainer;
    }

    private void UpdateGeneralLoadData()
    {
      UnitGeneralLoadContainer unitGeneralLoadContainer = new UnitGeneralLoadContainer();

      int lightingLoad = 0;
      if (!string.IsNullOrEmpty(AREA.Text))
      {
        lightingLoad = int.Parse(AREA.Text) * 3;
      }
      unitGeneralLoadContainer.Lighting = new UnitLoad("General Lighting", lightingLoad.ToString(), "1");

      var previousCustoms = _unitInformation.GeneralLoads?.Customs;
      List<UnitLoad> customs = new List<UnitLoad>();

      foreach (var item in GENERAL_CUSTOM_LOAD_BOX.Items)
      {
        var index = GENERAL_CUSTOM_LOAD_BOX.Items.IndexOf(item);
        bool isCookingAppliance = false;
        if (previousCustoms != null && previousCustoms.Count > index)
        {
          isCookingAppliance = previousCustoms[index].IsCookingAppliance;
        }
        var split = item.ToString().Trim().Split(',');

        var unitGeneralCustomLoad = new UnitLoad(split[0], split[1], split[2], isCookingAppliance);
        customs.Add(unitGeneralCustomLoad);
      }

      // Find the removed item and update the isCookingAppliance flag for subsequent items
      if (previousCustoms != null && previousCustoms.Count > customs.Count)
      {
        for (int i = 0; i < previousCustoms.Count; i++)
        {
          if (i >= customs.Count || previousCustoms[i].Name != customs[i].Name)
          {
            // Found the removed item
            for (int j = i; j < customs.Count; j++)
            {
              customs[j].IsCookingAppliance = previousCustoms[j + 1].IsCookingAppliance;
            }
            break;
          }
        }
      }

      unitGeneralLoadContainer.Customs = customs;
      _unitInformation.GeneralLoads = unitGeneralLoadContainer;

      if (LIGHTING_DWELLING.Checked)
      {
        _unitInformation.GeneralLoads.LightingOccupancyType = LightingOccupancyType.Dwelling;
      }
      else if (LIGHTING_HOTEL_MOTEL.Checked)
      {
        _unitInformation.GeneralLoads.LightingOccupancyType = LightingOccupancyType.HotelAndMotel;
      }
      else if (LIGHTING_WAREHOUSE.Checked)
      {
        _unitInformation.GeneralLoads.LightingOccupancyType = LightingOccupancyType.Warehouse;
      }
      else if (LIGHTING_OTHER.Checked)
      {
        _unitInformation.GeneralLoads.LightingOccupancyType = LightingOccupancyType.Other;
      }
    }

    private void UpdateTotalGeneralLoadCalculation()
    {
      if (_unitInformation == null || _unitInformation.GeneralLoads == null)
      {
        return;
      }

      var isUsing40Percent = _unitInformation.Demand40Percent;
      var generalLoads = _unitInformation.GeneralLoads;
      int totalLoad = generalLoads.OccupancyLighting();

      foreach (var customLoad in generalLoads.Customs)
      {
        if (!customLoad.IsCookingAppliance)
        {
          totalLoad += customLoad.GetTotal();
        }
      }

      var cookingApplianceInfo = generalLoads.GetCookingApplianceInfo();
      var numberOfApps = cookingApplianceInfo.NumberOfCookingAppliancesUnder8750 + cookingApplianceInfo.NumberOfCookingAppliancesOver8750;

      if (numberOfApps == 1)
      {
        totalLoad += cookingApplianceInfo.CookingAppliances[0].GetTotal();
      }
      else if (numberOfApps > 1)
      {
        totalLoad += (int)cookingApplianceInfo.TotalDemand;
      }

      _unitInformation.Totals.TotalGeneralLoad = totalLoad;
      TOTAL_GENERAL_LOAD_CALCULATION.Text = totalLoad.ToString();

      int subtotalLoad;
      if (isUsing40Percent && totalLoad > 10000)
      {
        double subtotal = 10000 + 0.4 * (totalLoad - 10000);
        subtotalLoad = (int)Math.Ceiling(subtotal);
      }
      else
      {
        subtotalLoad = totalLoad;
      }

      SUBTOTAL_GENERAL_LOAD_CALCULATION.Text = subtotalLoad.ToString();
      _unitInformation.Totals.SubtotalGeneralLoad = subtotalLoad;
    }

    private void DetectEnterPresses()
    {
      GENERAL_CUSTOM_NAME.KeyDown += TextBox_KeyDown;
      GENERAL_CUSTOM_MULTIPLIER.KeyDown += TextBox_KeyDown;
      GENERAL_CUSTOM_TOTAL.KeyDown += TextBox_KeyDown;

      CUSTOM_NAME.KeyDown += TextBox_KeyDown;
      CUSTOM_MULTIPLIER.KeyDown += TextBox_KeyDown;
      CUSTOM_TOTAL.KeyDown += TextBox_KeyDown;
    }

    private void TextBox_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode == Keys.Enter)
      {
        bool isEnterPressed = !e.Shift;

        if (sender == GENERAL_CUSTOM_TOTAL || sender == CUSTOM_TOTAL)
        {
          PerformMultiplication(GENERAL_CUSTOM_TOTAL, GENERAL_CUSTOM_MULTIPLIER);
          PerformMultiplication(CUSTOM_TOTAL, CUSTOM_MULTIPLIER);
        }
        if (sender == GENERAL_CUSTOM_NAME || sender == GENERAL_CUSTOM_MULTIPLIER || sender == GENERAL_CUSTOM_TOTAL)
        {
          AddEntry(GENERAL_CUSTOM_NAME, GENERAL_CUSTOM_MULTIPLIER, GENERAL_CUSTOM_TOTAL, GENERAL_CUSTOM_LOAD_BOX, isEnterPressed);
        }
        else if (sender == CUSTOM_NAME || sender == CUSTOM_MULTIPLIER || sender == CUSTOM_TOTAL)
        {
          AddEntry(CUSTOM_NAME, CUSTOM_MULTIPLIER, CUSTOM_TOTAL, CUSTOM_LOAD_BOX, isEnterPressed);
        }
        e.SuppressKeyPress = true;
      }
    }

    private void AddEntry(TextBox nameTextBox, ComboBox multiplierComboBox, TextBox totalBox, ListBox listBox, bool isEnterPressed = true)
    {
      string name = nameTextBox.Text;
      string total = totalBox.Text;
      string multiplier = multiplierComboBox.Text;

      bool proceed = HandleAddEntryToolTips(nameTextBox, totalBox, multiplierComboBox);

      if (!proceed) return;

      string newEntry = $"{name}, {total}, {multiplier}";

      bool added = AddOrUpdateEntryToListBox(listBox, name, newEntry);

      if (isEnterPressed)
      {
        SelectNextItem(listBox);
      }
      else
      {
        SelectPreviousItem(listBox);
      }

      if (added)
      {
        ResetFields(nameTextBox, multiplierComboBox, totalBox);
      }
      else
      {
        totalBox.Focus();
        totalBox.SelectAll();
      }

      if (_isLoaded) UpdateDataAndLoads();
    }

    private void ResetFields(TextBox nameTextBox, ComboBox multiplierComboBox, TextBox totalBox)
    {
      nameTextBox.Text = "";
      multiplierComboBox.Text = "1";
      totalBox.Text = "";
    }

    private void PerformMultiplication(TextBox totalBox, ComboBox multiplierBox)
    {
      if (totalBox.Text.Contains("*"))
      {
        var split = totalBox.Text.Split('*');
        if (split.Length == 2)
        {
          if (decimal.TryParse(split[0], out decimal total) && decimal.TryParse(split[1], out decimal multiplier))
          {
            totalBox.Text = (total * multiplier).ToString();
            multiplierBox.Text = multiplier.ToString();
          }
        }
      }
    }

    private static void SelectPreviousItem(ListBox listBox)
    {
      if (listBox.Items.Count > 0)
      {
        var selectedIndex = listBox.SelectedIndex;
        if (selectedIndex == 0)
        {
          listBox.SelectedIndex = listBox.Items.Count - 1;
        }
        else
        {
          listBox.SelectedIndex = selectedIndex - 1;
        }
      }
    }

    private static void SelectNextItem(ListBox listBox)
    {
      if (listBox.Items.Count > 0)
      {
        var selectedIndex = listBox.SelectedIndex;
        if (selectedIndex == listBox.Items.Count - 1)
        {
          listBox.SelectedIndex = 0;
        }
        else
        {
          listBox.SelectedIndex = selectedIndex + 1;
        }
      }
    }

    private static bool AddOrUpdateEntryToListBox(ListBox listBox, string name, string newEntry)
    {
      int existingIndex = -1;
      for (int i = 0; i < listBox.Items.Count; i++)
      {
        string item = listBox.Items[i].ToString();
        string[] parts = item.Split(new[] { ", " }, StringSplitOptions.None);
        if (parts.Length > 0 && parts[0] == name)
        {
          existingIndex = i;
          break;
        }
      }

      bool added = false;
      if (existingIndex >= 0)
      {
        listBox.Items[existingIndex] = newEntry;
      }
      else
      {
        listBox.Items.Add(newEntry);
        added = true;
      }

      return added;
    }

    private void DetectIncorrectInputs()
    {
      SubscribeVAsToOnlyDigits(this.Controls);
      SubscribeMultipliersToOnlyDigitInputs(this.Controls);
    }

    private void SubscribeMultipliersToOnlyDigitInputs(Control.ControlCollection controls)
    {
      foreach (Control control in controls)
      {
        if (control is ComboBox comboBox && comboBox.Name.EndsWith("MULTIPLIER"))
        {
          control.KeyPress += OnlyDigitInputs;
        }
      }
    }

    private void SubscribeVAsToOnlyDigits(Control.ControlCollection controls)
    {
      foreach (Control control in controls)
      {
        if (control is TextBox textBox && (textBox.Name.EndsWith("VA") || textBox.Name == "AREA"))
        {
          textBox.KeyPress += OnlyDigitInputs;
        }

        if (control.HasChildren)
        {
          SubscribeVAsToOnlyDigits(control.Controls);
        }
      }
    }

    private void OnlyDigitInputs(object sender, KeyPressEventArgs e)
    {
      if (sender is TextBox textBox)
      {
        HandleDigitInput(textBox, e);
      }
      else if (sender is ComboBox comboBox && comboBox.DropDownStyle == ComboBoxStyle.DropDown)
      {
        HandleDigitInput(comboBox, e);
      }
    }

    private void HandleDigitInput(Control control, KeyPressEventArgs e)
    {
      if (!char.IsDigit(e.KeyChar) && !char.IsControl(e.KeyChar))
      {
        e.Handled = true;
        _toolTip.Show("You must enter a digit.", control, 0, -20, 2000);
      }
      else
      {
        _toolTip.Hide(control);
      }
    }

    private void AddWaterMarks()
    {
      GENERAL_CUSTOM_NAME.Text = _NameWatermark;
      GENERAL_CUSTOM_NAME.ForeColor = Color.LightGray;
      GENERAL_CUSTOM_NAME.Enter += RemoveWatermark;
      GENERAL_CUSTOM_NAME.Leave += AddWatermark;

      GENERAL_CUSTOM_TOTAL.Text = _VAWatermark;
      GENERAL_CUSTOM_TOTAL.ForeColor = Color.LightGray;
      GENERAL_CUSTOM_TOTAL.Enter += RemoveWatermark;
      GENERAL_CUSTOM_TOTAL.Leave += AddWatermark;

      CUSTOM_NAME.Text = _NameWatermark;
      CUSTOM_NAME.ForeColor = Color.LightGray;
      CUSTOM_NAME.Enter += RemoveWatermark;
      CUSTOM_NAME.Leave += AddWatermark;

      CUSTOM_TOTAL.Text += _VAWatermark;
      CUSTOM_TOTAL.ForeColor = Color.LightGray;
      CUSTOM_TOTAL.Enter += RemoveWatermark;
      CUSTOM_TOTAL.Leave += AddWatermark;
    }

    private void RemoveWatermark(object sender, EventArgs e)
    {
      var textBox = sender as TextBox;
      if (textBox != null)
      {
        if (textBox.Text == _NameWatermark || textBox.Text == _VAWatermark)
        {
          textBox.Text = "";
          textBox.ForeColor = Color.Black;
        }
      }
    }

    private void AddWatermark(object sender, EventArgs e)
    {
      var textBox = sender as TextBox;
      if (textBox != null)
      {
        if (string.IsNullOrEmpty(textBox.Text))
        {
          if (textBox == GENERAL_CUSTOM_NAME || textBox == CUSTOM_NAME)
          {
            textBox.Text = _NameWatermark;
          }
          else if (textBox == GENERAL_CUSTOM_TOTAL || textBox == CUSTOM_TOTAL)
          {
            textBox.Text = _VAWatermark;
          }
          textBox.ForeColor = Color.LightGray;
        }
      }
    }

    private void SetDefaultValues()
    {
      string multiplierMessage = "To update the total and the amount at the same time, use the format: (amount in VA for 1 item) * (number of items) then press enter";

      _toolTip = new ToolTip();
      _toolTip.SetToolTip(TOTAL_GENERAL_LABEL, multiplierMessage);
      _toolTip.SetToolTip(TOTAL_CUSTOM_LABEL, multiplierMessage);

      VOLTAGE.SelectedIndex = 0;

      GENERAL_CUSTOM_LOAD_BOX.AllowDrop = true;
      CUSTOM_LOAD_BOX.AllowDrop = true;

      GENERAL_CUSTOM_LOAD_BOX.MouseDown += ListBox_MouseDown;
      CUSTOM_LOAD_BOX.MouseDown += ListBox_MouseDown;

      GENERAL_CUSTOM_LOAD_BOX.DragDrop += ListBox_DragDrop;
      CUSTOM_LOAD_BOX.DragDrop += ListBox_DragDrop;

      GENERAL_CUSTOM_LOAD_BOX.DragOver += ListBox_DragOver;
      CUSTOM_LOAD_BOX.DragOver += ListBox_DragOver;

      GENERAL_CUSTOM_LOAD_BOX.SelectedIndexChanged += ListBox_SelectedIndexChanged;
      CUSTOM_LOAD_BOX.SelectedIndexChanged += ListBox_SelectedIndexChanged;

      GENERAL_CUSTOM_LOAD_BOX.KeyDown += ListBox_KeyDown;
      CUSTOM_LOAD_BOX.KeyDown += ListBox_KeyDown;

      var parentTab = this.Parent as TabPage;
      if (parentTab != null)
      {
        parentTab.Text = _unitInformation.Name;
      }
    }

    private void ListBox_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode == Keys.Delete)
      {
        ListBox listBox = (ListBox)sender;
        if (listBox.SelectedIndex != -1)
        {
          listBox.Items.RemoveAt(listBox.SelectedIndex);
          ClearListBoxInputs(listBox);
          if (_isLoaded) UpdateDataAndLoads();
        }
      }
    }

    private void ListBox_SelectedIndexChanged(object sender, EventArgs e)
    {
      if (sender == GENERAL_CUSTOM_LOAD_BOX)
      {
        PopulateBoxFormItems(GENERAL_CUSTOM_LOAD_BOX, GENERAL_CUSTOM_NAME, GENERAL_CUSTOM_MULTIPLIER, GENERAL_CUSTOM_TOTAL);
      }
      else if (sender == CUSTOM_LOAD_BOX)
      {
        PopulateBoxFormItems(CUSTOM_LOAD_BOX, CUSTOM_NAME, CUSTOM_MULTIPLIER, CUSTOM_TOTAL);
      }
    }

    private void ListBox_DragOver(object sender, DragEventArgs e)
    {
      e.Effect = DragDropEffects.Move;
    }

    private void ListBox_DragDrop(object sender, DragEventArgs e)
    {
      ListBox listBox = (ListBox)sender;
      int dropIndex = listBox.IndexFromPoint(listBox.PointToClient(new Point(e.X, e.Y)));
      if (dropIndex >= 0 && dropIndex != _dragIndex)
      {
        object dragItem = listBox.Items[_dragIndex];
        listBox.Items.RemoveAt(_dragIndex);
        listBox.Items.Insert(dropIndex, dragItem);
        listBox.SelectedIndex = dropIndex;
      }
    }

    private void ListBox_MouseDown(object sender, MouseEventArgs e)
    {
      ListBox listBox = (ListBox)sender;
      if (e.Button == MouseButtons.Left && listBox.SelectedItem != null)
      {
        _dragIndex = listBox.IndexFromPoint(e.X, e.Y);
        if (_dragIndex >= 0)
        {
          var index = listBox.SelectedIndex;
          listBox.SelectedIndex = -1;
          listBox.SelectedIndex = index;
          listBox.DoDragDrop(listBox.Items[_dragIndex], DragDropEffects.Move);
        }
      }
    }

    private bool isNonNegative(string multiplier)
    {
      if (string.IsNullOrEmpty(multiplier))
      {
        return false;
      }

      if (decimal.TryParse(multiplier, out decimal result))
      {
        return result >= 0;
      }

      return false;
    }

    private void UNIT_NAME_TextChanged(object sender, EventArgs e)
    {
      var textBox = sender as TextBox;
      if (textBox != null)
      {
        var parentTab = this.Parent as TabPage;
        if (parentTab != null)
        {
          _unitInformation.Name = textBox.Text;
          parentTab.Text = _unitInformation.Name;
        }
      }
    }

    private void ELECTRIC_HEATER_CheckedChanged(object sender, EventArgs e)
    {
      var radioButton = sender as RadioButton;
      if (!radioButton.Checked) return;

      _unitInformation.DwellingArea.Heater = ApplianceType.Electric;
    }

    private void GAS_HEATER_CheckedChanged(object sender, EventArgs e)
    {
      var radioButton = sender as RadioButton;
      if (!radioButton.Checked) return;

      _unitInformation.DwellingArea.Heater = ApplianceType.Gas;
    }

    private void NA_HEATER_CheckedChanged(object sender, EventArgs e)
    {
      var radioButton = sender as RadioButton;
      if (!radioButton.Checked) return;

      _unitInformation.DwellingArea.Heater = ApplianceType.NA;
    }

    private void ELECTRIC_DRYER_CheckedChanged(object sender, EventArgs e)
    {
      var radioButton = sender as RadioButton;
      if (!radioButton.Checked) return;

      _unitInformation.DwellingArea.Dryer = ApplianceType.Electric;
    }

    private void GAS_DRYER_CheckedChanged(object sender, EventArgs e)
    {
      var radioButton = sender as RadioButton;
      if (!radioButton.Checked) return;

      _unitInformation.DwellingArea.Dryer = ApplianceType.Gas;
    }

    private void NA_DRYER_CheckedChanged(object sender, EventArgs e)
    {
      var radioButton = sender as RadioButton;
      if (!radioButton.Checked) return;

      _unitInformation.DwellingArea.Dryer = ApplianceType.NA;
    }

    private void ELECTRIC_OVEN_CheckedChanged(object sender, EventArgs e)
    {
      var radioButton = sender as RadioButton;
      if (!radioButton.Checked) return;

      _unitInformation.DwellingArea.Oven = ApplianceType.Electric;
    }

    private void GAS_OVEN_CheckedChanged(object sender, EventArgs e)
    {
      var radioButton = sender as RadioButton;
      if (!radioButton.Checked) return;

      _unitInformation.DwellingArea.Oven = ApplianceType.Gas;
    }

    private void NA_OVEN_CheckedChanged(object sender, EventArgs e)
    {
      var radioButton = sender as RadioButton;
      if (!radioButton.Checked) return;

      _unitInformation.DwellingArea.Oven = ApplianceType.NA;
    }

    private void ELECTRIC_COOKTOP_CheckedChanged(object sender, EventArgs e)
    {
      var radioButton = sender as RadioButton;
      if (!radioButton.Checked) return;

      _unitInformation.DwellingArea.Cooktop = ApplianceType.Electric;
    }

    private void GAS_COOKTOP_CheckedChanged(object sender, EventArgs e)
    {
      var radioButton = sender as RadioButton;
      if (!radioButton.Checked) return;

      _unitInformation.DwellingArea.Cooktop = ApplianceType.Gas;
    }

    private void NA_COOKTOP_CheckedChanged(object sender, EventArgs e)
    {
      var radioButton = sender as RadioButton;
      if (!radioButton.Checked) return;

      _unitInformation.DwellingArea.Cooktop = ApplianceType.NA;
    }

    private void AREA_TextChanged(object sender, EventArgs e)
    {
      UpdateGeneralLighting();
    }

    private void UpdateGeneralLighting()
    {
      bool isLightingHotelMotel = LIGHTING_HOTEL_MOTEL.Checked;
      bool isLightingWarehouse = LIGHTING_WAREHOUSE.Checked;
      bool isOther = LIGHTING_OTHER.Checked;

      var occType = "Dwelling";
      if (isLightingHotelMotel)
      {
        occType = "Hotel and Motel";
      }
      else if (isLightingWarehouse)
      {
        occType = "Warehouse";
      }
      else if (isOther)
      {
        occType = "Other";
      }

      List<int> lightingLoads;
      if (AREA != null && int.TryParse(AREA.Text, out int floorArea))
      {
        lightingLoads = CalculateLightingLoad(occType, floorArea * 3);
      }
      else
      {
        lightingLoads = CalculateLightingLoad(occType, 0);
      }

      var total = SumListInts(lightingLoads);
      GENERAL_LIGHTING_TOTAL.Text = total.ToString();

      if (_isLoaded) UpdateDataAndLoads();
    }

    private int SumListInts(List<int> lightingLoads)
    {
      int total = 0;
      foreach (int i in lightingLoads)
      {
        total += i;
      }
      return total;
    }

    public List<int> CalculateLightingLoad(string occupancyType, int lightingLoad)
    {
      List<int> calculatedLoads = new List<int>();

      switch (occupancyType)
      {
        case "Dwelling":
          calculatedLoads.Add((int)Math.Ceiling(Math.Min(lightingLoad, 3000) * 1.0));
          calculatedLoads.Add((int)Math.Ceiling(Math.Min(Math.Max(lightingLoad - 3000, 0), 117000) * 0.35));
          calculatedLoads.Add((int)Math.Ceiling(Math.Max(lightingLoad - 120000, 0) * 0.25));
          break;

        case "Hotel and Motel":
          calculatedLoads.Add((int)Math.Ceiling(Math.Min(lightingLoad, 20000) * 0.60));
          calculatedLoads.Add((int)Math.Ceiling(Math.Min(Math.Max(lightingLoad - 20000, 0), 80000) * 0.50));
          calculatedLoads.Add((int)Math.Ceiling(Math.Max(lightingLoad - 100000, 0) * 0.35));
          break;

        case "Warehouse":
          calculatedLoads.Add((int)Math.Ceiling(Math.Min(lightingLoad, 12500) * 1.0));
          calculatedLoads.Add((int)Math.Ceiling(Math.Max(lightingLoad - 12500, 0) * 0.50));
          break;

        default:
          calculatedLoads.Add(lightingLoad);
          break;
      }

      return calculatedLoads;
    }

    private bool HandleAddEntryToolTips(TextBox nameTextBox, TextBox totalBox, ComboBox multiplierComboBox)
    {
      string name = nameTextBox.Text;
      string total = totalBox.Text;
      string multiplier = multiplierComboBox.Text;

      if (string.IsNullOrEmpty(name) || name == _NameWatermark)
      {
        _toolTip.Show("You must enter a name.", nameTextBox, 0, -20, 2000);
        return false;
      }
      else
      {
        _toolTip.Hide(nameTextBox);
      }

      if (string.IsNullOrEmpty(total) || total == _VAWatermark)
      {
        _toolTip.Show("You must enter a VA.", totalBox, 0, -20, 2000);
        return false;
      }
      else
      {
        _toolTip.Hide(totalBox);
      }

      if (string.IsNullOrEmpty(multiplier) || !isNonNegative(multiplier))
      {
        _toolTip.Show("You must enter a multiplier that is a positive integer or 0.", multiplierComboBox, 0, -20, 2000);
        return false;
      }
      else
      {
        _toolTip.Hide(multiplierComboBox);
      }

      return true;
    }

    private void ADD_ENTRY_Click(object sender, EventArgs e)
    {
      AddEntry(GENERAL_CUSTOM_NAME, GENERAL_CUSTOM_MULTIPLIER, GENERAL_CUSTOM_TOTAL, GENERAL_CUSTOM_LOAD_BOX);
    }

    private void ADD_ENTRY_CUSTOM_Click(object sender, EventArgs e)
    {
      AddEntry(CUSTOM_NAME, CUSTOM_MULTIPLIER, CUSTOM_TOTAL, CUSTOM_LOAD_BOX);
    }

    private void RemoveEntry(ListBox listBox)
    {
      if (listBox.Items.Count > 0)
      {
        if (listBox.SelectedIndex != -1)
        {
          listBox.Items.RemoveAt(listBox.SelectedIndex);
        }
        else
        {
          listBox.Items.RemoveAt(listBox.Items.Count - 1);
        }

        ClearListBoxInputs(listBox);
      }

      if (_isLoaded) UpdateDataAndLoads();
    }

    private void ClearListBoxInputs(ListBox listBox)
    {
      if (listBox == GENERAL_CUSTOM_LOAD_BOX)
      {
        GENERAL_CUSTOM_NAME.Text = "";
        GENERAL_CUSTOM_MULTIPLIER.Text = "1";
        GENERAL_CUSTOM_TOTAL.Text = "";
      }
      else if (listBox == CUSTOM_LOAD_BOX)
      {
        CUSTOM_NAME.Text = "";
        CUSTOM_MULTIPLIER.Text = "1";
        CUSTOM_TOTAL.Text = "";
      }
    }

    private void REMOVE_ENTRY_Click(object sender, EventArgs e)
    {
      RemoveEntry(GENERAL_CUSTOM_LOAD_BOX);
    }

    private void REMOVE_ENTRY_CUSTOM_Click(object sender, EventArgs e)
    {
      RemoveEntry(CUSTOM_LOAD_BOX);
    }

    private void WATER_HEATER_CHECK_CheckedChanged(object sender, EventArgs e)
    {
      if (_isLoaded) UpdateDataAndLoads();
    }

    private void LIGHTING_DWELLING_CheckedChanged(object sender, EventArgs e)
    {
      UpdateGeneralLighting();
    }

    private void LIGHTING_HOTEL_MOTEL_CheckedChanged(object sender, EventArgs e)
    {
      UpdateGeneralLighting();
    }

    private void LIGHTING_WAREHOUSE_CheckedChanged(object sender, EventArgs e)
    {
      UpdateGeneralLighting();
    }

    private void LIGHTING_OTHER_CheckedChanged(object sender, EventArgs e)
    {
      UpdateGeneralLighting();
    }

    private void ESTIMATE_CONDENSER_Click(object sender, EventArgs e)
    {
      List<int> units;
      if (int.TryParse(AREA.Text, out int area))
      {
        int kBTU = (int)Math.Ceiling((area / 500.0) * 12);

        if (kBTU < 18)
        {
          kBTU = 18;
        }
        else if (kBTU % 6 != 0)
        {
          kBTU = ((int)(kBTU / 6) + 1) * 6;
        }

        units = BreakUpkBTU(kBTU);
      }
      else
      {
        units = new List<int> { 0 };
      }

      int condenserVA = GetCondenserVATotalFromUnits(units);

      OUTDOOR_CONDENSER_VA.Text = condenserVA.ToString();
    }

    private int GetCondenserVATotalFromUnits(List<int> units)
    {
      Dictionary<int, int> map = new Dictionary<int, int>
    {
        { 18, 2714 },
        { 24, 4048 },
        { 30, 3864 },
        { 36, 4945 },
        { 42, 5405 },
        { 48, 6026 },
        { 60, 7866 }
    };

      return units.Sum(unit => map.ContainsKey(unit) ? map[unit] : 0);
    }

    private int GetFanCoilVATotalFromUnits(List<int> units)
    {
      Dictionary<int, int> map = new Dictionary<int, int>
    {
        { 18, 648 },
        { 24, 648 },
        { 30, 840 },
        { 36, 816 },
        { 42, 984 },
        { 48, 1200 },
        { 60, 1632 }
    };

      return units.Sum(unit => map.ContainsKey(unit) ? map[unit] : 0);
    }

    private List<int> BreakUpkBTU(int kBTU)
    {
      var units = new List<int> { 60, 48, 42, 36, 30, 24, 18 };
      var bestCombination = new List<int>();
      var startingCombination = new List<int>();
      while (kBTU >= 300)
      {
        startingCombination.Add(60);
        kBTU -= 60;
      }

      void FindCombination(int remainingBTU, List<int> currentCombination, int startIndex)
      {
        if (remainingBTU == 0)
        {
          if (!bestCombination.Any() || currentCombination.Count < bestCombination.Count)
          {
            bestCombination = new List<int>(currentCombination);
          }
          return;
        }

        for (int i = startIndex; i < units.Count; i++)
        {
          if (units[i] <= remainingBTU)
          {
            var nextCombination = new List<int>(currentCombination) { units[i] };
            FindCombination(remainingBTU - units[i], nextCombination, i);
          }
        }
      }

      FindCombination(kBTU, startingCombination, 0);
      return bestCombination;
    }

    private void ESTIMATE_FAN_COIL_Click(object sender, EventArgs e)
    {
      List<int> units;
      if (int.TryParse(AREA.Text, out int area))
      {
        int kBTU = (int)Math.Ceiling((area / 500.0) * 12);

        if (kBTU < 18)
        {
          kBTU = 18;
        }
        else if (kBTU % 6 != 0)
        {
          kBTU = ((int)(kBTU / 6) + 1) * 6;
        }

        units = BreakUpkBTU(kBTU);
      }
      else
      {
        units = new List<int> { 0 };
      }

      int fanCoilVA = GetFanCoilVATotalFromUnits(units);

      INDOOR_FAN_COIL_VA.Text = fanCoilVA.ToString();
    }

    private void COOKING_APPLIANCE_Click(object sender, EventArgs e)
    {
      var selectedItem = GENERAL_CUSTOM_LOAD_BOX.Text;
      var unitLoad = _unitInformation.GeneralLoads.Customs.FirstOrDefault(load => load.FormattedName() == selectedItem);

      if (unitLoad != null)
      {
        unitLoad.IsCookingAppliance = !unitLoad.IsCookingAppliance;
      }

      if (_isLoaded) UpdateDataAndLoads();

      GENERAL_CUSTOM_LOAD_BOX.Invalidate();
    }

    private void GENERAL_CUSTOM_LOAD_BOX_DrawItem(object sender, DrawItemEventArgs e)
    {
      ColorTheCookingAppliances(e);
    }

    private void ColorTheCookingAppliances(DrawItemEventArgs e)
    {
      if (e.Index >= 0 && e.Index < GENERAL_CUSTOM_LOAD_BOX.Items.Count &&
          e.Index < _unitInformation.GeneralLoads.Customs.Count)
      {
        string item = GENERAL_CUSTOM_LOAD_BOX.Items[e.Index].ToString();
        bool isCookingAppliance = _unitInformation.GeneralLoads.Customs[e.Index].IsCookingAppliance;

        if (isCookingAppliance)
        {
          e.Graphics.FillRectangle(Brushes.LightPink, e.Bounds);
        }
        else
        {
          e.Graphics.FillRectangle(SystemBrushes.Window, e.Bounds);
        }

        e.Graphics.DrawString(item, e.Font, Brushes.Black, e.Bounds, StringFormat.GenericDefault);

        if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
        {
          using (Pen pen = new Pen(Color.Black, 1))
          {
            Rectangle rect = e.Bounds;
            rect.Inflate(-1, -1);
            e.Graphics.DrawRectangle(pen, rect);
          }
        }
      }

      e.DrawFocusRectangle();
    }

    private void DEMAND_40PC_CheckedChanged(object sender, EventArgs e)
    {
      if (DEMAND_40PC.Checked)
      {
        GENERAL_LIGHTING_TITLE.Visible = false;
        GENERAL_LIGHTING_GROUP_BOX.Visible = false;
        GENERAL_LIGHTING_TOTAL.Visible = false;
        GENERAL_LIGHTING_TOTAL_VA_LABEL.Visible = false;
        COOKING_APPLIANCE.Visible = false;
        LIGHTING_OTHER.Checked = true;

        SetAllGeneralLoadsAsNonCookingAppliances();
      }
      else
      {
        GENERAL_LIGHTING_TITLE.Visible = true;
        GENERAL_LIGHTING_GROUP_BOX.Visible = true;
        GENERAL_LIGHTING_TOTAL.Visible = true;
        GENERAL_LIGHTING_TOTAL_VA_LABEL.Visible = true;
        COOKING_APPLIANCE.Visible = true;

        UpdateDataAndLoads();
      }
    }

    private void SetAllGeneralLoadsAsNonCookingAppliances()
    {
      foreach (var unitLoad in _unitInformation.GeneralLoads.Customs)
      {
        unitLoad.IsCookingAppliance = false;
      }
      if (_isLoaded) UpdateDataAndLoads();
      GENERAL_CUSTOM_LOAD_BOX.Invalidate();
    }
  }

  public static class DefaultGeneralValuesProvider
  {
    public static List<string> GetDefaultGeneralValues()
    {
      return new List<string>()
        {
            "Small Appliance, 3000, 1",
            "Laundry, 1500, 1",
            "Bathroom, 0, 1",
            "Dishwasher, 1200, 1",
            "Microwave, 1500, 1",
            "Garbage Disposal, 1200, 1",
            "Bathroom Fans, 200, 1",
            "Garage Door Opener, 1200, 1",
            "Dryer, 5000, 1",
            "Oven, 8000, 1",
            "Refrigerator, 1000, 1",
            "Water Heater, 5000, 1"
        };
    }
  }

  public class UnitInformation
  {
    public string Name { get; set; }
    public string Voltage { get; set; }
    public int ID { get; set; }
    public bool Demand40Percent { get; set; } = true;
    public UnitDwellingArea DwellingArea { get; set; }
    public UnitGeneralLoadContainer GeneralLoads { get; set; }
    public List<UnitLoad> CustomLoads { get; set; }
    public UnitACLoadContainer ACLoads { get; set; }
    public UnitTotalContainer Totals { get; set; }

    public UnitInformation(int id)
    {
      ID = id;
      DwellingArea = new UnitDwellingArea();
      GeneralLoads = new UnitGeneralLoadContainer();
      CustomLoads = new List<UnitLoad>();
      ACLoads = new UnitACLoadContainer();
      Totals = new UnitTotalContainer();
    }

    public string FormattedName()
    {
      return $"Unit {Name} - ID{ID}";
    }

    public string FilteredFormattedName()
    {
      if (string.IsNullOrEmpty(Name))
      {
        return $"Unit - ID{ID}";
      }

      string filteredName = new string(Name.Where(c => char.IsLetterOrDigit(c)).ToArray());
      return $"Unit {filteredName} - ID{ID}";
    }
  }

  public enum ApplianceType
  {
    Electric,
    Gas,
    NA
  }

  public class UnitDwellingArea
  {
    public string FloorArea { get; set; }
    public ApplianceType Heater { get; set; }
    public ApplianceType Dryer { get; set; }
    public ApplianceType Oven { get; set; }
    public ApplianceType Cooktop { get; set; }
  }

  public class UnitGeneralLoadContainer
  {
    public static string LightingCode = "220.42";
    public UnitLoad Lighting { get; set; }
    public List<UnitLoad> Customs { get; set; }
    public LightingOccupancyType LightingOccupancyType { get; set; }

    public int OccupancyLighting()
    {
      switch (LightingOccupancyType)
      {
        case LightingOccupancyType.Dwelling:
          return DwellingLoad();

        case LightingOccupancyType.HotelAndMotel:
          return HotelAndMotelLoad();

        case LightingOccupancyType.Warehouse:
          return WarehouseLoad();

        case LightingOccupancyType.Other:
          return OtherLoad();

        default:
          return 0;
      }
    }

    private int DwellingLoad()
    {
      var firstValue = Math.Min(Lighting.GetTotal(), 3000);
      var secondValue = Math.Min(Math.Max(Lighting.GetTotal() - 3000, 0), 117000) * 0.35;
      var thirdValue = Math.Max(Lighting.GetTotal() - 120000, 0) * 0.25;
      return (int)Math.Ceiling(firstValue + secondValue + thirdValue);
    }

    private int HotelAndMotelLoad()
    {
      var firstValue = Math.Min(Lighting.GetTotal(), 20000) * 0.6;
      var secondValue = Math.Min(Math.Max(Lighting.GetTotal() - 20000, 0), 80000) * 0.5;
      var thirdValue = Math.Max(Lighting.GetTotal() - 100000, 0) * 0.35;
      return (int)Math.Ceiling(firstValue + secondValue + thirdValue);
    }

    private int WarehouseLoad()
    {
      var firstValue = Math.Min(Lighting.GetTotal(), 12500);
      var secondValue = Math.Max(Lighting.GetTotal() - 12500, 0) * 0.5;
      return (int)Math.Ceiling(firstValue + secondValue);
    }

    private int OtherLoad()
    {
      return Lighting.GetTotal();
    }

    public List<UnitLoad> GetCookingAppliances()
    {
      return Customs.Where(custom => custom.IsCookingAppliance && custom.GetIndividual() >= 1750 && custom.GetIndividual() <= 27000).ToList();
    }

    public List<UnitLoad> GetCookingAppliancesOver8750()
    {
      return Customs.Where(custom => custom.IsCookingAppliance && custom.GetIndividual() > 8750 && custom.GetIndividual() <= 27000).ToList();
    }

    public List<UnitLoad> GetCookingAppliancesUnder8750()
    {
      return Customs.Where(custom => custom.IsCookingAppliance && custom.GetIndividual() <= 8750 && custom.GetIndividual() >= 1750).ToList();
    }

    public CookingApplianceInfo GetCookingApplianceInfo()
    {
      var cookingApps = GetCookingAppliances();
      var cookingAppBuckets = GetCookingApplianceBuckets(cookingApps); // index 0, number of appliances from 1750VA - 8750VA | index 1, number of appliances from 8750VA - 27000VA
      var demandFactorBuckets = GetDemandFactorBuckets(cookingAppBuckets); // index 0, demand factor for appliances from 1750VA - 3500VA | index1, demand factor for appliances from 3500VA - 8750VA
      var maximumDemandOver8750 = GetMaximumDemand(cookingAppBuckets[1], GetAverageLoadFor8750to27000());
      var maximumDemandUnder8750 = GetDemand(demandFactorBuckets[0], demandFactorBuckets[1], cookingApps);
      var maximumDemand = maximumDemandUnder8750 + maximumDemandOver8750;

      var cookingApplianceInfo = new CookingApplianceInfo()
      {
        CookingAppliances = cookingApps,
        CookingAppliancesUnder8750 = GetCookingAppliancesUnder8750(),
        CookingAppliancesOver8750 = GetCookingAppliancesOver8750(),
        NumberOfCookingAppliancesUnder8750 = cookingAppBuckets[0],
        NumberOfCookingAppliancesOver8750 = cookingAppBuckets[1],
        DemandFactor1750to3500 = demandFactorBuckets[0],
        DemandFactor3500to8750 = demandFactorBuckets[1],
        TotalDemandOver8750 = maximumDemandOver8750,
        TotalDemandUnder8750 = maximumDemandUnder8750,
        TotalDemand = maximumDemand,
      };

      return cookingApplianceInfo;
    }

    private int GetDemand(double demandFactor1750to3500, double demandFactor3500to8750, List<UnitLoad> cookingApps)
    {
      var totalVA = 0;

      // Calculate totalVA for cookingApps with GetIndividual() value of 1750-3500
      var cookingApps1750to3500 = cookingApps.Where(app => app.GetIndividual() >= 1750 && app.GetIndividual() <= 3500);
      foreach (var app in cookingApps1750to3500)
      {
        totalVA += (int)Math.Round(app.GetTotal() * demandFactor1750to3500 / 100.0);
      }

      // Calculate totalVA for cookingApps with GetIndividual() value of 3500-8750
      var cookingApps3500to8750 = cookingApps.Where(app => app.GetIndividual() > 3500 && app.GetIndividual() <= 8750);
      foreach (var app in cookingApps3500to8750)
      {
        totalVA += (int)Math.Round(app.GetTotal() * demandFactor3500to8750 / 100.0);
      }

      return totalVA;
    }

    private double[] GetDemandFactorBuckets(int[] cookingAppBuckets)
    {
      var numOfApps1750to8750 = cookingAppBuckets[0];

      var demandFactorBuckets = new double[3];
      demandFactorBuckets[0] = GetDemandFactor(numOfApps1750to8750, "Column A");
      demandFactorBuckets[1] = GetDemandFactor(numOfApps1750to8750, "Column B");

      return demandFactorBuckets;
    }

    private int GetAverageLoadFor8750to27000()
    {
      var cookingApps8750to27000 = GetCookingAppliancesOver8750();
      int totalLoad = 0;
      int count = 0;

      foreach (var appliance in cookingApps8750to27000)
      {
        totalLoad += appliance.GetTotal();
        count += appliance.Multiplier;
      }

      if (count > 0)
      {
        return totalLoad / count;
      }
      else
      {
        return 0;
      }
    }

    private int[] GetCookingApplianceBuckets(List<UnitLoad> cookingApps)
    {
      var cookingApplianceBuckets = new int[2];
      foreach (var appliance in cookingApps)
      {
        int total = appliance.GetIndividual();
        if (total >= 1750 && total <= 8750)
        {
          cookingApplianceBuckets[0] += appliance.Multiplier;
        }
        else if (total > 8750 && total <= 27000)
        {
          cookingApplianceBuckets[1] += appliance.Multiplier;
        }
      }
      return cookingApplianceBuckets;
    }

    private double GetDemandFactor(int count, string column)
    {
      double[,] demandFactors = {
        {80, 80},
        {75, 65},
        {70, 55},
        {66, 50},
        {62, 45},
        {59, 43},
        {56, 40},
        {53, 36},
        {51, 35},
        {49, 34},
        {47, 32},
        {45, 32},
        {43, 32},
        {41, 32},
        {40, 32},
        {39, 28},
        {38, 28},
        {37, 28},
        {36, 28},
        {35, 28},
        {34, 28},
        {33, 26},
        {32, 26},
        {31, 26},
        {30, 26},
        {30, 24},
        {30, 24},
        {30, 24},
        {30, 24},
        {30, 24},
        {30, 22},
        {30, 22},
        {30, 22},
        {30, 22},
        {30, 22},
        {30, 22},
        {30, 22},
        {30, 22},
        {30, 22},
        {30, 22},
        {30, 20},
        {30, 20},
        {30, 20},
        {30, 20},
        {30, 20},
        {30, 20},
        {30, 20},
        {30, 20},
        {30, 20},
        {30, 20},
        {30, 18},
        {30, 18},
        {30, 18},
        {30, 18},
        {30, 18},
        {30, 18},
        {30, 18},
        {30, 18},
        {30, 18},
        {30, 18},
        {30, 16}
    };

      int rowIndex = count - 1;

      if (rowIndex > demandFactors.GetLength(0))
      {
        rowIndex = demandFactors.GetLength(0) - 1;
      }

      int columnIndex = column == "Column A" ? 0 : 1;

      if (rowIndex >= 0 && rowIndex < demandFactors.GetLength(0))
      {
        return demandFactors[rowIndex, columnIndex];
      }
      else
      {
        return 100;
      }
    }

    private int GetMaximumDemand(int count, int averageVA)
    {
      int averageKVA = (int)Math.Ceiling((double)averageVA / 1000);
      double[] maximumDemands = { 8, 11, 14, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 };

      int KVAover12 = averageKVA - 12;
      if (KVAover12 < 0)
      {
        KVAover12 = 0;
      }

      int percentIncrease = KVAover12 * 5;

      if (count > maximumDemands.GetLength(0) && count < 41)
      {
        return 15 + count;
      }
      else if (count > 40)
      {
        return 25 + 3 * count / 4;
      }

      if (count >= 1 && count <= maximumDemands.Length)
      {
        return (int)Math.Round(maximumDemands[count - 1] * (1.0 + percentIncrease / 100) * 1000);
      }
      else
      {
        return 0;
      }
    }
  }

  public class CookingApplianceInfo
  {
    public List<UnitLoad> CookingAppliances { get; set; }
    public List<UnitLoad> CookingAppliancesUnder8750 { get; set; }
    public List<UnitLoad> CookingAppliancesOver8750 { get; set; }

    public int NumberOfCookingAppliancesOver8750 { get; set; }
    public int NumberOfCookingAppliancesUnder8750 { get; set; }

    public double DemandFactor1750to3500 { get; set; }
    public double DemandFactor3500to8750 { get; set; }

    public double TotalDemandOver8750 { get; set; }
    public double TotalDemandUnder8750 { get; set; }
    public double TotalDemand { get; set; }
  }

  public enum LightingOccupancyType
  {
    Dwelling,
    HotelAndMotel,
    Warehouse,
    Other
  }

  public class UnitLoad
  {
    public int Multiplier { get; set; }
    public int Total { get; set; }
    public string Name { get; set; }
    public bool IsCookingAppliance { get; set; }

    public UnitLoad(string name, string total, string multiplier, bool isCookingAppliance = false)
    {
      Multiplier = string.IsNullOrEmpty(multiplier) ? 0 : int.TryParse(multiplier, out int multiplierResult) ? multiplierResult : 0;
      Total = string.IsNullOrEmpty(total) ? 0 : int.TryParse(total, out int totalResult) ? totalResult : 0;
      Name = name;
      IsCookingAppliance = isCookingAppliance;
    }

    public int GetTotal()
    {
      return Multiplier == 0 ? 0 : Total;
    }

    public int GetIndividual()
    {
      if (Multiplier == 0)
      {
        return 0;
      }
      return Total / Multiplier;
    }

    public string FormattedName()
    {
      return $"{Name}, {Total}, {Multiplier}";
    }
  }

  public class UnitACLoadContainer
  {
    public int Condenser { get; set; }
    public int FanCoil { get; set; }
    public HeatingUnit HeatingUnit { get; set; }
    public string ElectricalCode { get; set; }
  }

  public class UnitTotalContainer
  {
    public int TotalGeneralLoad { get; set; }
    public int TotalACLoad { get; set; }
    public int SubtotalGeneralLoad { get; set; }
    public int CustomLoad { get; set; }
    public int ServiceLoad { get; set; }

    public int First10KVA()
    {
      return TotalGeneralLoad > 10000 ? 10000 : TotalGeneralLoad;
    }

    public int RemainderAt40Percent()
    {
      return TotalGeneralLoad < 10000 ? 0 : (int)Math.Ceiling((TotalGeneralLoad - 10000) * 0.4);
    }

    public int AmountOver10KVA()
    {
      return TotalGeneralLoad < 10000 ? 0 : TotalGeneralLoad - 10000;
    }

    public int ServiceRating()
    {
      int[] possibleValues = { 30, 60, 100, 125, 150, 200, 400, 600, 800, 1000, 1200, 1600, 2000, 2500, 3000 };
      int totalAmperage = ServiceLoad;
      int? serviceRating = possibleValues.FirstOrDefault(value => value >= totalAmperage);

      if (serviceRating == 0)
      {
        serviceRating = 3000;
        int increment = 1000;
        while (serviceRating <= totalAmperage)
        {
          serviceRating += increment;
        }
      }

      return serviceRating ?? 0;
    }

    public int SubtotalOfUnitType()
    {
      return TotalACLoad + TotalGeneralLoad + CustomLoad;
    }
  }

  public class HeatingUnit
  {
    public int Heating { get; set; }
    public int NumberOfUnits { get; set; }
  }
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\LoadCalculations\Unit\LoadCalculationForm.Designer.cs 
﻿namespace GMEPElectricalResidential.LoadCalculations.Unit
{
  partial class LoadCalculationForm
  {
    /// <summary> 
    /// Required designer variable.
    /// </summary>
    private System.ComponentModel.IContainer components = null;

    /// <summary> 
    /// Clean up any resources being used.
    /// </summary>
    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    protected override void Dispose(bool disposing)
    {
      if (disposing && (components != null))
      {
        components.Dispose();
      }
      base.Dispose(disposing);
    }

    #region Component Designer generated code

    /// <summary> 
    /// Required method for Designer support - do not modify 
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {
      this.label1 = new System.Windows.Forms.Label();
      this.label2 = new System.Windows.Forms.Label();
      this.UNIT_NAME = new System.Windows.Forms.TextBox();
      this.label3 = new System.Windows.Forms.Label();
      this.VOLTAGE = new System.Windows.Forms.ComboBox();
      this.panel1 = new System.Windows.Forms.Panel();
      this.label4 = new System.Windows.Forms.Label();
      this.groupBox1 = new System.Windows.Forms.GroupBox();
      this.NA_HEATER = new System.Windows.Forms.RadioButton();
      this.GAS_HEATER = new System.Windows.Forms.RadioButton();
      this.ELECTRIC_HEATER = new System.Windows.Forms.RadioButton();
      this.groupBox2 = new System.Windows.Forms.GroupBox();
      this.NA_DRYER = new System.Windows.Forms.RadioButton();
      this.GAS_DRYER = new System.Windows.Forms.RadioButton();
      this.ELECTRIC_DRYER = new System.Windows.Forms.RadioButton();
      this.groupBox3 = new System.Windows.Forms.GroupBox();
      this.NA_OVEN = new System.Windows.Forms.RadioButton();
      this.GAS_OVEN = new System.Windows.Forms.RadioButton();
      this.ELECTRIC_OVEN = new System.Windows.Forms.RadioButton();
      this.groupBox4 = new System.Windows.Forms.GroupBox();
      this.NA_COOKTOP = new System.Windows.Forms.RadioButton();
      this.GAS_COOKTOP = new System.Windows.Forms.RadioButton();
      this.ELECTRIC_COOKTOP = new System.Windows.Forms.RadioButton();
      this.panel2 = new System.Windows.Forms.Panel();
      this.AREA = new System.Windows.Forms.TextBox();
      this.label5 = new System.Windows.Forms.Label();
      this.panel13 = new System.Windows.Forms.Panel();
      this.GENERAL_CUSTOM_NAME = new System.Windows.Forms.TextBox();
      this.GENERAL_CUSTOM_MULTIPLIER = new System.Windows.Forms.ComboBox();
      this.label23 = new System.Windows.Forms.Label();
      this.label25 = new System.Windows.Forms.Label();
      this.label29 = new System.Windows.Forms.Label();
      this.panel30 = new System.Windows.Forms.Panel();
      this.OUTDOOR_CONDENSER_VA = new System.Windows.Forms.TextBox();
      this.label30 = new System.Windows.Forms.Label();
      this.panel31 = new System.Windows.Forms.Panel();
      this.INDOOR_FAN_COIL_VA = new System.Windows.Forms.TextBox();
      this.label31 = new System.Windows.Forms.Label();
      this.GENERAL_LIGHTING_TITLE = new System.Windows.Forms.Label();
      this.GENERAL_CUSTOM_LOAD_BOX = new System.Windows.Forms.ListBox();
      this.ADD_ENTRY = new System.Windows.Forms.Button();
      this.REMOVE_ENTRY = new System.Windows.Forms.Button();
      this.REMOVE_ENTRY_CUSTOM = new System.Windows.Forms.Button();
      this.CUSTOM_LOAD_BOX = new System.Windows.Forms.ListBox();
      this.label16 = new System.Windows.Forms.Label();
      this.TOTAL_GENERAL_LOAD_CALCULATION = new System.Windows.Forms.Label();
      this.SUBTOTAL_GENERAL_LOAD_CALCULATION = new System.Windows.Forms.Label();
      this.label27 = new System.Windows.Forms.Label();
      this.TOTAL_AC_LOAD_CALCULATION = new System.Windows.Forms.Label();
      this.label26 = new System.Windows.Forms.Label();
      this.CALCULATED_LOAD_FOR_SERVICE = new System.Windows.Forms.Label();
      this.label28 = new System.Windows.Forms.Label();
      this.label34 = new System.Windows.Forms.Label();
      this.label62 = new System.Windows.Forms.Label();
      this.label68 = new System.Windows.Forms.Label();
      this.label69 = new System.Windows.Forms.Label();
      this.label72 = new System.Windows.Forms.Label();
      this.panel20 = new System.Windows.Forms.Panel();
      this.OUTDOOR_HEATER_UNIT = new System.Windows.Forms.TextBox();
      this.label73 = new System.Windows.Forms.Label();
      this.OUTDOOR_HEATER_UNIT_AMOUNT = new System.Windows.Forms.ComboBox();
      this.label64 = new System.Windows.Forms.Label();
      this.label75 = new System.Windows.Forms.Label();
      this.ESTIMATE_CONDENSER = new System.Windows.Forms.Button();
      this.ESTIMATE_FAN_COIL = new System.Windows.Forms.Button();
      this.TOTAL_CUSTOM_LOAD_CALCULATION = new System.Windows.Forms.Label();
      this.label76 = new System.Windows.Forms.Label();
      this.GENERAL_LIGHTING_TOTAL_VA_LABEL = new System.Windows.Forms.Label();
      this.GENERAL_LIGHTING_TOTAL = new System.Windows.Forms.Label();
      this.GENERAL_LIGHTING_GROUP_BOX = new System.Windows.Forms.GroupBox();
      this.LIGHTING_OTHER = new System.Windows.Forms.RadioButton();
      this.LIGHTING_WAREHOUSE = new System.Windows.Forms.RadioButton();
      this.LIGHTING_HOTEL_MOTEL = new System.Windows.Forms.RadioButton();
      this.LIGHTING_DWELLING = new System.Windows.Forms.RadioButton();
      this.label63 = new System.Windows.Forms.Label();
      this.label74 = new System.Windows.Forms.Label();
      this.label77 = new System.Windows.Forms.Label();
      this.label78 = new System.Windows.Forms.Label();
      this.label80 = new System.Windows.Forms.Label();
      this.label10 = new System.Windows.Forms.Label();
      this.label12 = new System.Windows.Forms.Label();
      this.label13 = new System.Windows.Forms.Label();
      this.label15 = new System.Windows.Forms.Label();
      this.label20 = new System.Windows.Forms.Label();
      this.panel6 = new System.Windows.Forms.Panel();
      this.CUSTOM_NAME = new System.Windows.Forms.TextBox();
      this.CUSTOM_MULTIPLIER = new System.Windows.Forms.ComboBox();
      this.CUSTOM_TOTAL = new System.Windows.Forms.TextBox();
      this.panel4 = new System.Windows.Forms.Panel();
      this.TOTAL_CUSTOM_LABEL = new System.Windows.Forms.Label();
      this.label17 = new System.Windows.Forms.Label();
      this.GENERAL_CUSTOM_TOTAL = new System.Windows.Forms.TextBox();
      this.panel3 = new System.Windows.Forms.Panel();
      this.TOTAL_GENERAL_LABEL = new System.Windows.Forms.Label();
      this.label9 = new System.Windows.Forms.Label();
      this.ADD_ENTRY_CUSTOM = new System.Windows.Forms.Button();
      this.COOKING_APPLIANCE = new System.Windows.Forms.Button();
      this.DEMAND_40PC = new System.Windows.Forms.CheckBox();
      this.panel1.SuspendLayout();
      this.groupBox1.SuspendLayout();
      this.groupBox2.SuspendLayout();
      this.groupBox3.SuspendLayout();
      this.groupBox4.SuspendLayout();
      this.panel2.SuspendLayout();
      this.panel13.SuspendLayout();
      this.panel30.SuspendLayout();
      this.panel31.SuspendLayout();
      this.panel20.SuspendLayout();
      this.GENERAL_LIGHTING_GROUP_BOX.SuspendLayout();
      this.panel6.SuspendLayout();
      this.panel4.SuspendLayout();
      this.panel3.SuspendLayout();
      this.SuspendLayout();
      // 
      // label1
      // 
      this.label1.AutoSize = true;
      this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif", 15.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label1.Location = new System.Drawing.Point(15, 12);
      this.label1.Margin = new System.Windows.Forms.Padding(0, 0, 0, 12);
      this.label1.Name = "label1";
      this.label1.Size = new System.Drawing.Size(129, 25);
      this.label1.TabIndex = 0;
      this.label1.Text = "Information";
      // 
      // label2
      // 
      this.label2.AutoSize = true;
      this.label2.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label2.Location = new System.Drawing.Point(16, 49);
      this.label2.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label2.Name = "label2";
      this.label2.Size = new System.Drawing.Size(98, 24);
      this.label2.TabIndex = 1;
      this.label2.Text = "Unit Name";
      // 
      // UNIT_NAME
      // 
      this.UNIT_NAME.BorderStyle = System.Windows.Forms.BorderStyle.None;
      this.UNIT_NAME.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.UNIT_NAME.Location = new System.Drawing.Point(5, 5);
      this.UNIT_NAME.Margin = new System.Windows.Forms.Padding(0);
      this.UNIT_NAME.Name = "UNIT_NAME";
      this.UNIT_NAME.Size = new System.Drawing.Size(86, 19);
      this.UNIT_NAME.TabIndex = 0;
      this.UNIT_NAME.TextChanged += new System.EventHandler(this.UNIT_NAME_TextChanged);
      // 
      // label3
      // 
      this.label3.AutoSize = true;
      this.label3.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label3.Location = new System.Drawing.Point(16, 116);
      this.label3.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label3.Name = "label3";
      this.label3.Size = new System.Drawing.Size(74, 24);
      this.label3.TabIndex = 3;
      this.label3.Text = "Voltage";
      // 
      // VOLTAGE
      // 
      this.VOLTAGE.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
      this.VOLTAGE.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.VOLTAGE.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.VOLTAGE.FormattingEnabled = true;
      this.VOLTAGE.Items.AddRange(new object[] {
            "208V",
            "240V"});
      this.VOLTAGE.Location = new System.Drawing.Point(18, 143);
      this.VOLTAGE.Margin = new System.Windows.Forms.Padding(6, 0, 48, 24);
      this.VOLTAGE.Name = "VOLTAGE";
      this.VOLTAGE.Size = new System.Drawing.Size(97, 28);
      this.VOLTAGE.TabIndex = 1;
      // 
      // panel1
      // 
      this.panel1.BackColor = System.Drawing.SystemColors.Window;
      this.panel1.Controls.Add(this.UNIT_NAME);
      this.panel1.Location = new System.Drawing.Point(18, 76);
      this.panel1.Margin = new System.Windows.Forms.Padding(6, 0, 48, 12);
      this.panel1.Name = "panel1";
      this.panel1.Padding = new System.Windows.Forms.Padding(5);
      this.panel1.Size = new System.Drawing.Size(97, 28);
      this.panel1.TabIndex = 0;
      // 
      // label4
      // 
      this.label4.AutoSize = true;
      this.label4.Font = new System.Drawing.Font("Microsoft Sans Serif", 15.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label4.Location = new System.Drawing.Point(15, 195);
      this.label4.Margin = new System.Windows.Forms.Padding(0, 0, 0, 12);
      this.label4.Name = "label4";
      this.label4.Size = new System.Drawing.Size(157, 25);
      this.label4.TabIndex = 6;
      this.label4.Text = "Dwelling Area";
      // 
      // groupBox1
      // 
      this.groupBox1.Controls.Add(this.NA_HEATER);
      this.groupBox1.Controls.Add(this.GAS_HEATER);
      this.groupBox1.Controls.Add(this.ELECTRIC_HEATER);
      this.groupBox1.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.groupBox1.Location = new System.Drawing.Point(15, 302);
      this.groupBox1.Name = "groupBox1";
      this.groupBox1.Size = new System.Drawing.Size(206, 62);
      this.groupBox1.TabIndex = 3;
      this.groupBox1.TabStop = false;
      this.groupBox1.Text = "Heater";
      // 
      // NA_HEATER
      // 
      this.NA_HEATER.AutoSize = true;
      this.NA_HEATER.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.NA_HEATER.Location = new System.Drawing.Point(156, 29);
      this.NA_HEATER.Name = "NA_HEATER";
      this.NA_HEATER.Size = new System.Drawing.Size(49, 24);
      this.NA_HEATER.TabIndex = 10;
      this.NA_HEATER.Text = "NA";
      this.NA_HEATER.UseVisualStyleBackColor = true;
      this.NA_HEATER.CheckedChanged += new System.EventHandler(this.NA_HEATER_CheckedChanged);
      // 
      // GAS_HEATER
      // 
      this.GAS_HEATER.AutoSize = true;
      this.GAS_HEATER.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.GAS_HEATER.Location = new System.Drawing.Point(93, 29);
      this.GAS_HEATER.Name = "GAS_HEATER";
      this.GAS_HEATER.Size = new System.Drawing.Size(57, 24);
      this.GAS_HEATER.TabIndex = 9;
      this.GAS_HEATER.Text = "Gas";
      this.GAS_HEATER.UseVisualStyleBackColor = true;
      this.GAS_HEATER.CheckedChanged += new System.EventHandler(this.GAS_HEATER_CheckedChanged);
      // 
      // ELECTRIC_HEATER
      // 
      this.ELECTRIC_HEATER.AutoSize = true;
      this.ELECTRIC_HEATER.Checked = true;
      this.ELECTRIC_HEATER.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.ELECTRIC_HEATER.Location = new System.Drawing.Point(8, 28);
      this.ELECTRIC_HEATER.Name = "ELECTRIC_HEATER";
      this.ELECTRIC_HEATER.Size = new System.Drawing.Size(79, 24);
      this.ELECTRIC_HEATER.TabIndex = 8;
      this.ELECTRIC_HEATER.TabStop = true;
      this.ELECTRIC_HEATER.Text = "Electric";
      this.ELECTRIC_HEATER.UseVisualStyleBackColor = true;
      this.ELECTRIC_HEATER.CheckedChanged += new System.EventHandler(this.ELECTRIC_HEATER_CheckedChanged);
      // 
      // groupBox2
      // 
      this.groupBox2.Controls.Add(this.NA_DRYER);
      this.groupBox2.Controls.Add(this.GAS_DRYER);
      this.groupBox2.Controls.Add(this.ELECTRIC_DRYER);
      this.groupBox2.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.groupBox2.Location = new System.Drawing.Point(15, 370);
      this.groupBox2.Name = "groupBox2";
      this.groupBox2.Size = new System.Drawing.Size(206, 62);
      this.groupBox2.TabIndex = 4;
      this.groupBox2.TabStop = false;
      this.groupBox2.Text = "Dryer";
      // 
      // NA_DRYER
      // 
      this.NA_DRYER.AutoSize = true;
      this.NA_DRYER.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.NA_DRYER.Location = new System.Drawing.Point(156, 30);
      this.NA_DRYER.Name = "NA_DRYER";
      this.NA_DRYER.Size = new System.Drawing.Size(49, 24);
      this.NA_DRYER.TabIndex = 11;
      this.NA_DRYER.Text = "NA";
      this.NA_DRYER.UseVisualStyleBackColor = true;
      this.NA_DRYER.CheckedChanged += new System.EventHandler(this.NA_DRYER_CheckedChanged);
      // 
      // GAS_DRYER
      // 
      this.GAS_DRYER.AutoSize = true;
      this.GAS_DRYER.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.GAS_DRYER.Location = new System.Drawing.Point(93, 29);
      this.GAS_DRYER.Name = "GAS_DRYER";
      this.GAS_DRYER.Size = new System.Drawing.Size(57, 24);
      this.GAS_DRYER.TabIndex = 9;
      this.GAS_DRYER.Text = "Gas";
      this.GAS_DRYER.UseVisualStyleBackColor = true;
      this.GAS_DRYER.CheckedChanged += new System.EventHandler(this.GAS_DRYER_CheckedChanged);
      // 
      // ELECTRIC_DRYER
      // 
      this.ELECTRIC_DRYER.AutoSize = true;
      this.ELECTRIC_DRYER.Checked = true;
      this.ELECTRIC_DRYER.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.ELECTRIC_DRYER.Location = new System.Drawing.Point(8, 28);
      this.ELECTRIC_DRYER.Name = "ELECTRIC_DRYER";
      this.ELECTRIC_DRYER.Size = new System.Drawing.Size(79, 24);
      this.ELECTRIC_DRYER.TabIndex = 8;
      this.ELECTRIC_DRYER.TabStop = true;
      this.ELECTRIC_DRYER.Text = "Electric";
      this.ELECTRIC_DRYER.UseVisualStyleBackColor = true;
      this.ELECTRIC_DRYER.CheckedChanged += new System.EventHandler(this.ELECTRIC_DRYER_CheckedChanged);
      // 
      // groupBox3
      // 
      this.groupBox3.Controls.Add(this.NA_OVEN);
      this.groupBox3.Controls.Add(this.GAS_OVEN);
      this.groupBox3.Controls.Add(this.ELECTRIC_OVEN);
      this.groupBox3.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.groupBox3.Location = new System.Drawing.Point(15, 438);
      this.groupBox3.Name = "groupBox3";
      this.groupBox3.Size = new System.Drawing.Size(205, 62);
      this.groupBox3.TabIndex = 5;
      this.groupBox3.TabStop = false;
      this.groupBox3.Text = "Oven";
      // 
      // NA_OVEN
      // 
      this.NA_OVEN.AutoSize = true;
      this.NA_OVEN.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.NA_OVEN.Location = new System.Drawing.Point(156, 29);
      this.NA_OVEN.Name = "NA_OVEN";
      this.NA_OVEN.Size = new System.Drawing.Size(49, 24);
      this.NA_OVEN.TabIndex = 12;
      this.NA_OVEN.Text = "NA";
      this.NA_OVEN.UseVisualStyleBackColor = true;
      this.NA_OVEN.CheckedChanged += new System.EventHandler(this.NA_OVEN_CheckedChanged);
      // 
      // GAS_OVEN
      // 
      this.GAS_OVEN.AutoSize = true;
      this.GAS_OVEN.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.GAS_OVEN.Location = new System.Drawing.Point(93, 29);
      this.GAS_OVEN.Name = "GAS_OVEN";
      this.GAS_OVEN.Size = new System.Drawing.Size(57, 24);
      this.GAS_OVEN.TabIndex = 9;
      this.GAS_OVEN.Text = "Gas";
      this.GAS_OVEN.UseVisualStyleBackColor = true;
      this.GAS_OVEN.CheckedChanged += new System.EventHandler(this.GAS_OVEN_CheckedChanged);
      // 
      // ELECTRIC_OVEN
      // 
      this.ELECTRIC_OVEN.AutoSize = true;
      this.ELECTRIC_OVEN.Checked = true;
      this.ELECTRIC_OVEN.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.ELECTRIC_OVEN.Location = new System.Drawing.Point(8, 28);
      this.ELECTRIC_OVEN.Name = "ELECTRIC_OVEN";
      this.ELECTRIC_OVEN.Size = new System.Drawing.Size(79, 24);
      this.ELECTRIC_OVEN.TabIndex = 8;
      this.ELECTRIC_OVEN.TabStop = true;
      this.ELECTRIC_OVEN.Text = "Electric";
      this.ELECTRIC_OVEN.UseVisualStyleBackColor = true;
      this.ELECTRIC_OVEN.CheckedChanged += new System.EventHandler(this.ELECTRIC_OVEN_CheckedChanged);
      // 
      // groupBox4
      // 
      this.groupBox4.Controls.Add(this.NA_COOKTOP);
      this.groupBox4.Controls.Add(this.GAS_COOKTOP);
      this.groupBox4.Controls.Add(this.ELECTRIC_COOKTOP);
      this.groupBox4.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.groupBox4.Location = new System.Drawing.Point(15, 506);
      this.groupBox4.Name = "groupBox4";
      this.groupBox4.Size = new System.Drawing.Size(205, 62);
      this.groupBox4.TabIndex = 6;
      this.groupBox4.TabStop = false;
      this.groupBox4.Text = "Cooktop";
      // 
      // NA_COOKTOP
      // 
      this.NA_COOKTOP.AutoSize = true;
      this.NA_COOKTOP.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.NA_COOKTOP.Location = new System.Drawing.Point(156, 29);
      this.NA_COOKTOP.Name = "NA_COOKTOP";
      this.NA_COOKTOP.Size = new System.Drawing.Size(49, 24);
      this.NA_COOKTOP.TabIndex = 13;
      this.NA_COOKTOP.Text = "NA";
      this.NA_COOKTOP.UseVisualStyleBackColor = true;
      this.NA_COOKTOP.CheckedChanged += new System.EventHandler(this.NA_COOKTOP_CheckedChanged);
      // 
      // GAS_COOKTOP
      // 
      this.GAS_COOKTOP.AutoSize = true;
      this.GAS_COOKTOP.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.GAS_COOKTOP.Location = new System.Drawing.Point(93, 29);
      this.GAS_COOKTOP.Name = "GAS_COOKTOP";
      this.GAS_COOKTOP.Size = new System.Drawing.Size(57, 24);
      this.GAS_COOKTOP.TabIndex = 9;
      this.GAS_COOKTOP.Text = "Gas";
      this.GAS_COOKTOP.UseVisualStyleBackColor = true;
      this.GAS_COOKTOP.CheckedChanged += new System.EventHandler(this.GAS_COOKTOP_CheckedChanged);
      // 
      // ELECTRIC_COOKTOP
      // 
      this.ELECTRIC_COOKTOP.AutoSize = true;
      this.ELECTRIC_COOKTOP.Checked = true;
      this.ELECTRIC_COOKTOP.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.ELECTRIC_COOKTOP.Location = new System.Drawing.Point(8, 28);
      this.ELECTRIC_COOKTOP.Name = "ELECTRIC_COOKTOP";
      this.ELECTRIC_COOKTOP.Size = new System.Drawing.Size(79, 24);
      this.ELECTRIC_COOKTOP.TabIndex = 8;
      this.ELECTRIC_COOKTOP.TabStop = true;
      this.ELECTRIC_COOKTOP.Text = "Electric";
      this.ELECTRIC_COOKTOP.UseVisualStyleBackColor = true;
      this.ELECTRIC_COOKTOP.CheckedChanged += new System.EventHandler(this.ELECTRIC_COOKTOP_CheckedChanged);
      // 
      // panel2
      // 
      this.panel2.BackColor = System.Drawing.SystemColors.Window;
      this.panel2.Controls.Add(this.AREA);
      this.panel2.Location = new System.Drawing.Point(18, 259);
      this.panel2.Margin = new System.Windows.Forms.Padding(6, 0, 0, 12);
      this.panel2.Name = "panel2";
      this.panel2.Padding = new System.Windows.Forms.Padding(5);
      this.panel2.Size = new System.Drawing.Size(96, 28);
      this.panel2.TabIndex = 2;
      // 
      // AREA
      // 
      this.AREA.BorderStyle = System.Windows.Forms.BorderStyle.None;
      this.AREA.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.AREA.Location = new System.Drawing.Point(5, 5);
      this.AREA.Margin = new System.Windows.Forms.Padding(0);
      this.AREA.Name = "AREA";
      this.AREA.Size = new System.Drawing.Size(86, 19);
      this.AREA.TabIndex = 0;
      this.AREA.Text = "0";
      this.AREA.TextChanged += new System.EventHandler(this.AREA_TextChanged);
      // 
      // label5
      // 
      this.label5.AutoSize = true;
      this.label5.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label5.Location = new System.Drawing.Point(16, 232);
      this.label5.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label5.Name = "label5";
      this.label5.Size = new System.Drawing.Size(99, 24);
      this.label5.TabIndex = 13;
      this.label5.Text = "Floor Area";
      // 
      // panel13
      // 
      this.panel13.BackColor = System.Drawing.SystemColors.Window;
      this.panel13.Controls.Add(this.GENERAL_CUSTOM_NAME);
      this.panel13.Location = new System.Drawing.Point(263, 546);
      this.panel13.Margin = new System.Windows.Forms.Padding(48, 0, 3, 12);
      this.panel13.Name = "panel13";
      this.panel13.Padding = new System.Windows.Forms.Padding(5);
      this.panel13.Size = new System.Drawing.Size(236, 28);
      this.panel13.TabIndex = 9;
      // 
      // GENERAL_CUSTOM_NAME
      // 
      this.GENERAL_CUSTOM_NAME.BorderStyle = System.Windows.Forms.BorderStyle.None;
      this.GENERAL_CUSTOM_NAME.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.GENERAL_CUSTOM_NAME.Location = new System.Drawing.Point(5, 5);
      this.GENERAL_CUSTOM_NAME.Margin = new System.Windows.Forms.Padding(0);
      this.GENERAL_CUSTOM_NAME.Name = "GENERAL_CUSTOM_NAME";
      this.GENERAL_CUSTOM_NAME.Size = new System.Drawing.Size(226, 19);
      this.GENERAL_CUSTOM_NAME.TabIndex = 2;
      // 
      // GENERAL_CUSTOM_MULTIPLIER
      // 
      this.GENERAL_CUSTOM_MULTIPLIER.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.GENERAL_CUSTOM_MULTIPLIER.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.GENERAL_CUSTOM_MULTIPLIER.FormattingEnabled = true;
      this.GENERAL_CUSTOM_MULTIPLIER.Items.AddRange(new object[] {
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25"});
      this.GENERAL_CUSTOM_MULTIPLIER.Location = new System.Drawing.Point(636, 546);
      this.GENERAL_CUSTOM_MULTIPLIER.Margin = new System.Windows.Forms.Padding(0);
      this.GENERAL_CUSTOM_MULTIPLIER.Name = "GENERAL_CUSTOM_MULTIPLIER";
      this.GENERAL_CUSTOM_MULTIPLIER.Size = new System.Drawing.Size(56, 28);
      this.GENERAL_CUSTOM_MULTIPLIER.TabIndex = 11;
      this.GENERAL_CUSTOM_MULTIPLIER.Text = "1";
      // 
      // label23
      // 
      this.label23.AutoSize = true;
      this.label23.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label23.Location = new System.Drawing.Point(260, 116);
      this.label23.Margin = new System.Windows.Forms.Padding(0, 0, 0, 12);
      this.label23.Name = "label23";
      this.label23.Size = new System.Drawing.Size(400, 24);
      this.label23.TabIndex = 64;
      this.label23.Text = "General Load (VA) - Name, Total, Amount";
      // 
      // label25
      // 
      this.label25.AutoSize = true;
      this.label25.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label25.Location = new System.Drawing.Point(771, 10);
      this.label25.Margin = new System.Windows.Forms.Padding(0, 0, 0, 12);
      this.label25.Name = "label25";
      this.label25.Size = new System.Drawing.Size(396, 24);
      this.label25.TabIndex = 81;
      this.label25.Text = "Custom Load (VA) - Name, Total, Amount";
      // 
      // label29
      // 
      this.label29.AutoSize = true;
      this.label29.Font = new System.Drawing.Font("Microsoft Sans Serif", 15.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label29.Location = new System.Drawing.Point(1265, 9);
      this.label29.Margin = new System.Windows.Forms.Padding(0, 0, 0, 12);
      this.label29.Name = "label29";
      this.label29.Size = new System.Drawing.Size(221, 25);
      this.label29.TabIndex = 87;
      this.label29.Text = "AC Calculation (VA)";
      // 
      // panel30
      // 
      this.panel30.BackColor = System.Drawing.SystemColors.Window;
      this.panel30.Controls.Add(this.OUTDOOR_CONDENSER_VA);
      this.panel30.Location = new System.Drawing.Point(1268, 73);
      this.panel30.Margin = new System.Windows.Forms.Padding(48, 0, 3, 12);
      this.panel30.Name = "panel30";
      this.panel30.Padding = new System.Windows.Forms.Padding(5);
      this.panel30.Size = new System.Drawing.Size(108, 28);
      this.panel30.TabIndex = 20;
      // 
      // OUTDOOR_CONDENSER_VA
      // 
      this.OUTDOOR_CONDENSER_VA.BorderStyle = System.Windows.Forms.BorderStyle.None;
      this.OUTDOOR_CONDENSER_VA.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.OUTDOOR_CONDENSER_VA.Location = new System.Drawing.Point(5, 5);
      this.OUTDOOR_CONDENSER_VA.Margin = new System.Windows.Forms.Padding(0);
      this.OUTDOOR_CONDENSER_VA.Name = "OUTDOOR_CONDENSER_VA";
      this.OUTDOOR_CONDENSER_VA.Size = new System.Drawing.Size(98, 19);
      this.OUTDOOR_CONDENSER_VA.TabIndex = 2;
      this.OUTDOOR_CONDENSER_VA.Text = "0";
      // 
      // label30
      // 
      this.label30.AutoSize = true;
      this.label30.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label30.Location = new System.Drawing.Point(1266, 46);
      this.label30.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label30.Name = "label30";
      this.label30.Size = new System.Drawing.Size(268, 20);
      this.label30.TabIndex = 88;
      this.label30.Text = "Total Outdoor Condensing Unit Load";
      // 
      // panel31
      // 
      this.panel31.BackColor = System.Drawing.SystemColors.Window;
      this.panel31.Controls.Add(this.INDOOR_FAN_COIL_VA);
      this.panel31.Location = new System.Drawing.Point(1268, 140);
      this.panel31.Margin = new System.Windows.Forms.Padding(48, 0, 3, 12);
      this.panel31.Name = "panel31";
      this.panel31.Padding = new System.Windows.Forms.Padding(5);
      this.panel31.Size = new System.Drawing.Size(108, 28);
      this.panel31.TabIndex = 22;
      // 
      // INDOOR_FAN_COIL_VA
      // 
      this.INDOOR_FAN_COIL_VA.BorderStyle = System.Windows.Forms.BorderStyle.None;
      this.INDOOR_FAN_COIL_VA.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.INDOOR_FAN_COIL_VA.Location = new System.Drawing.Point(5, 5);
      this.INDOOR_FAN_COIL_VA.Margin = new System.Windows.Forms.Padding(0);
      this.INDOOR_FAN_COIL_VA.Name = "INDOOR_FAN_COIL_VA";
      this.INDOOR_FAN_COIL_VA.Size = new System.Drawing.Size(98, 19);
      this.INDOOR_FAN_COIL_VA.TabIndex = 2;
      this.INDOOR_FAN_COIL_VA.Text = "0";
      // 
      // label31
      // 
      this.label31.AutoSize = true;
      this.label31.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label31.Location = new System.Drawing.Point(1266, 113);
      this.label31.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label31.Name = "label31";
      this.label31.Size = new System.Drawing.Size(229, 20);
      this.label31.TabIndex = 90;
      this.label31.Text = "Total Indoor Fan Coil Unit Load";
      // 
      // GENERAL_LIGHTING_TITLE
      // 
      this.GENERAL_LIGHTING_TITLE.AutoSize = true;
      this.GENERAL_LIGHTING_TITLE.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.GENERAL_LIGHTING_TITLE.Location = new System.Drawing.Point(264, 13);
      this.GENERAL_LIGHTING_TITLE.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.GENERAL_LIGHTING_TITLE.Name = "GENERAL_LIGHTING_TITLE";
      this.GENERAL_LIGHTING_TITLE.Size = new System.Drawing.Size(148, 24);
      this.GENERAL_LIGHTING_TITLE.TabIndex = 94;
      this.GENERAL_LIGHTING_TITLE.Text = "General Lighting";
      this.GENERAL_LIGHTING_TITLE.Visible = false;
      // 
      // GENERAL_CUSTOM_LOAD_BOX
      // 
      this.GENERAL_CUSTOM_LOAD_BOX.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
      this.GENERAL_CUSTOM_LOAD_BOX.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.GENERAL_CUSTOM_LOAD_BOX.FormattingEnabled = true;
      this.GENERAL_CUSTOM_LOAD_BOX.ItemHeight = 20;
      this.GENERAL_CUSTOM_LOAD_BOX.Location = new System.Drawing.Point(264, 161);
      this.GENERAL_CUSTOM_LOAD_BOX.Name = "GENERAL_CUSTOM_LOAD_BOX";
      this.GENERAL_CUSTOM_LOAD_BOX.Size = new System.Drawing.Size(434, 362);
      this.GENERAL_CUSTOM_LOAD_BOX.TabIndex = 8;
      // 
      // ADD_ENTRY
      // 
      this.ADD_ENTRY.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.ADD_ENTRY.Location = new System.Drawing.Point(263, 582);
      this.ADD_ENTRY.Name = "ADD_ENTRY";
      this.ADD_ENTRY.Size = new System.Drawing.Size(108, 28);
      this.ADD_ENTRY.TabIndex = 12;
      this.ADD_ENTRY.Text = "Add/Update";
      this.ADD_ENTRY.UseVisualStyleBackColor = true;
      this.ADD_ENTRY.Click += new System.EventHandler(this.ADD_ENTRY_Click);
      // 
      // REMOVE_ENTRY
      // 
      this.REMOVE_ENTRY.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.REMOVE_ENTRY.Location = new System.Drawing.Point(377, 582);
      this.REMOVE_ENTRY.Name = "REMOVE_ENTRY";
      this.REMOVE_ENTRY.Size = new System.Drawing.Size(88, 28);
      this.REMOVE_ENTRY.TabIndex = 13;
      this.REMOVE_ENTRY.Text = "Remove";
      this.REMOVE_ENTRY.UseVisualStyleBackColor = true;
      this.REMOVE_ENTRY.Click += new System.EventHandler(this.REMOVE_ENTRY_Click);
      // 
      // REMOVE_ENTRY_CUSTOM
      // 
      this.REMOVE_ENTRY_CUSTOM.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.REMOVE_ENTRY_CUSTOM.Location = new System.Drawing.Point(889, 582);
      this.REMOVE_ENTRY_CUSTOM.Name = "REMOVE_ENTRY_CUSTOM";
      this.REMOVE_ENTRY_CUSTOM.Size = new System.Drawing.Size(88, 28);
      this.REMOVE_ENTRY_CUSTOM.TabIndex = 19;
      this.REMOVE_ENTRY_CUSTOM.Text = "Remove";
      this.REMOVE_ENTRY_CUSTOM.UseVisualStyleBackColor = true;
      this.REMOVE_ENTRY_CUSTOM.Click += new System.EventHandler(this.REMOVE_ENTRY_CUSTOM_Click);
      // 
      // CUSTOM_LOAD_BOX
      // 
      this.CUSTOM_LOAD_BOX.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
      this.CUSTOM_LOAD_BOX.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.CUSTOM_LOAD_BOX.FormattingEnabled = true;
      this.CUSTOM_LOAD_BOX.ItemHeight = 20;
      this.CUSTOM_LOAD_BOX.Location = new System.Drawing.Point(775, 61);
      this.CUSTOM_LOAD_BOX.Name = "CUSTOM_LOAD_BOX";
      this.CUSTOM_LOAD_BOX.Size = new System.Drawing.Size(440, 462);
      this.CUSTOM_LOAD_BOX.TabIndex = 14;
      // 
      // label16
      // 
      this.label16.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label16.Location = new System.Drawing.Point(1264, 390);
      this.label16.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label16.Name = "label16";
      this.label16.Size = new System.Drawing.Size(245, 21);
      this.label16.TabIndex = 106;
      this.label16.Text = "Total General Load Calculation";
      // 
      // TOTAL_GENERAL_LOAD_CALCULATION
      // 
      this.TOTAL_GENERAL_LOAD_CALCULATION.AutoSize = true;
      this.TOTAL_GENERAL_LOAD_CALCULATION.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.TOTAL_GENERAL_LOAD_CALCULATION.Location = new System.Drawing.Point(1264, 411);
      this.TOTAL_GENERAL_LOAD_CALCULATION.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.TOTAL_GENERAL_LOAD_CALCULATION.Name = "TOTAL_GENERAL_LOAD_CALCULATION";
      this.TOTAL_GENERAL_LOAD_CALCULATION.Size = new System.Drawing.Size(19, 20);
      this.TOTAL_GENERAL_LOAD_CALCULATION.TabIndex = 107;
      this.TOTAL_GENERAL_LOAD_CALCULATION.Text = "0";
      // 
      // SUBTOTAL_GENERAL_LOAD_CALCULATION
      // 
      this.SUBTOTAL_GENERAL_LOAD_CALCULATION.AutoSize = true;
      this.SUBTOTAL_GENERAL_LOAD_CALCULATION.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.SUBTOTAL_GENERAL_LOAD_CALCULATION.Location = new System.Drawing.Point(1264, 498);
      this.SUBTOTAL_GENERAL_LOAD_CALCULATION.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.SUBTOTAL_GENERAL_LOAD_CALCULATION.Name = "SUBTOTAL_GENERAL_LOAD_CALCULATION";
      this.SUBTOTAL_GENERAL_LOAD_CALCULATION.Size = new System.Drawing.Size(19, 20);
      this.SUBTOTAL_GENERAL_LOAD_CALCULATION.TabIndex = 109;
      this.SUBTOTAL_GENERAL_LOAD_CALCULATION.Text = "0";
      // 
      // label27
      // 
      this.label27.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label27.Location = new System.Drawing.Point(1264, 478);
      this.label27.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label27.Name = "label27";
      this.label27.Size = new System.Drawing.Size(269, 22);
      this.label27.TabIndex = 108;
      this.label27.Text = "Subtotal General Load Calculation";
      // 
      // TOTAL_AC_LOAD_CALCULATION
      // 
      this.TOTAL_AC_LOAD_CALCULATION.AutoSize = true;
      this.TOTAL_AC_LOAD_CALCULATION.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.TOTAL_AC_LOAD_CALCULATION.Location = new System.Drawing.Point(1264, 455);
      this.TOTAL_AC_LOAD_CALCULATION.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.TOTAL_AC_LOAD_CALCULATION.Name = "TOTAL_AC_LOAD_CALCULATION";
      this.TOTAL_AC_LOAD_CALCULATION.Size = new System.Drawing.Size(19, 20);
      this.TOTAL_AC_LOAD_CALCULATION.TabIndex = 111;
      this.TOTAL_AC_LOAD_CALCULATION.Text = "0";
      // 
      // label26
      // 
      this.label26.AutoSize = true;
      this.label26.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label26.Location = new System.Drawing.Point(1264, 434);
      this.label26.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label26.Name = "label26";
      this.label26.Size = new System.Drawing.Size(192, 20);
      this.label26.TabIndex = 110;
      this.label26.Text = "Total AC Load Calculation";
      // 
      // CALCULATED_LOAD_FOR_SERVICE
      // 
      this.CALCULATED_LOAD_FOR_SERVICE.AutoSize = true;
      this.CALCULATED_LOAD_FOR_SERVICE.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.CALCULATED_LOAD_FOR_SERVICE.Location = new System.Drawing.Point(1264, 585);
      this.CALCULATED_LOAD_FOR_SERVICE.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.CALCULATED_LOAD_FOR_SERVICE.Name = "CALCULATED_LOAD_FOR_SERVICE";
      this.CALCULATED_LOAD_FOR_SERVICE.Size = new System.Drawing.Size(19, 20);
      this.CALCULATED_LOAD_FOR_SERVICE.TabIndex = 113;
      this.CALCULATED_LOAD_FOR_SERVICE.Text = "0";
      // 
      // label28
      // 
      this.label28.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label28.Location = new System.Drawing.Point(1264, 564);
      this.label28.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label28.Name = "label28";
      this.label28.Size = new System.Drawing.Size(220, 21);
      this.label28.TabIndex = 112;
      this.label28.Text = "Calculated Load For Service";
      // 
      // label34
      // 
      this.label34.AutoSize = true;
      this.label34.Font = new System.Drawing.Font("Microsoft Sans Serif", 15.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label34.Location = new System.Drawing.Point(1263, 353);
      this.label34.Margin = new System.Windows.Forms.Padding(0, 0, 0, 12);
      this.label34.Name = "label34";
      this.label34.Size = new System.Drawing.Size(202, 25);
      this.label34.TabIndex = 114;
      this.label34.Text = "Total Calculations";
      // 
      // label62
      // 
      this.label62.AutoSize = true;
      this.label62.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label62.Location = new System.Drawing.Point(114, 265);
      this.label62.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label62.Name = "label62";
      this.label62.Size = new System.Drawing.Size(43, 16);
      this.label62.TabIndex = 143;
      this.label62.Text = "SQFT";
      // 
      // label68
      // 
      this.label68.AutoSize = true;
      this.label68.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label68.Location = new System.Drawing.Point(1379, 79);
      this.label68.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label68.Name = "label68";
      this.label68.Size = new System.Drawing.Size(25, 16);
      this.label68.TabIndex = 149;
      this.label68.Text = "VA";
      // 
      // label69
      // 
      this.label69.AutoSize = true;
      this.label69.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label69.Location = new System.Drawing.Point(1379, 147);
      this.label69.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label69.Name = "label69";
      this.label69.Size = new System.Drawing.Size(25, 16);
      this.label69.TabIndex = 150;
      this.label69.Text = "VA";
      // 
      // label72
      // 
      this.label72.AutoSize = true;
      this.label72.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label72.Location = new System.Drawing.Point(1379, 213);
      this.label72.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label72.Name = "label72";
      this.label72.Size = new System.Drawing.Size(25, 16);
      this.label72.TabIndex = 156;
      this.label72.Text = "VA";
      // 
      // panel20
      // 
      this.panel20.BackColor = System.Drawing.SystemColors.Window;
      this.panel20.Controls.Add(this.OUTDOOR_HEATER_UNIT);
      this.panel20.Location = new System.Drawing.Point(1268, 206);
      this.panel20.Margin = new System.Windows.Forms.Padding(48, 0, 3, 3);
      this.panel20.Name = "panel20";
      this.panel20.Padding = new System.Windows.Forms.Padding(5);
      this.panel20.Size = new System.Drawing.Size(108, 28);
      this.panel20.TabIndex = 24;
      // 
      // OUTDOOR_HEATER_UNIT
      // 
      this.OUTDOOR_HEATER_UNIT.BorderStyle = System.Windows.Forms.BorderStyle.None;
      this.OUTDOOR_HEATER_UNIT.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.OUTDOOR_HEATER_UNIT.Location = new System.Drawing.Point(5, 5);
      this.OUTDOOR_HEATER_UNIT.Margin = new System.Windows.Forms.Padding(0);
      this.OUTDOOR_HEATER_UNIT.Name = "OUTDOOR_HEATER_UNIT";
      this.OUTDOOR_HEATER_UNIT.Size = new System.Drawing.Size(98, 19);
      this.OUTDOOR_HEATER_UNIT.TabIndex = 2;
      this.OUTDOOR_HEATER_UNIT.Text = "0";
      // 
      // label73
      // 
      this.label73.AutoSize = true;
      this.label73.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label73.Location = new System.Drawing.Point(1266, 179);
      this.label73.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label73.Name = "label73";
      this.label73.Size = new System.Drawing.Size(194, 20);
      this.label73.TabIndex = 155;
      this.label73.Text = "Total Space Heating Load";
      // 
      // OUTDOOR_HEATER_UNIT_AMOUNT
      // 
      this.OUTDOOR_HEATER_UNIT_AMOUNT.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.OUTDOOR_HEATER_UNIT_AMOUNT.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.OUTDOOR_HEATER_UNIT_AMOUNT.FormattingEnabled = true;
      this.OUTDOOR_HEATER_UNIT_AMOUNT.Items.AddRange(new object[] {
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25"});
      this.OUTDOOR_HEATER_UNIT_AMOUNT.Location = new System.Drawing.Point(1268, 279);
      this.OUTDOOR_HEATER_UNIT_AMOUNT.Margin = new System.Windows.Forms.Padding(0);
      this.OUTDOOR_HEATER_UNIT_AMOUNT.Name = "OUTDOOR_HEATER_UNIT_AMOUNT";
      this.OUTDOOR_HEATER_UNIT_AMOUNT.Size = new System.Drawing.Size(56, 28);
      this.OUTDOOR_HEATER_UNIT_AMOUNT.TabIndex = 25;
      this.OUTDOOR_HEATER_UNIT_AMOUNT.Text = "1";
      // 
      // label64
      // 
      this.label64.AutoSize = true;
      this.label64.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label64.Location = new System.Drawing.Point(623, 551);
      this.label64.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label64.Name = "label64";
      this.label64.Size = new System.Drawing.Size(13, 16);
      this.label64.TabIndex = 146;
      this.label64.Text = "x";
      // 
      // label75
      // 
      this.label75.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label75.Location = new System.Drawing.Point(1266, 237);
      this.label75.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label75.Name = "label75";
      this.label75.Size = new System.Drawing.Size(230, 43);
      this.label75.TabIndex = 159;
      this.label75.Text = "Number of Separately Controlled Space Heater Units";
      // 
      // ESTIMATE_CONDENSER
      // 
      this.ESTIMATE_CONDENSER.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.ESTIMATE_CONDENSER.Location = new System.Drawing.Point(1411, 73);
      this.ESTIMATE_CONDENSER.Name = "ESTIMATE_CONDENSER";
      this.ESTIMATE_CONDENSER.Size = new System.Drawing.Size(85, 28);
      this.ESTIMATE_CONDENSER.TabIndex = 21;
      this.ESTIMATE_CONDENSER.Text = "Estimate";
      this.ESTIMATE_CONDENSER.UseVisualStyleBackColor = true;
      this.ESTIMATE_CONDENSER.Click += new System.EventHandler(this.ESTIMATE_CONDENSER_Click);
      // 
      // ESTIMATE_FAN_COIL
      // 
      this.ESTIMATE_FAN_COIL.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.ESTIMATE_FAN_COIL.Location = new System.Drawing.Point(1411, 140);
      this.ESTIMATE_FAN_COIL.Name = "ESTIMATE_FAN_COIL";
      this.ESTIMATE_FAN_COIL.Size = new System.Drawing.Size(85, 28);
      this.ESTIMATE_FAN_COIL.TabIndex = 23;
      this.ESTIMATE_FAN_COIL.Text = "Estimate";
      this.ESTIMATE_FAN_COIL.UseVisualStyleBackColor = true;
      this.ESTIMATE_FAN_COIL.Click += new System.EventHandler(this.ESTIMATE_FAN_COIL_Click);
      // 
      // TOTAL_CUSTOM_LOAD_CALCULATION
      // 
      this.TOTAL_CUSTOM_LOAD_CALCULATION.AutoSize = true;
      this.TOTAL_CUSTOM_LOAD_CALCULATION.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.TOTAL_CUSTOM_LOAD_CALCULATION.Location = new System.Drawing.Point(1264, 541);
      this.TOTAL_CUSTOM_LOAD_CALCULATION.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.TOTAL_CUSTOM_LOAD_CALCULATION.Name = "TOTAL_CUSTOM_LOAD_CALCULATION";
      this.TOTAL_CUSTOM_LOAD_CALCULATION.Size = new System.Drawing.Size(19, 20);
      this.TOTAL_CUSTOM_LOAD_CALCULATION.TabIndex = 163;
      this.TOTAL_CUSTOM_LOAD_CALCULATION.Text = "0";
      // 
      // label76
      // 
      this.label76.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label76.Location = new System.Drawing.Point(1264, 521);
      this.label76.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label76.Name = "label76";
      this.label76.Size = new System.Drawing.Size(269, 22);
      this.label76.TabIndex = 162;
      this.label76.Text = "Total Custom Load Calculation";
      // 
      // GENERAL_LIGHTING_TOTAL_VA_LABEL
      // 
      this.GENERAL_LIGHTING_TOTAL_VA_LABEL.AutoSize = true;
      this.GENERAL_LIGHTING_TOTAL_VA_LABEL.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.GENERAL_LIGHTING_TOTAL_VA_LABEL.Location = new System.Drawing.Point(666, 52);
      this.GENERAL_LIGHTING_TOTAL_VA_LABEL.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.GENERAL_LIGHTING_TOTAL_VA_LABEL.Name = "GENERAL_LIGHTING_TOTAL_VA_LABEL";
      this.GENERAL_LIGHTING_TOTAL_VA_LABEL.Size = new System.Drawing.Size(59, 16);
      this.GENERAL_LIGHTING_TOTAL_VA_LABEL.TabIndex = 167;
      this.GENERAL_LIGHTING_TOTAL_VA_LABEL.Text = "Total VA";
      this.GENERAL_LIGHTING_TOTAL_VA_LABEL.Visible = false;
      // 
      // GENERAL_LIGHTING_TOTAL
      // 
      this.GENERAL_LIGHTING_TOTAL.AutoSize = true;
      this.GENERAL_LIGHTING_TOTAL.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.GENERAL_LIGHTING_TOTAL.Location = new System.Drawing.Point(665, 73);
      this.GENERAL_LIGHTING_TOTAL.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.GENERAL_LIGHTING_TOTAL.Name = "GENERAL_LIGHTING_TOTAL";
      this.GENERAL_LIGHTING_TOTAL.Size = new System.Drawing.Size(20, 24);
      this.GENERAL_LIGHTING_TOTAL.TabIndex = 168;
      this.GENERAL_LIGHTING_TOTAL.Text = "0";
      this.GENERAL_LIGHTING_TOTAL.Visible = false;
      // 
      // GENERAL_LIGHTING_GROUP_BOX
      // 
      this.GENERAL_LIGHTING_GROUP_BOX.Controls.Add(this.LIGHTING_OTHER);
      this.GENERAL_LIGHTING_GROUP_BOX.Controls.Add(this.LIGHTING_WAREHOUSE);
      this.GENERAL_LIGHTING_GROUP_BOX.Controls.Add(this.LIGHTING_HOTEL_MOTEL);
      this.GENERAL_LIGHTING_GROUP_BOX.Controls.Add(this.LIGHTING_DWELLING);
      this.GENERAL_LIGHTING_GROUP_BOX.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.GENERAL_LIGHTING_GROUP_BOX.Location = new System.Drawing.Point(266, 43);
      this.GENERAL_LIGHTING_GROUP_BOX.Name = "GENERAL_LIGHTING_GROUP_BOX";
      this.GENERAL_LIGHTING_GROUP_BOX.Size = new System.Drawing.Size(394, 54);
      this.GENERAL_LIGHTING_GROUP_BOX.TabIndex = 7;
      this.GENERAL_LIGHTING_GROUP_BOX.TabStop = false;
      this.GENERAL_LIGHTING_GROUP_BOX.Text = "Occupancy Type";
      this.GENERAL_LIGHTING_GROUP_BOX.Visible = false;
      // 
      // LIGHTING_OTHER
      // 
      this.LIGHTING_OTHER.AutoSize = true;
      this.LIGHTING_OTHER.Checked = true;
      this.LIGHTING_OTHER.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.LIGHTING_OTHER.Location = new System.Drawing.Point(271, 15);
      this.LIGHTING_OTHER.Margin = new System.Windows.Forms.Padding(0);
      this.LIGHTING_OTHER.Name = "LIGHTING_OTHER";
      this.LIGHTING_OTHER.Size = new System.Drawing.Size(118, 36);
      this.LIGHTING_OTHER.TabIndex = 11;
      this.LIGHTING_OTHER.TabStop = true;
      this.LIGHTING_OTHER.Text = "No Lighting \r\nDemand Factor";
      this.LIGHTING_OTHER.UseVisualStyleBackColor = true;
      this.LIGHTING_OTHER.CheckedChanged += new System.EventHandler(this.LIGHTING_OTHER_CheckedChanged);
      // 
      // LIGHTING_WAREHOUSE
      // 
      this.LIGHTING_WAREHOUSE.AutoSize = true;
      this.LIGHTING_WAREHOUSE.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.LIGHTING_WAREHOUSE.Location = new System.Drawing.Point(176, 23);
      this.LIGHTING_WAREHOUSE.Margin = new System.Windows.Forms.Padding(0);
      this.LIGHTING_WAREHOUSE.Name = "LIGHTING_WAREHOUSE";
      this.LIGHTING_WAREHOUSE.Size = new System.Drawing.Size(95, 20);
      this.LIGHTING_WAREHOUSE.TabIndex = 10;
      this.LIGHTING_WAREHOUSE.Text = "Warehouse";
      this.LIGHTING_WAREHOUSE.UseVisualStyleBackColor = true;
      this.LIGHTING_WAREHOUSE.CheckedChanged += new System.EventHandler(this.LIGHTING_WAREHOUSE_CheckedChanged);
      // 
      // LIGHTING_HOTEL_MOTEL
      // 
      this.LIGHTING_HOTEL_MOTEL.AutoSize = true;
      this.LIGHTING_HOTEL_MOTEL.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.LIGHTING_HOTEL_MOTEL.Location = new System.Drawing.Point(82, 23);
      this.LIGHTING_HOTEL_MOTEL.Margin = new System.Windows.Forms.Padding(0);
      this.LIGHTING_HOTEL_MOTEL.Name = "LIGHTING_HOTEL_MOTEL";
      this.LIGHTING_HOTEL_MOTEL.Size = new System.Drawing.Size(94, 20);
      this.LIGHTING_HOTEL_MOTEL.TabIndex = 9;
      this.LIGHTING_HOTEL_MOTEL.Text = "Hotel/Motel";
      this.LIGHTING_HOTEL_MOTEL.UseVisualStyleBackColor = true;
      this.LIGHTING_HOTEL_MOTEL.CheckedChanged += new System.EventHandler(this.LIGHTING_HOTEL_MOTEL_CheckedChanged);
      // 
      // LIGHTING_DWELLING
      // 
      this.LIGHTING_DWELLING.AutoSize = true;
      this.LIGHTING_DWELLING.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.LIGHTING_DWELLING.Location = new System.Drawing.Point(6, 23);
      this.LIGHTING_DWELLING.Margin = new System.Windows.Forms.Padding(0);
      this.LIGHTING_DWELLING.Name = "LIGHTING_DWELLING";
      this.LIGHTING_DWELLING.Size = new System.Drawing.Size(76, 20);
      this.LIGHTING_DWELLING.TabIndex = 8;
      this.LIGHTING_DWELLING.Text = "Dwelling";
      this.LIGHTING_DWELLING.UseVisualStyleBackColor = true;
      this.LIGHTING_DWELLING.CheckedChanged += new System.EventHandler(this.LIGHTING_DWELLING_CheckedChanged);
      // 
      // label63
      // 
      this.label63.AutoSize = true;
      this.label63.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label63.Location = new System.Drawing.Point(1431, 414);
      this.label63.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label63.Name = "label63";
      this.label63.Size = new System.Drawing.Size(25, 16);
      this.label63.TabIndex = 174;
      this.label63.Text = "VA";
      // 
      // label74
      // 
      this.label74.AutoSize = true;
      this.label74.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label74.Location = new System.Drawing.Point(1430, 459);
      this.label74.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label74.Name = "label74";
      this.label74.Size = new System.Drawing.Size(25, 16);
      this.label74.TabIndex = 175;
      this.label74.Text = "VA";
      // 
      // label77
      // 
      this.label77.AutoSize = true;
      this.label77.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label77.Location = new System.Drawing.Point(1430, 503);
      this.label77.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label77.Name = "label77";
      this.label77.Size = new System.Drawing.Size(25, 16);
      this.label77.TabIndex = 176;
      this.label77.Text = "VA";
      // 
      // label78
      // 
      this.label78.AutoSize = true;
      this.label78.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label78.Location = new System.Drawing.Point(1430, 546);
      this.label78.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label78.Name = "label78";
      this.label78.Size = new System.Drawing.Size(25, 16);
      this.label78.TabIndex = 177;
      this.label78.Text = "VA";
      // 
      // label80
      // 
      this.label80.AutoSize = true;
      this.label80.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label80.Location = new System.Drawing.Point(1430, 588);
      this.label80.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label80.Name = "label80";
      this.label80.Size = new System.Drawing.Size(16, 16);
      this.label80.TabIndex = 178;
      this.label80.Text = "A";
      // 
      // label10
      // 
      this.label10.AutoSize = true;
      this.label10.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label10.Location = new System.Drawing.Point(633, 525);
      this.label10.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label10.Name = "label10";
      this.label10.Size = new System.Drawing.Size(52, 16);
      this.label10.TabIndex = 182;
      this.label10.Text = "Amount";
      // 
      // label12
      // 
      this.label12.AutoSize = true;
      this.label12.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label12.Location = new System.Drawing.Point(265, 525);
      this.label12.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label12.Name = "label12";
      this.label12.Size = new System.Drawing.Size(44, 16);
      this.label12.TabIndex = 184;
      this.label12.Text = "Name";
      // 
      // label13
      // 
      this.label13.AutoSize = true;
      this.label13.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label13.Location = new System.Drawing.Point(777, 525);
      this.label13.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label13.Name = "label13";
      this.label13.Size = new System.Drawing.Size(44, 16);
      this.label13.TabIndex = 198;
      this.label13.Text = "Name";
      // 
      // label15
      // 
      this.label15.AutoSize = true;
      this.label15.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label15.Location = new System.Drawing.Point(1151, 525);
      this.label15.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label15.Name = "label15";
      this.label15.Size = new System.Drawing.Size(52, 16);
      this.label15.TabIndex = 196;
      this.label15.Text = "Amount";
      // 
      // label20
      // 
      this.label20.AutoSize = true;
      this.label20.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label20.Location = new System.Drawing.Point(1141, 551);
      this.label20.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label20.Name = "label20";
      this.label20.Size = new System.Drawing.Size(13, 16);
      this.label20.TabIndex = 192;
      this.label20.Text = "x";
      // 
      // panel6
      // 
      this.panel6.BackColor = System.Drawing.SystemColors.Window;
      this.panel6.Controls.Add(this.CUSTOM_NAME);
      this.panel6.Location = new System.Drawing.Point(775, 546);
      this.panel6.Margin = new System.Windows.Forms.Padding(48, 0, 3, 12);
      this.panel6.Name = "panel6";
      this.panel6.Padding = new System.Windows.Forms.Padding(5);
      this.panel6.Size = new System.Drawing.Size(242, 28);
      this.panel6.TabIndex = 15;
      // 
      // CUSTOM_NAME
      // 
      this.CUSTOM_NAME.BorderStyle = System.Windows.Forms.BorderStyle.None;
      this.CUSTOM_NAME.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.CUSTOM_NAME.Location = new System.Drawing.Point(5, 5);
      this.CUSTOM_NAME.Margin = new System.Windows.Forms.Padding(0);
      this.CUSTOM_NAME.Name = "CUSTOM_NAME";
      this.CUSTOM_NAME.Size = new System.Drawing.Size(232, 19);
      this.CUSTOM_NAME.TabIndex = 2;
      // 
      // CUSTOM_MULTIPLIER
      // 
      this.CUSTOM_MULTIPLIER.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.CUSTOM_MULTIPLIER.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.CUSTOM_MULTIPLIER.FormattingEnabled = true;
      this.CUSTOM_MULTIPLIER.Items.AddRange(new object[] {
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25"});
      this.CUSTOM_MULTIPLIER.Location = new System.Drawing.Point(1154, 546);
      this.CUSTOM_MULTIPLIER.Margin = new System.Windows.Forms.Padding(0);
      this.CUSTOM_MULTIPLIER.Name = "CUSTOM_MULTIPLIER";
      this.CUSTOM_MULTIPLIER.Size = new System.Drawing.Size(56, 28);
      this.CUSTOM_MULTIPLIER.TabIndex = 17;
      this.CUSTOM_MULTIPLIER.Text = "1";
      // 
      // CUSTOM_TOTAL
      // 
      this.CUSTOM_TOTAL.BorderStyle = System.Windows.Forms.BorderStyle.None;
      this.CUSTOM_TOTAL.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.CUSTOM_TOTAL.Location = new System.Drawing.Point(5, 5);
      this.CUSTOM_TOTAL.Margin = new System.Windows.Forms.Padding(0);
      this.CUSTOM_TOTAL.Name = "CUSTOM_TOTAL";
      this.CUSTOM_TOTAL.Size = new System.Drawing.Size(76, 19);
      this.CUSTOM_TOTAL.TabIndex = 2;
      // 
      // panel4
      // 
      this.panel4.BackColor = System.Drawing.SystemColors.Window;
      this.panel4.Controls.Add(this.CUSTOM_TOTAL);
      this.panel4.Location = new System.Drawing.Point(1026, 546);
      this.panel4.Margin = new System.Windows.Forms.Padding(6, 0, 3, 12);
      this.panel4.Name = "panel4";
      this.panel4.Padding = new System.Windows.Forms.Padding(5);
      this.panel4.Size = new System.Drawing.Size(86, 28);
      this.panel4.TabIndex = 16;
      // 
      // TOTAL_CUSTOM_LABEL
      // 
      this.TOTAL_CUSTOM_LABEL.AutoSize = true;
      this.TOTAL_CUSTOM_LABEL.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.TOTAL_CUSTOM_LABEL.Location = new System.Drawing.Point(1023, 525);
      this.TOTAL_CUSTOM_LABEL.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.TOTAL_CUSTOM_LABEL.Name = "TOTAL_CUSTOM_LABEL";
      this.TOTAL_CUSTOM_LABEL.Size = new System.Drawing.Size(38, 16);
      this.TOTAL_CUSTOM_LABEL.TabIndex = 194;
      this.TOTAL_CUSTOM_LABEL.Text = "Total";
      // 
      // label17
      // 
      this.label17.AutoSize = true;
      this.label17.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label17.Location = new System.Drawing.Point(1115, 553);
      this.label17.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label17.Name = "label17";
      this.label17.Size = new System.Drawing.Size(25, 16);
      this.label17.TabIndex = 195;
      this.label17.Text = "VA";
      // 
      // GENERAL_CUSTOM_TOTAL
      // 
      this.GENERAL_CUSTOM_TOTAL.BorderStyle = System.Windows.Forms.BorderStyle.None;
      this.GENERAL_CUSTOM_TOTAL.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.GENERAL_CUSTOM_TOTAL.Location = new System.Drawing.Point(5, 5);
      this.GENERAL_CUSTOM_TOTAL.Margin = new System.Windows.Forms.Padding(0);
      this.GENERAL_CUSTOM_TOTAL.Name = "GENERAL_CUSTOM_TOTAL";
      this.GENERAL_CUSTOM_TOTAL.Size = new System.Drawing.Size(76, 19);
      this.GENERAL_CUSTOM_TOTAL.TabIndex = 2;
      // 
      // panel3
      // 
      this.panel3.BackColor = System.Drawing.SystemColors.Window;
      this.panel3.Controls.Add(this.GENERAL_CUSTOM_TOTAL);
      this.panel3.Location = new System.Drawing.Point(508, 546);
      this.panel3.Margin = new System.Windows.Forms.Padding(6, 0, 3, 12);
      this.panel3.Name = "panel3";
      this.panel3.Padding = new System.Windows.Forms.Padding(5);
      this.panel3.Size = new System.Drawing.Size(86, 28);
      this.panel3.TabIndex = 10;
      // 
      // TOTAL_GENERAL_LABEL
      // 
      this.TOTAL_GENERAL_LABEL.AutoSize = true;
      this.TOTAL_GENERAL_LABEL.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.TOTAL_GENERAL_LABEL.Location = new System.Drawing.Point(505, 525);
      this.TOTAL_GENERAL_LABEL.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.TOTAL_GENERAL_LABEL.Name = "TOTAL_GENERAL_LABEL";
      this.TOTAL_GENERAL_LABEL.Size = new System.Drawing.Size(38, 16);
      this.TOTAL_GENERAL_LABEL.TabIndex = 180;
      this.TOTAL_GENERAL_LABEL.Text = "Total";
      // 
      // label9
      // 
      this.label9.AutoSize = true;
      this.label9.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.label9.Location = new System.Drawing.Point(597, 553);
      this.label9.Margin = new System.Windows.Forms.Padding(0, 0, 0, 3);
      this.label9.Name = "label9";
      this.label9.Size = new System.Drawing.Size(25, 16);
      this.label9.TabIndex = 181;
      this.label9.Text = "VA";
      // 
      // ADD_ENTRY_CUSTOM
      // 
      this.ADD_ENTRY_CUSTOM.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.ADD_ENTRY_CUSTOM.Location = new System.Drawing.Point(775, 582);
      this.ADD_ENTRY_CUSTOM.Name = "ADD_ENTRY_CUSTOM";
      this.ADD_ENTRY_CUSTOM.Size = new System.Drawing.Size(108, 28);
      this.ADD_ENTRY_CUSTOM.TabIndex = 18;
      this.ADD_ENTRY_CUSTOM.Text = "Add/Update";
      this.ADD_ENTRY_CUSTOM.UseVisualStyleBackColor = true;
      this.ADD_ENTRY_CUSTOM.Click += new System.EventHandler(this.ADD_ENTRY_CUSTOM_Click);
      // 
      // COOKING_APPLIANCE
      // 
      this.COOKING_APPLIANCE.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(192)))), ((int)(((byte)(192)))));
      this.COOKING_APPLIANCE.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
      this.COOKING_APPLIANCE.Location = new System.Drawing.Point(537, 582);
      this.COOKING_APPLIANCE.Name = "COOKING_APPLIANCE";
      this.COOKING_APPLIANCE.Size = new System.Drawing.Size(161, 28);
      this.COOKING_APPLIANCE.TabIndex = 199;
      this.COOKING_APPLIANCE.Text = "Cooking Appliance";
      this.COOKING_APPLIANCE.UseVisualStyleBackColor = false;
      this.COOKING_APPLIANCE.Visible = false;
      this.COOKING_APPLIANCE.Click += new System.EventHandler(this.COOKING_APPLIANCE_Click);
      // 
      // DEMAND_40PC
      // 
      this.DEMAND_40PC.AutoSize = true;
      this.DEMAND_40PC.Checked = true;
      this.DEMAND_40PC.CheckState = System.Windows.Forms.CheckState.Checked;
      this.DEMAND_40PC.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F);
      this.DEMAND_40PC.Location = new System.Drawing.Point(23, 580);
      this.DEMAND_40PC.Name = "DEMAND_40PC";
      this.DEMAND_40PC.Size = new System.Drawing.Size(125, 24);
      this.DEMAND_40PC.TabIndex = 200;
      this.DEMAND_40PC.Text = "40% Demand";
      this.DEMAND_40PC.UseVisualStyleBackColor = true;
      this.DEMAND_40PC.CheckedChanged += new System.EventHandler(this.DEMAND_40PC_CheckedChanged);
      // 
      // LoadCalculationForm
      // 
      this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.None;
      this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224)))), ((int)(((byte)(224)))), ((int)(((byte)(224)))));
      this.Controls.Add(this.DEMAND_40PC);
      this.Controls.Add(this.COOKING_APPLIANCE);
      this.Controls.Add(this.ADD_ENTRY_CUSTOM);
      this.Controls.Add(this.label13);
      this.Controls.Add(this.label15);
      this.Controls.Add(this.label17);
      this.Controls.Add(this.TOTAL_CUSTOM_LABEL);
      this.Controls.Add(this.panel4);
      this.Controls.Add(this.label20);
      this.Controls.Add(this.panel6);
      this.Controls.Add(this.CUSTOM_MULTIPLIER);
      this.Controls.Add(this.label12);
      this.Controls.Add(this.label10);
      this.Controls.Add(this.label9);
      this.Controls.Add(this.TOTAL_GENERAL_LABEL);
      this.Controls.Add(this.panel3);
      this.Controls.Add(this.label80);
      this.Controls.Add(this.label78);
      this.Controls.Add(this.label77);
      this.Controls.Add(this.label74);
      this.Controls.Add(this.label63);
      this.Controls.Add(this.GENERAL_LIGHTING_GROUP_BOX);
      this.Controls.Add(this.GENERAL_LIGHTING_TOTAL);
      this.Controls.Add(this.GENERAL_LIGHTING_TOTAL_VA_LABEL);
      this.Controls.Add(this.TOTAL_CUSTOM_LOAD_CALCULATION);
      this.Controls.Add(this.label76);
      this.Controls.Add(this.ESTIMATE_FAN_COIL);
      this.Controls.Add(this.ESTIMATE_CONDENSER);
      this.Controls.Add(this.label75);
      this.Controls.Add(this.OUTDOOR_HEATER_UNIT_AMOUNT);
      this.Controls.Add(this.label72);
      this.Controls.Add(this.panel20);
      this.Controls.Add(this.label73);
      this.Controls.Add(this.label69);
      this.Controls.Add(this.label68);
      this.Controls.Add(this.label64);
      this.Controls.Add(this.label62);
      this.Controls.Add(this.label34);
      this.Controls.Add(this.CALCULATED_LOAD_FOR_SERVICE);
      this.Controls.Add(this.label28);
      this.Controls.Add(this.TOTAL_AC_LOAD_CALCULATION);
      this.Controls.Add(this.label26);
      this.Controls.Add(this.SUBTOTAL_GENERAL_LOAD_CALCULATION);
      this.Controls.Add(this.label27);
      this.Controls.Add(this.TOTAL_GENERAL_LOAD_CALCULATION);
      this.Controls.Add(this.label16);
      this.Controls.Add(this.REMOVE_ENTRY_CUSTOM);
      this.Controls.Add(this.CUSTOM_LOAD_BOX);
      this.Controls.Add(this.REMOVE_ENTRY);
      this.Controls.Add(this.ADD_ENTRY);
      this.Controls.Add(this.GENERAL_CUSTOM_LOAD_BOX);
      this.Controls.Add(this.GENERAL_LIGHTING_TITLE);
      this.Controls.Add(this.panel31);
      this.Controls.Add(this.label31);
      this.Controls.Add(this.panel30);
      this.Controls.Add(this.label30);
      this.Controls.Add(this.label29);
      this.Controls.Add(this.label25);
      this.Controls.Add(this.label23);
      this.Controls.Add(this.panel13);
      this.Controls.Add(this.GENERAL_CUSTOM_MULTIPLIER);
      this.Controls.Add(this.label5);
      this.Controls.Add(this.panel2);
      this.Controls.Add(this.groupBox4);
      this.Controls.Add(this.groupBox3);
      this.Controls.Add(this.groupBox2);
      this.Controls.Add(this.groupBox1);
      this.Controls.Add(this.label4);
      this.Controls.Add(this.panel1);
      this.Controls.Add(this.VOLTAGE);
      this.Controls.Add(this.label3);
      this.Controls.Add(this.label2);
      this.Controls.Add(this.label1);
      this.Margin = new System.Windows.Forms.Padding(0);
      this.Name = "LoadCalculationForm";
      this.Padding = new System.Windows.Forms.Padding(12);
      this.Size = new System.Drawing.Size(1545, 627);
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      this.groupBox1.ResumeLayout(false);
      this.groupBox1.PerformLayout();
      this.groupBox2.ResumeLayout(false);
      this.groupBox2.PerformLayout();
      this.groupBox3.ResumeLayout(false);
      this.groupBox3.PerformLayout();
      this.groupBox4.ResumeLayout(false);
      this.groupBox4.PerformLayout();
      this.panel2.ResumeLayout(false);
      this.panel2.PerformLayout();
      this.panel13.ResumeLayout(false);
      this.panel13.PerformLayout();
      this.panel30.ResumeLayout(false);
      this.panel30.PerformLayout();
      this.panel31.ResumeLayout(false);
      this.panel31.PerformLayout();
      this.panel20.ResumeLayout(false);
      this.panel20.PerformLayout();
      this.GENERAL_LIGHTING_GROUP_BOX.ResumeLayout(false);
      this.GENERAL_LIGHTING_GROUP_BOX.PerformLayout();
      this.panel6.ResumeLayout(false);
      this.panel6.PerformLayout();
      this.panel4.ResumeLayout(false);
      this.panel4.PerformLayout();
      this.panel3.ResumeLayout(false);
      this.panel3.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();

    }

    #endregion

    private System.Windows.Forms.Label label1;
    private System.Windows.Forms.Label label2;
    private System.Windows.Forms.TextBox UNIT_NAME;
    private System.Windows.Forms.Label label3;
    private System.Windows.Forms.ComboBox VOLTAGE;
    private System.Windows.Forms.Panel panel1;
    private System.Windows.Forms.Label label4;
    private System.Windows.Forms.GroupBox groupBox1;
    private System.Windows.Forms.RadioButton GAS_HEATER;
    private System.Windows.Forms.RadioButton ELECTRIC_HEATER;
    private System.Windows.Forms.GroupBox groupBox2;
    private System.Windows.Forms.RadioButton GAS_DRYER;
    private System.Windows.Forms.RadioButton ELECTRIC_DRYER;
    private System.Windows.Forms.GroupBox groupBox3;
    private System.Windows.Forms.RadioButton GAS_OVEN;
    private System.Windows.Forms.RadioButton ELECTRIC_OVEN;
    private System.Windows.Forms.GroupBox groupBox4;
    private System.Windows.Forms.RadioButton GAS_COOKTOP;
    private System.Windows.Forms.RadioButton ELECTRIC_COOKTOP;
    private System.Windows.Forms.Panel panel2;
    private System.Windows.Forms.TextBox AREA;
    private System.Windows.Forms.Label label5;
    private System.Windows.Forms.Panel panel13;
    private System.Windows.Forms.TextBox GENERAL_CUSTOM_NAME;
    private System.Windows.Forms.ComboBox GENERAL_CUSTOM_MULTIPLIER;
    private System.Windows.Forms.Label label23;
    private System.Windows.Forms.Label label25;
    private System.Windows.Forms.Label label29;
    private System.Windows.Forms.Panel panel30;
    private System.Windows.Forms.TextBox OUTDOOR_CONDENSER_VA;
    private System.Windows.Forms.Label label30;
    private System.Windows.Forms.Panel panel31;
    private System.Windows.Forms.TextBox INDOOR_FAN_COIL_VA;
    private System.Windows.Forms.Label label31;
    private System.Windows.Forms.Label GENERAL_LIGHTING_TITLE;
    private System.Windows.Forms.ListBox GENERAL_CUSTOM_LOAD_BOX;
    private System.Windows.Forms.Button ADD_ENTRY;
    private System.Windows.Forms.Button REMOVE_ENTRY;
    private System.Windows.Forms.Button REMOVE_ENTRY_CUSTOM;
    private System.Windows.Forms.ListBox CUSTOM_LOAD_BOX;
    private System.Windows.Forms.Label label16;
    private System.Windows.Forms.Label TOTAL_GENERAL_LOAD_CALCULATION;
    private System.Windows.Forms.Label SUBTOTAL_GENERAL_LOAD_CALCULATION;
    private System.Windows.Forms.Label label27;
    private System.Windows.Forms.Label TOTAL_AC_LOAD_CALCULATION;
    private System.Windows.Forms.Label label26;
    private System.Windows.Forms.Label CALCULATED_LOAD_FOR_SERVICE;
    private System.Windows.Forms.Label label28;
    private System.Windows.Forms.Label label34;
    private System.Windows.Forms.Label label62;
    private System.Windows.Forms.Label label68;
    private System.Windows.Forms.Label label69;
    private System.Windows.Forms.Label label72;
    private System.Windows.Forms.Panel panel20;
    private System.Windows.Forms.TextBox OUTDOOR_HEATER_UNIT;
    private System.Windows.Forms.Label label73;
    private System.Windows.Forms.ComboBox OUTDOOR_HEATER_UNIT_AMOUNT;
    private System.Windows.Forms.Label label64;
    private System.Windows.Forms.Label label75;
    private System.Windows.Forms.Button ESTIMATE_CONDENSER;
    private System.Windows.Forms.Button ESTIMATE_FAN_COIL;
    private System.Windows.Forms.Label TOTAL_CUSTOM_LOAD_CALCULATION;
    private System.Windows.Forms.Label label76;
    private System.Windows.Forms.Label GENERAL_LIGHTING_TOTAL_VA_LABEL;
    private System.Windows.Forms.Label GENERAL_LIGHTING_TOTAL;
    private System.Windows.Forms.GroupBox GENERAL_LIGHTING_GROUP_BOX;
    private System.Windows.Forms.RadioButton LIGHTING_HOTEL_MOTEL;
    private System.Windows.Forms.RadioButton LIGHTING_DWELLING;
    private System.Windows.Forms.RadioButton LIGHTING_WAREHOUSE;
    private System.Windows.Forms.RadioButton LIGHTING_OTHER;
    private System.Windows.Forms.Label label63;
    private System.Windows.Forms.Label label74;
    private System.Windows.Forms.Label label77;
    private System.Windows.Forms.Label label78;
    private System.Windows.Forms.Label label80;
    private System.Windows.Forms.RadioButton NA_HEATER;
    private System.Windows.Forms.RadioButton NA_DRYER;
    private System.Windows.Forms.RadioButton NA_OVEN;
    private System.Windows.Forms.RadioButton NA_COOKTOP;
    private System.Windows.Forms.Label label10;
    private System.Windows.Forms.Label label12;
    private System.Windows.Forms.Label label13;
    private System.Windows.Forms.Label label15;
    private System.Windows.Forms.Label label20;
    private System.Windows.Forms.Panel panel6;
    private System.Windows.Forms.TextBox CUSTOM_NAME;
    private System.Windows.Forms.ComboBox CUSTOM_MULTIPLIER;
    private System.Windows.Forms.TextBox CUSTOM_TOTAL;
    private System.Windows.Forms.Panel panel4;
    private System.Windows.Forms.Label TOTAL_CUSTOM_LABEL;
    private System.Windows.Forms.Label label17;
    private System.Windows.Forms.TextBox GENERAL_CUSTOM_TOTAL;
    private System.Windows.Forms.Panel panel3;
    private System.Windows.Forms.Label TOTAL_GENERAL_LABEL;
    private System.Windows.Forms.Label label9;
    private System.Windows.Forms.Button ADD_ENTRY_CUSTOM;
    private System.Windows.Forms.Button COOKING_APPLIANCE;
    private System.Windows.Forms.CheckBox DEMAND_40PC;
  }
}
 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\LoadCalculations\Unit\BlockData\UnitLoadCalculationBody.json 
{
  "Polylines": [],
  "Lines": [],
  "Arcs": [],
  "Circles": [],
  "Ellipses": [],
  "MTexts": [
    {
      "Style": "Standard",
      "Justification": "TopRight",
      "Contents": "{\\Farial|c0;\\PSubtitle VA}",
      "Direction": {
        "LargestElement": 0,
        "LengthSqrd": 1.0,
        "Length": 1.0,
        "Z": 0.0,
        "Y": 0.0,
        "X": 1.0
      },
      "Location": {
        "X": -0.13877320921318059,
        "Y": -0.15290150460731589,
        "Z": 0.0
      },
      "LineSpaceDistance": 0.25,
      "LineSpaceFactor": 1.0,
      "LineSpacingStyle": 1,
      "TextHeight": 0.15,
      "Width": 0.0,
      "Rotation": 0.0,
      "Layer": "E-TEXT"
    },
    {
      "Style": "Standard",
      "Justification": "TopLeft",
      "Contents": "{\\Farial|c0;\\LTitle:\\l\\PSubtitle:}",
      "Direction": {
        "LargestElement": 0,
        "LengthSqrd": 1.0,
        "Length": 1.0,
        "Z": 0.0,
        "Y": 0.0,
        "X": 1.0
      },
      "Location": {
        "X": -6.7999732092131779,
        "Y": -0.15293750679322038,
        "Z": 0.0
      },
      "LineSpaceDistance": 0.25,
      "LineSpaceFactor": 1.0,
      "LineSpacingStyle": 1,
      "TextHeight": 0.15,
      "Width": 0.0,
      "Rotation": 0.0,
      "Layer": "E-TEXT"
    }
  ],
  "Texts": [],
  "Solids": []
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\LoadCalculations\Unit\BlockData\UnitLoadCalculationHeader.json 
{
  "Polylines": [
    {
      "Vectors": [
        {
          "X": -7.0,
          "Y": 0.0,
          "Z": 0.0
        },
        {
          "X": 0.0,
          "Y": 0.0,
          "Z": 0.0
        },
        {
          "X": 0.0,
          "Y": -0.75,
          "Z": 0.0
        },
        {
          "X": -7.0,
          "Y": -0.75,
          "Z": 0.0
        }
      ],
      "LineType": "ByLayer",
      "Closed": true,
      "Layer": "E-TEXT"
    }
  ],
  "Lines": [],
  "Arcs": [],
  "Circles": [],
  "Ellipses": [],
  "MTexts": [
    {
      "Style": "Standard",
      "Justification": "MiddleCenter",
      "Contents": "{\\Farial|c0;SERVICE LOAD CALCULATION}",
      "Direction": {
        "LargestElement": 0,
        "LengthSqrd": 1.0,
        "Length": 1.0,
        "Z": 0.0,
        "Y": 0.0,
        "X": 1.0
      },
      "Location": {
        "X": -3.5,
        "Y": -0.37152114597544283,
        "Z": 6.1232339957367663E-18
      },
      "LineSpaceDistance": 0.33333333333333331,
      "LineSpaceFactor": 1.0,
      "LineSpacingStyle": 1,
      "TextHeight": 0.2,
      "Width": 6.4310568314888314,
      "Rotation": 0.0,
      "Layer": "E-TEXT"
    }
  ],
  "Texts": [],
  "Solids": []
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\SingleLineDiagram\SingleLineDiagram.cs 
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace GMEPElectricalResidential.SingleLineDiagram
{
  public partial class SINGLE_LINE_DIAGRAM : Form
  {
    private List<DraggableObject> draggableObjects = new List<DraggableObject>();
    private DraggableObject currentDraggableObject;
    private bool isDraggingForDeletion = false;
    private int currentID;
    private Point location;

    public SINGLE_LINE_DIAGRAM()
    {
      InitializeComponent();
      currentID = 0;
      location = USERCONTROL_PLACEHOLDER.Location;
      UPWARDS_ARROW.MouseDown += new MouseEventHandler(UPWARDS_ARROW_MouseDown);
      DOWNWARDS_ARROW.MouseDown += new MouseEventHandler(DOWNWARDS_ARROW_MouseDown);
      METER_MAIN.MouseDown += new MouseEventHandler(METER_MAIN_MouseDown);
      MAIN.MouseDown += new MouseEventHandler(MAIN_MouseDown);
      METER_COMBO.MouseDown += new MouseEventHandler(METER_COMBO_MouseDown);
      DISTRIBUTION.MouseDown += new MouseEventHandler(DISTRIBUTION_MouseDown);
      MULTI_METER.MouseDown += new MouseEventHandler(MULTI_METER_MouseDown);
      PANEL.AllowDrop = true;
      PANEL.DragEnter += new DragEventHandler(PANEL_DragEnter);
      PANEL.DragDrop += new DragEventHandler(PANEL_DragDrop);
      PANEL.MouseDown += new MouseEventHandler(PANEL_MouseDown);
      PANEL.MouseMove += new MouseEventHandler(PANEL_MouseMove);
      PANEL.MouseUp += new MouseEventHandler(PANEL_MouseUp);
      PANEL.Paint += new PaintEventHandler(PANEL_Paint);
      PANEL.DoubleClick += new EventHandler(PANEL_DoubleClick);
      TRASH.AllowDrop = true;
      TRASH.DragEnter += new DragEventHandler(TRASH_DragEnter);
      TRASH.DragDrop += new DragEventHandler(TRASH_DragDrop);
      TRASH.DragLeave += TRASH_DragLeave;
    }

    private void PANEL_DoubleClick(object sender, EventArgs e)
    {
      if (currentDraggableObject != null)
      {
        Controls.Remove(USERCONTROL_PLACEHOLDER);
        RemoveAllControls();

        Controls.Add(currentDraggableObject.Form as System.Windows.Forms.Control);
        BLOCK_INFORMATION.Text = currentDraggableObject.Message;
      }
    }

    private void RemoveAllControls()
    {
      draggableObjects.ForEach(draggableObject =>
      {
        Controls.Remove(draggableObject.Form as System.Windows.Forms.Control);
      });
    }

    private void DOWNWARDS_ARROW_MouseDown(object sender, MouseEventArgs e)
    {
      if (e.Button == MouseButtons.Left)
      {
        var data = new DraggableObject()
        {
          Image = DOWNWARDS_ARROW.Image,
          Bounds = new Rectangle(0, 0, 64, 64),
          ID = currentID,
          Name = "DOWNWARDS_ARROW",
          Form = new PullSectionBelowForm(location),
          Message = "Pull Section Below Block"
        };
        DOWNWARDS_ARROW.DoDragDrop(data, DragDropEffects.Copy);
      }
    }

    private void UPWARDS_ARROW_MouseDown(object sender, MouseEventArgs e)
    {
      if (e.Button == MouseButtons.Left)
      {
        var data = new DraggableObject()
        {
          Image = UPWARDS_ARROW.Image,
          Bounds = new Rectangle(0, 0, 64, 64),
          ID = currentID,
          Name = "UPWARDS_ARROW",
          Form = new PullSectionAboveForm(location),
          Message = "Pull Section Above Block"
        };
        UPWARDS_ARROW.DoDragDrop(data, DragDropEffects.Copy);
      }
    }

    private void METER_MAIN_MouseDown(object sender, MouseEventArgs e)
    {
      if (e.Button == MouseButtons.Left)
      {
        var data = new DraggableObject()
        {
          Image = METER_MAIN.Image,
          Bounds = new Rectangle(0, 0, 64, 64),
          ID = currentID,
          Name = "METER_MAIN",
          Form = new MeterAndMainForm(location),
          Message = "Meter Main Block"
        };
        METER_MAIN.DoDragDrop(data, DragDropEffects.Copy);
      }
    }

    private void MAIN_MouseDown(object sender, MouseEventArgs e)
    {
      if (e.Button == MouseButtons.Left)
      {
        var data = new DraggableObject()
        {
          Image = MAIN.Image,
          Bounds = new Rectangle(0, 0, 64, 64),
          ID = currentID,
          Name = "MAIN",
          Form = new MainForm(location),
          Message = "Main Panel Block"
        };
        MAIN.DoDragDrop(data, DragDropEffects.Copy);
      }
    }

    private void METER_COMBO_MouseDown(object sender, MouseEventArgs e)
    {
      if (e.Button == MouseButtons.Left)
      {
        var data = new DraggableObject()
        {
          Image = METER_COMBO.Image,
          Bounds = new Rectangle(0, 0, 64, 64),
          ID = currentID,
          Name = "METER_COMBO",
          Form = new MeterComboForm(location),
          Message = "Meter Combo Block"
        };
        METER_COMBO.DoDragDrop(data, DragDropEffects.Copy);
      }
    }

    private void DISTRIBUTION_MouseDown(object sender, MouseEventArgs e)
    {
      if (e.Button == MouseButtons.Left)
      {
        var data = new DraggableObject()
        {
          Image = DISTRIBUTION.Image,
          Bounds = new Rectangle(0, 0, 64, 64),
          ID = currentID,
          Name = "DISTRIBUTION",
          Form = new DistributionForm(location),
          Message = "Distribution Block"
        };
        DISTRIBUTION.DoDragDrop(data, DragDropEffects.Copy);
      }
    }

    private void MULTI_METER_MouseDown(object sender, MouseEventArgs e)
    {
      if (e.Button == MouseButtons.Left)
      {
        var data = new DraggableObject()
        {
          Image = MULTI_METER.Image,
          Bounds = new Rectangle(0, 0, 64, 64),
          ID = currentID,
          Name = "MULTI_METER"
        };
        MULTI_METER.DoDragDrop(data, DragDropEffects.Copy);
      }
    }

    private void PANEL_DragEnter(object sender, DragEventArgs e)
    {
      if (e.Data.GetDataPresent(typeof(DraggableObject)))
      {
        e.Effect = DragDropEffects.Copy;
      }
      else
      {
        e.Effect = DragDropEffects.None;
      }
    }

    private void PANEL_Paint(object sender, PaintEventArgs e)
    {
      var g = e.Graphics;
      g.TranslateTransform(PANEL.AutoScrollPosition.X, PANEL.AutoScrollPosition.Y);

      foreach (var draggable in draggableObjects)
      {
        e.Graphics.DrawImage(draggable.Image, draggable.Bounds);

        // Draw a border around the image
        if (draggable.IsDragging)
        {
          // You can highlight the border if the item is being dragged
          using (Pen borderPen = new Pen(Color.Blue, 2)) // Red border, 2 pixels wide
          {
            e.Graphics.DrawRectangle(borderPen, draggable.Bounds);
          }
        }
        else
        {
          // Regular border for not-dragging state
          using (Pen borderPen = new Pen(Color.Black, 1)) // Black border, 1 pixel wide
          {
            e.Graphics.DrawRectangle(borderPen, draggable.Bounds);
          }
        }
      }
    }

    private void PANEL_MouseDown(object sender, MouseEventArgs e)
    {
      Point clientPoint = new Point(e.X - PANEL.AutoScrollPosition.X, e.Y - PANEL.AutoScrollPosition.Y);
      foreach (var draggable in draggableObjects)
      {
        if (draggable.Bounds.Contains(clientPoint))
        {
          currentDraggableObject = draggable;
          currentDraggableObject.ClickOffset = new Point(clientPoint.X - draggable.Bounds.X, clientPoint.Y - draggable.Bounds.Y);
          currentDraggableObject.IsDragging = true;

          PANEL.Invalidate();
          break;
        }
      }
    }

    private void PANEL_MouseMove(object sender, MouseEventArgs e)
    {
      if (currentDraggableObject != null && currentDraggableObject.IsDragging)
      {
        Point clientPoint = new Point(e.X - PANEL.AutoScrollPosition.X, e.Y - PANEL.AutoScrollPosition.Y);

        // Calculate the new position, factoring in the click offset
        int newX = clientPoint.X - currentDraggableObject.ClickOffset.X;
        int newY = clientPoint.Y - currentDraggableObject.ClickOffset.Y;

        // Initialize snapping logic with block size and threshold
        const int snapThreshold = 10; // Pixels for snapping threshold
        const int blockSize = 64; // Size of the blocks
        bool snappedHorizontally = false;

        // Find the closest draggable object
        var closestObject = draggableObjects
            .Where(o => o != currentDraggableObject)
            .OrderBy(o => Math.Sqrt(Math.Pow(o.Bounds.X - currentDraggableObject.Bounds.X, 2) + Math.Pow(o.Bounds.Y - currentDraggableObject.Bounds.Y, 2)))
            .FirstOrDefault();

        if (closestObject != null)
        {
          // Horizontal Snapping (Left and Right edges)
          if (Math.Abs(newX + blockSize - closestObject.Bounds.Left) < snapThreshold)
          {
            newX = closestObject.Bounds.Left - blockSize;
            newY = closestObject.Bounds.Y; // Align tops for perfect fit
            snappedHorizontally = true;
          }
          else if (Math.Abs(newX - closestObject.Bounds.Right) < snapThreshold)
          {
            newX = closestObject.Bounds.Right;
            newY = closestObject.Bounds.Y; // Align tops for perfect fit
            snappedHorizontally = true;
          }

          // If not snapped horizontally, consider vertical snapping
          if (!snappedHorizontally)
          {
            // Vertical Snapping (Top and Bottom edges)
            if (Math.Abs(newY + blockSize - closestObject.Bounds.Top) < snapThreshold)
            {
              newY = closestObject.Bounds.Top - blockSize;
              newX = closestObject.Bounds.X; // Align lefts for perfect fit
            }
            else if (Math.Abs(newY - closestObject.Bounds.Bottom) < snapThreshold)
            {
              newY = closestObject.Bounds.Bottom;
              newX = closestObject.Bounds.X; // Align lefts for perfect fit
            }
          }
        }

        // Prevent moving beyond panel bounds
        newX = Math.Max(newX, 0);
        newY = Math.Max(newY, 0);

        // Update the draggable object's position
        currentDraggableObject.Bounds = new Rectangle(newX, newY, blockSize, blockSize);

        if (NearTrashCan(e.Location))
        {
          isDraggingForDeletion = true;
          DoDragDrop(currentDraggableObject, DragDropEffects.Move);
        }
        else
        {
          isDraggingForDeletion = false;
          PANEL.Invalidate(); // Repaint to update the position of the dragged image
        }

        UpdateScrollBars();
        PANEL.Invalidate();
      }
    }

    private void PANEL_MouseUp(object sender, MouseEventArgs e)
    {
      if (currentDraggableObject != null)
      {
        if (!isDraggingForDeletion)
        {
          currentDraggableObject.IsDragging = false;
          currentDraggableObject = null;
          UpdateScrollBars();
          PANEL.Invalidate(); // Repaint to finalize the position and remove the highlight
        }
      }
    }

    private void PANEL_DragDrop(object sender, DragEventArgs e)
    {
      if (e.Data.GetDataPresent(typeof(DraggableObject)))
      {
        Point dropPoint = PANEL.PointToClient(new Point(e.X, e.Y));

        var draggableObject = e.Data.GetData(typeof(DraggableObject)) as DraggableObject;

        if (draggableObject != null)
        {
          Image droppedImage = draggableObject.Image;
          draggableObject.Bounds = new Rectangle(dropPoint, droppedImage.Size);
          currentID++;
          draggableObjects.Add(draggableObject);
          UpdateScrollBars();
          PANEL.Invalidate();
        }
      }
    }

    private void TRASH_DragEnter(object sender, DragEventArgs e)
    {
      // Check if the data being dragged is a DraggableObject
      if (e.Data.GetDataPresent(typeof(DraggableObject)) && isDraggingForDeletion)
      {
        e.Effect = DragDropEffects.Move; // Change the cursor to indicate moving
      }
    }

    private void TRASH_DragLeave(object sender, EventArgs e)
    {
      isDraggingForDeletion = false;
      PANEL.Invalidate();
    }

    private void TRASH_DragDrop(object sender, DragEventArgs e)
    {
      // Check if the data being dropped is a DraggableObject
      if (e.Data.GetDataPresent(typeof(DraggableObject)) && isDraggingForDeletion)
      {
        DraggableObject draggable = (DraggableObject)e.Data.GetData(typeof(DraggableObject));

        RemoveAllControls();
        Controls.Add(USERCONTROL_PLACEHOLDER);
        BLOCK_INFORMATION.Text = "Double click a placed block to view its information";

        // Remove the draggable object from the list
        draggableObjects.Remove(draggable);

        // Redraw the panel to reflect the changes
        PANEL.Invalidate();
      }
    }

    private bool NearTrashCan(Point mouseLocation)
    {
      var relativeX = mouseLocation.X + PANEL.Location.X;
      var relativeY = mouseLocation.Y + PANEL.Location.Y;

      var newLocation = new Point(relativeX, relativeY);

      Console.WriteLine("Mouse Location: " + newLocation);
      Console.WriteLine("Trash Can Contains Mouse: " + TRASH.Bounds.Contains(newLocation));

      return TRASH.Bounds.Contains(newLocation);
    }

    private void UpdateScrollBars()
    {
      int maxWidth = 0;
      int maxHeight = 0;

      foreach (var draggable in draggableObjects)
      {
        // Find the furthest edges of all draggable objects
        int rightEdge = draggable.Bounds.Right;
        int bottomEdge = draggable.Bounds.Bottom;

        if (rightEdge > maxWidth)
        {
          maxWidth = rightEdge;
        }
        if (bottomEdge > maxHeight)
        {
          maxHeight = bottomEdge;
        }
      }

      // Update the AutoScrollMinSize property
      PANEL.AutoScrollMinSize = new Size(maxWidth, maxHeight);
    }
  }

  public class DraggableObject
  {
    public Image Image { get; set; }
    public Rectangle Bounds { get; set; }
    public bool IsDragging { get; set; }
    public Point ClickOffset { get; set; }
    public int ID { get; set; }
    public string Name { get; set; }
    public object Form { get; set; }
    public string Message { get; set; }
  }

  public class DoubleBufferedPanel : Panel
  {
    public DoubleBufferedPanel()
    {
      this.DoubleBuffered = true;
      this.SetStyle(ControlStyles.ResizeRedraw, true);
      this.SetStyle(ControlStyles.OptimizedDoubleBuffer, true);
      this.UpdateStyles();
    }
  }
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\SingleLineDiagram\SingleLineDiagram.Designer.cs 
﻿namespace GMEPElectricalResidential.SingleLineDiagram
{
  partial class SINGLE_LINE_DIAGRAM
  {
    /// <summary>
    /// Required designer variable.
    /// </summary>
    private System.ComponentModel.IContainer components = null;

    /// <summary>
    /// Clean up any resources being used.
    /// </summary>
    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    protected override void Dispose(bool disposing)
    {
      if (disposing && (components != null))
      {
        components.Dispose();
      }
      base.Dispose(disposing);
    }

    #region Windows Form Designer generated code

    /// <summary>
    /// Required method for Designer support - do not modify
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {
      System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SINGLE_LINE_DIAGRAM));
      this.UPWARDS_ARROW = new System.Windows.Forms.PictureBox();
      this.TRASH = new System.Windows.Forms.PictureBox();
      this.DOWNWARDS_ARROW = new System.Windows.Forms.PictureBox();
      this.MAIN = new System.Windows.Forms.PictureBox();
      this.METER_MAIN = new System.Windows.Forms.PictureBox();
      this.METER_COMBO = new System.Windows.Forms.PictureBox();
      this.DISTRIBUTION = new System.Windows.Forms.PictureBox();
      this.MULTI_METER = new System.Windows.Forms.PictureBox();
      this.USERCONTROL_PLACEHOLDER = new System.Windows.Forms.Panel();
      this.BLOCK_INFORMATION = new System.Windows.Forms.Label();
      this.DRAG_AND_DROP = new System.Windows.Forms.Label();
      this.PLACEMENT_AREA = new System.Windows.Forms.Label();
      this.PANEL = new GMEPElectricalResidential.SingleLineDiagram.DoubleBufferedPanel();
      ((System.ComponentModel.ISupportInitialize)(this.UPWARDS_ARROW)).BeginInit();
      ((System.ComponentModel.ISupportInitialize)(this.TRASH)).BeginInit();
      ((System.ComponentModel.ISupportInitialize)(this.DOWNWARDS_ARROW)).BeginInit();
      ((System.ComponentModel.ISupportInitialize)(this.MAIN)).BeginInit();
      ((System.ComponentModel.ISupportInitialize)(this.METER_MAIN)).BeginInit();
      ((System.ComponentModel.ISupportInitialize)(this.METER_COMBO)).BeginInit();
      ((System.ComponentModel.ISupportInitialize)(this.DISTRIBUTION)).BeginInit();
      ((System.ComponentModel.ISupportInitialize)(this.MULTI_METER)).BeginInit();
      this.SuspendLayout();
      // 
      // UPWARDS_ARROW
      // 
      this.UPWARDS_ARROW.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
      this.UPWARDS_ARROW.Image = ((System.Drawing.Image)(resources.GetObject("UPWARDS_ARROW.Image")));
      this.UPWARDS_ARROW.Location = new System.Drawing.Point(12, 45);
      this.UPWARDS_ARROW.Name = "UPWARDS_ARROW";
      this.UPWARDS_ARROW.Size = new System.Drawing.Size(64, 64);
      this.UPWARDS_ARROW.TabIndex = 5;
      this.UPWARDS_ARROW.TabStop = false;
      // 
      // TRASH
      // 
      this.TRASH.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
      this.TRASH.Image = ((System.Drawing.Image)(resources.GetObject("TRASH.Image")));
      this.TRASH.Location = new System.Drawing.Point(82, 683);
      this.TRASH.Name = "TRASH";
      this.TRASH.Size = new System.Drawing.Size(64, 64);
      this.TRASH.TabIndex = 7;
      this.TRASH.TabStop = false;
      // 
      // DOWNWARDS_ARROW
      // 
      this.DOWNWARDS_ARROW.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
      this.DOWNWARDS_ARROW.Image = ((System.Drawing.Image)(resources.GetObject("DOWNWARDS_ARROW.Image")));
      this.DOWNWARDS_ARROW.Location = new System.Drawing.Point(82, 45);
      this.DOWNWARDS_ARROW.Name = "DOWNWARDS_ARROW";
      this.DOWNWARDS_ARROW.Size = new System.Drawing.Size(64, 64);
      this.DOWNWARDS_ARROW.TabIndex = 8;
      this.DOWNWARDS_ARROW.TabStop = false;
      // 
      // MAIN
      // 
      this.MAIN.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
      this.MAIN.Image = ((System.Drawing.Image)(resources.GetObject("MAIN.Image")));
      this.MAIN.Location = new System.Drawing.Point(82, 115);
      this.MAIN.Name = "MAIN";
      this.MAIN.Size = new System.Drawing.Size(64, 64);
      this.MAIN.TabIndex = 9;
      this.MAIN.TabStop = false;
      // 
      // METER_MAIN
      // 
      this.METER_MAIN.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
      this.METER_MAIN.Image = ((System.Drawing.Image)(resources.GetObject("METER_MAIN.Image")));
      this.METER_MAIN.Location = new System.Drawing.Point(12, 115);
      this.METER_MAIN.Name = "METER_MAIN";
      this.METER_MAIN.Size = new System.Drawing.Size(64, 64);
      this.METER_MAIN.TabIndex = 10;
      this.METER_MAIN.TabStop = false;
      // 
      // METER_COMBO
      // 
      this.METER_COMBO.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
      this.METER_COMBO.Image = ((System.Drawing.Image)(resources.GetObject("METER_COMBO.Image")));
      this.METER_COMBO.Location = new System.Drawing.Point(12, 185);
      this.METER_COMBO.Name = "METER_COMBO";
      this.METER_COMBO.Size = new System.Drawing.Size(64, 64);
      this.METER_COMBO.TabIndex = 11;
      this.METER_COMBO.TabStop = false;
      // 
      // DISTRIBUTION
      // 
      this.DISTRIBUTION.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
      this.DISTRIBUTION.Image = ((System.Drawing.Image)(resources.GetObject("DISTRIBUTION.Image")));
      this.DISTRIBUTION.Location = new System.Drawing.Point(82, 185);
      this.DISTRIBUTION.Name = "DISTRIBUTION";
      this.DISTRIBUTION.Size = new System.Drawing.Size(64, 64);
      this.DISTRIBUTION.TabIndex = 12;
      this.DISTRIBUTION.TabStop = false;
      // 
      // MULTI_METER
      // 
      this.MULTI_METER.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
      this.MULTI_METER.Image = ((System.Drawing.Image)(resources.GetObject("MULTI_METER.Image")));
      this.MULTI_METER.Location = new System.Drawing.Point(82, 255);
      this.MULTI_METER.Name = "MULTI_METER";
      this.MULTI_METER.Size = new System.Drawing.Size(64, 64);
      this.MULTI_METER.TabIndex = 13;
      this.MULTI_METER.TabStop = false;
      // 
      // USERCONTROL_PLACEHOLDER
      // 
      this.USERCONTROL_PLACEHOLDER.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
      this.USERCONTROL_PLACEHOLDER.Location = new System.Drawing.Point(1060, 45);
      this.USERCONTROL_PLACEHOLDER.Name = "USERCONTROL_PLACEHOLDER";
      this.USERCONTROL_PLACEHOLDER.Size = new System.Drawing.Size(270, 702);
      this.USERCONTROL_PLACEHOLDER.TabIndex = 14;
      // 
      // BLOCK_INFORMATION
      // 
      this.BLOCK_INFORMATION.BackColor = System.Drawing.Color.Transparent;
      this.BLOCK_INFORMATION.Location = new System.Drawing.Point(1060, 21);
      this.BLOCK_INFORMATION.Name = "BLOCK_INFORMATION";
      this.BLOCK_INFORMATION.Size = new System.Drawing.Size(270, 13);
      this.BLOCK_INFORMATION.TabIndex = 15;
      this.BLOCK_INFORMATION.Text = "Double click a placed block to view its information";
      this.BLOCK_INFORMATION.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
      // 
      // DRAG_AND_DROP
      // 
      this.DRAG_AND_DROP.BackColor = System.Drawing.Color.Transparent;
      this.DRAG_AND_DROP.Location = new System.Drawing.Point(12, 12);
      this.DRAG_AND_DROP.Name = "DRAG_AND_DROP";
      this.DRAG_AND_DROP.Size = new System.Drawing.Size(134, 30);
      this.DRAG_AND_DROP.TabIndex = 16;
      this.DRAG_AND_DROP.Text = "Drag and Drop";
      this.DRAG_AND_DROP.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
      // 
      // PLACEMENT_AREA
      // 
      this.PLACEMENT_AREA.BackColor = System.Drawing.Color.Transparent;
      this.PLACEMENT_AREA.Location = new System.Drawing.Point(152, 12);
      this.PLACEMENT_AREA.Name = "PLACEMENT_AREA";
      this.PLACEMENT_AREA.Size = new System.Drawing.Size(902, 30);
      this.PLACEMENT_AREA.TabIndex = 17;
      this.PLACEMENT_AREA.Text = "Placement Area";
      this.PLACEMENT_AREA.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
      // 
      // PANEL
      // 
      this.PANEL.AllowDrop = true;
      this.PANEL.AutoScroll = true;
      this.PANEL.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
      this.PANEL.Location = new System.Drawing.Point(152, 45);
      this.PANEL.Name = "PANEL";
      this.PANEL.Size = new System.Drawing.Size(902, 702);
      this.PANEL.TabIndex = 6;
      // 
      // SINGLE_LINE_DIAGRAM
      // 
      this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
      this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
      this.ClientSize = new System.Drawing.Size(1342, 759);
      this.Controls.Add(this.PLACEMENT_AREA);
      this.Controls.Add(this.DRAG_AND_DROP);
      this.Controls.Add(this.BLOCK_INFORMATION);
      this.Controls.Add(this.USERCONTROL_PLACEHOLDER);
      this.Controls.Add(this.MULTI_METER);
      this.Controls.Add(this.DISTRIBUTION);
      this.Controls.Add(this.METER_COMBO);
      this.Controls.Add(this.METER_MAIN);
      this.Controls.Add(this.MAIN);
      this.Controls.Add(this.DOWNWARDS_ARROW);
      this.Controls.Add(this.TRASH);
      this.Controls.Add(this.PANEL);
      this.Controls.Add(this.UPWARDS_ARROW);
      this.Name = "SINGLE_LINE_DIAGRAM";
      this.Text = "Single Line Diagram";
      ((System.ComponentModel.ISupportInitialize)(this.UPWARDS_ARROW)).EndInit();
      ((System.ComponentModel.ISupportInitialize)(this.TRASH)).EndInit();
      ((System.ComponentModel.ISupportInitialize)(this.DOWNWARDS_ARROW)).EndInit();
      ((System.ComponentModel.ISupportInitialize)(this.MAIN)).EndInit();
      ((System.ComponentModel.ISupportInitialize)(this.METER_MAIN)).EndInit();
      ((System.ComponentModel.ISupportInitialize)(this.METER_COMBO)).EndInit();
      ((System.ComponentModel.ISupportInitialize)(this.DISTRIBUTION)).EndInit();
      ((System.ComponentModel.ISupportInitialize)(this.MULTI_METER)).EndInit();
      this.ResumeLayout(false);

    }

    #endregion
    private DoubleBufferedPanel PANEL;
    private System.Windows.Forms.PictureBox UPWARDS_ARROW;
    private System.Windows.Forms.PictureBox TRASH;
    private System.Windows.Forms.PictureBox DOWNWARDS_ARROW;
    private System.Windows.Forms.PictureBox MAIN;
    private System.Windows.Forms.PictureBox METER_MAIN;
    private System.Windows.Forms.PictureBox METER_COMBO;
    private System.Windows.Forms.PictureBox DISTRIBUTION;
    private System.Windows.Forms.PictureBox MULTI_METER;
    private System.Windows.Forms.Panel USERCONTROL_PLACEHOLDER;
    private System.Windows.Forms.Label BLOCK_INFORMATION;
    private System.Windows.Forms.Label DRAG_AND_DROP;
    private System.Windows.Forms.Label PLACEMENT_AREA;
  }
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\SingleLineDiagram\UserControls\DistributionForm.cs 
﻿using Autodesk.AutoCAD.ApplicationServices;
using Autodesk.AutoCAD.DatabaseServices;
using Autodesk.AutoCAD.EditorInput;
using Autodesk.AutoCAD.Geometry;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static Autodesk.AutoCAD.ApplicationServices.Core.Application;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace GMEPElectricalResidential
{
  public partial class DistributionForm : UserControl
  {
    private TabPage _draggingTab = null;
    private string distributionWaterMark = "Enter dist name...";
    private int tabCount = 0;

    public DistributionForm(Point location)
    {
      Location = location;
      InitializeComponent();
      SetWatermarkText();

      CONFIGURATION.SelectedIndex = 0;
      KAIC.SelectedIndex = 0;
      SIZE.SelectedIndex = 0;
      PARENT.SelectedIndex = 0;

      DISTRIBUTION_NAME.Enter += PANEL_NAME_Enter;
      DISTRIBUTION_NAME.Leave += PANEL_NAME_Leave;
      TABS.MouseDown += TABS_MouseDown;
      TABS.MouseMove += TABS_MouseMove;
      TABS.MouseUp += TABS_MouseUp;
    }

    private void ADD_CHILD_Click(object sender, EventArgs e)
    {
      CreateTab();
    }

    private void DELETE_CHILD_Click(object sender, EventArgs e)
    {
      int index = TABS.SelectedIndex;
      RemoveTab(index);
    }

    // WATERMARKS
    private void SetWatermarkText()
    {
      DISTRIBUTION_NAME.ForeColor = Color.Gray;
      DISTRIBUTION_NAME.Text = distributionWaterMark;
    }

    private void PANEL_NAME_Enter(object sender, EventArgs e)
    {
      if (DISTRIBUTION_NAME.Text == distributionWaterMark)
      {
        DISTRIBUTION_NAME.Text = "";
        DISTRIBUTION_NAME.ForeColor = Color.Black;
      }
    }

    private void PANEL_NAME_Leave(object sender, EventArgs e)
    {
      if (string.IsNullOrWhiteSpace(DISTRIBUTION_NAME.Text))
      {
        SetWatermarkText();
      }
    }

    // TABS
    private void TABS_MouseDown(object sender, MouseEventArgs e)
    {
      _draggingTab = GetTabPageByTab(TABS, e.Location);
    }

    private void TABS_MouseMove(object sender, MouseEventArgs e)
    {
      if (e.Button != MouseButtons.Left || _draggingTab == null)
        return;

      var targetTab = GetTabPageByTab(TABS, e.Location);
      if (targetTab != null && _draggingTab != targetTab)
      {
        int targetIndex = TABS.TabPages.IndexOf(targetTab);
        int draggingTabIndex = TABS.TabPages.IndexOf(_draggingTab);

        // Check if we need to move the tab
        if (targetIndex != draggingTabIndex)
        {
          // Determine the direction of the move based on mouse position relative to the target tab's midpoint
          Rectangle targetTabRect = TABS.GetTabRect(targetIndex);
          bool moveRight = e.X > (targetTabRect.Left + targetTabRect.Width / 2);

          // Calculate new index based on the direction
          int newIndex = moveRight ? targetIndex + 1 : targetIndex;

          // Ensure new index is within bounds
          newIndex = Math.Max(0, Math.Min(TABS.TabPages.Count - 1, newIndex));

          // Move the tab
          TABS.TabPages.Remove(_draggingTab);
          TABS.TabPages.Insert(newIndex, _draggingTab);
          TABS.SelectedTab = _draggingTab;
        }
      }
    }

    private void TABS_MouseUp(object sender, MouseEventArgs e)
    {
      _draggingTab = null;
      RenameTabs();
    }

    private TabPage GetTabPageByTab(TabControl tabControl, Point position)
    {
      for (int i = 0; i < tabControl.TabCount; i++)
      {
        if (tabControl.GetTabRect(i).Contains(position))
          return tabControl.TabPages[i];
      }
      return null;
    }

    private void CreateTab()
    {
      tabCount++;

      TabPage tab = new TabPage
      {
        Text = "Breaker " + tabCount.ToString()
      };

      var tabUserControl = new ItemTab();

      tab.Controls.Add(tabUserControl);
      TABS.TabPages.Add(tab);
    }

    private void RemoveTab(int index)
    {
      if (TABS.TabPages.Count > 0)
      {
        TABS.TabPages.RemoveAt(index);
      }

      RenameTabs();
      tabCount--;
    }

    private void RenameTabs()
    {
      for (int i = 0; i < TABS.TabPages.Count; i++)
      {
        TABS.TabPages[i].Text = $"Breaker {i + 1}";
      }
    }

    // HIDE COMPONENT
    private void PARENT_SelectedIndexChanged(object sender, EventArgs e)
    {
      if (PARENT.SelectedIndex == 0)
      {
        DISTANCE_FROM_PARENT.Enabled = false;
        DISTANCE_FROM_PARENT_PANEL.BackColor = Color.FromKnownColor(KnownColor.Control);
        DISTANCE_FROM_PARENT_LABEL.Text = "";
      }
      else
      {
        DISTANCE_FROM_PARENT.Enabled = true;
        DISTANCE_FROM_PARENT_PANEL.BackColor = Color.FromKnownColor(KnownColor.Window);
        DISTANCE_FROM_PARENT_LABEL.Text = "Distance from Parent (ft)";
      }
    }

    // SET LOCATION
    private void SET_DISTRIBUTION_LOCATION_Click(object sender, EventArgs e)
    {
      this.Parent.Hide();
      using (DocumentLock docLock = DocumentManager.MdiActiveDocument.LockDocument())
      {
        SetCurrentSpaceToModelSpace();
        Point3d location = PromptUserToClick();
        this.Parent.Show();
      }
    }

    public void SetCurrentSpaceToModelSpace()
    {
      LayoutManager acLayoutMgr = LayoutManager.Current;
      acLayoutMgr.CurrentLayout = "Model";
    }

    public Point3d PromptUserToClick()
    {
      Document acDoc = DocumentManager.MdiActiveDocument;
      Database acCurDb = acDoc.Database;

      using (Transaction acTrans = acCurDb.TransactionManager.StartTransaction())
      {
        PromptPointResult pPtRes;
        PromptPointOptions pPtOpts = new PromptPointOptions("");

        pPtOpts.Message = "\nClick where distribution panel is located.";
        pPtRes = acDoc.Editor.GetPoint(pPtOpts);

        if (pPtRes.Status == PromptStatus.OK)
        {
          return pPtRes.Value;
        }
      }

      return new Point3d();
    }
  }

  public class ElectricalDistribution
  {
    public string Name { get; set; }
    public bool Status { get; set; }
    public string Parent { get; set; }
    public string Size { get; set; }
    public string Configuration { get; set; }
    public string KAIC { get; set; }
    public Point3d Location { get; set; }
    public string DistanceFromParent { get; set; }
    public List<ElectricalPanel> Panels { get; set; }
  }

  public class ElectricalPanel
  {
    public Point3d Location { get; set; }
  }
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\SingleLineDiagram\UserControls\DistributionForm.Designer.cs 
﻿namespace GMEPElectricalResidential
{
  partial class DistributionForm
  {
    /// <summary> 
    /// Required designer variable.
    /// </summary>
    private System.ComponentModel.IContainer components = null;

    /// <summary> 
    /// Clean up any resources being used.
    /// </summary>
    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    protected override void Dispose(bool disposing)
    {
      if (disposing && (components != null))
      {
        components.Dispose();
      }
      base.Dispose(disposing);
    }

    #region Component Designer generated code

    /// <summary> 
    /// Required method for Designer support - do not modify 
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {
      this.label1 = new System.Windows.Forms.Label();
      this.label2 = new System.Windows.Forms.Label();
      this.CONFIGURATION = new System.Windows.Forms.ComboBox();
      this.label3 = new System.Windows.Forms.Label();
      this.KAIC = new System.Windows.Forms.ComboBox();
      this.label4 = new System.Windows.Forms.Label();
      this.TABS = new System.Windows.Forms.TabControl();
      this.SIZE = new System.Windows.Forms.ComboBox();
      this.NEW = new System.Windows.Forms.RadioButton();
      this.EXISTING = new System.Windows.Forms.RadioButton();
      this.STATUS = new System.Windows.Forms.GroupBox();
      this.panel1 = new System.Windows.Forms.Panel();
      this.DISTRIBUTION_NAME = new System.Windows.Forms.TextBox();
      this.BREAKER_PANELS = new System.Windows.Forms.Button();
      this.BREAKER_LOAD_CALCULATIONS = new System.Windows.Forms.Button();
      this.DELETE_BREAKER = new System.Windows.Forms.Button();
      this.ADD_BREAKER = new System.Windows.Forms.Button();
      this.PARENT = new System.Windows.Forms.ComboBox();
      this.label5 = new System.Windows.Forms.Label();
      this.SET_DISTRIBUTION_LOCATION = new System.Windows.Forms.Button();
      this.BREAKER_EQUIPMENT = new System.Windows.Forms.Button();
      this.DISTANCE_FROM_PARENT_LABEL = new System.Windows.Forms.Label();
      this.DISTANCE_FROM_PARENT_PANEL = new System.Windows.Forms.Panel();
      this.DISTANCE_FROM_PARENT = new System.Windows.Forms.TextBox();
      this.STATUS.SuspendLayout();
      this.panel1.SuspendLayout();
      this.DISTANCE_FROM_PARENT_PANEL.SuspendLayout();
      this.SuspendLayout();
      // 
      // label1
      // 
      this.label1.AutoSize = true;
      this.label1.Location = new System.Drawing.Point(9, 84);
      this.label1.Margin = new System.Windows.Forms.Padding(0);
      this.label1.Name = "label1";
      this.label1.Size = new System.Drawing.Size(27, 13);
      this.label1.TabIndex = 1;
      this.label1.Text = "Size";
      // 
      // label2
      // 
      this.label2.AutoSize = true;
      this.label2.Location = new System.Drawing.Point(9, 126);
      this.label2.Margin = new System.Windows.Forms.Padding(2);
      this.label2.Name = "label2";
      this.label2.Size = new System.Drawing.Size(69, 13);
      this.label2.TabIndex = 2;
      this.label2.Text = "Configuration";
      // 
      // CONFIGURATION
      // 
      this.CONFIGURATION.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
      this.CONFIGURATION.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.CONFIGURATION.FormattingEnabled = true;
      this.CONFIGURATION.Items.AddRange(new object[] {
            "120/208V 1PH 3W",
            "120/240V 1PH 3W",
            "120/208V 3PH 4W",
            "120/240V 3PH 4W",
            "277/480V 3PH 4W"});
      this.CONFIGURATION.Location = new System.Drawing.Point(6, 141);
      this.CONFIGURATION.Margin = new System.Windows.Forms.Padding(2);
      this.CONFIGURATION.Name = "CONFIGURATION";
      this.CONFIGURATION.Size = new System.Drawing.Size(240, 21);
      this.CONFIGURATION.TabIndex = 4;
      // 
      // label3
      // 
      this.label3.AutoSize = true;
      this.label3.Location = new System.Drawing.Point(8, 166);
      this.label3.Margin = new System.Windows.Forms.Padding(2);
      this.label3.Name = "label3";
      this.label3.Size = new System.Drawing.Size(31, 13);
      this.label3.TabIndex = 5;
      this.label3.Text = "KAIC";
      // 
      // KAIC
      // 
      this.KAIC.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.KAIC.FormattingEnabled = true;
      this.KAIC.Items.AddRange(new object[] {
            "N/A",
            "10",
            "22",
            "42",
            "65"});
      this.KAIC.Location = new System.Drawing.Point(6, 181);
      this.KAIC.Margin = new System.Windows.Forms.Padding(2);
      this.KAIC.Name = "KAIC";
      this.KAIC.Size = new System.Drawing.Size(240, 21);
      this.KAIC.TabIndex = 5;
      // 
      // label4
      // 
      this.label4.AutoSize = true;
      this.label4.BackColor = System.Drawing.Color.Transparent;
      this.label4.Location = new System.Drawing.Point(9, 6);
      this.label4.Margin = new System.Windows.Forms.Padding(0);
      this.label4.Name = "label4";
      this.label4.Size = new System.Drawing.Size(35, 13);
      this.label4.TabIndex = 9;
      this.label4.Text = "Name";
      // 
      // TABS
      // 
      this.TABS.Location = new System.Drawing.Point(6, 314);
      this.TABS.Margin = new System.Windows.Forms.Padding(0);
      this.TABS.Name = "TABS";
      this.TABS.SelectedIndex = 0;
      this.TABS.Size = new System.Drawing.Size(240, 263);
      this.TABS.TabIndex = 8;
      // 
      // SIZE
      // 
      this.SIZE.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.SIZE.FormattingEnabled = true;
      this.SIZE.Items.AddRange(new object[] {
            "100A",
            "200A",
            "400A",
            "600A",
            "800A",
            "1000A",
            "1200A",
            "1600A",
            "2000A"});
      this.SIZE.Location = new System.Drawing.Point(6, 99);
      this.SIZE.Margin = new System.Windows.Forms.Padding(2);
      this.SIZE.Name = "SIZE";
      this.SIZE.Size = new System.Drawing.Size(240, 21);
      this.SIZE.TabIndex = 3;
      // 
      // NEW
      // 
      this.NEW.AutoSize = true;
      this.NEW.Checked = true;
      this.NEW.Location = new System.Drawing.Point(10, 17);
      this.NEW.Name = "NEW";
      this.NEW.Size = new System.Drawing.Size(47, 17);
      this.NEW.TabIndex = 1;
      this.NEW.TabStop = true;
      this.NEW.Text = "New";
      this.NEW.UseVisualStyleBackColor = true;
      // 
      // EXISTING
      // 
      this.EXISTING.AutoSize = true;
      this.EXISTING.Location = new System.Drawing.Point(58, 17);
      this.EXISTING.Margin = new System.Windows.Forms.Padding(0);
      this.EXISTING.Name = "EXISTING";
      this.EXISTING.Size = new System.Drawing.Size(61, 17);
      this.EXISTING.TabIndex = 2;
      this.EXISTING.TabStop = true;
      this.EXISTING.Text = "Existing";
      this.EXISTING.UseVisualStyleBackColor = true;
      // 
      // STATUS
      // 
      this.STATUS.Controls.Add(this.NEW);
      this.STATUS.Controls.Add(this.EXISTING);
      this.STATUS.Location = new System.Drawing.Point(121, 6);
      this.STATUS.Name = "STATUS";
      this.STATUS.Padding = new System.Windows.Forms.Padding(0);
      this.STATUS.Size = new System.Drawing.Size(125, 42);
      this.STATUS.TabIndex = 1;
      this.STATUS.TabStop = false;
      this.STATUS.Text = "Status";
      // 
      // panel1
      // 
      this.panel1.BackColor = System.Drawing.SystemColors.Window;
      this.panel1.Controls.Add(this.DISTRIBUTION_NAME);
      this.panel1.Location = new System.Drawing.Point(6, 22);
      this.panel1.Name = "panel1";
      this.panel1.Padding = new System.Windows.Forms.Padding(3);
      this.panel1.Size = new System.Drawing.Size(105, 21);
      this.panel1.TabIndex = 0;
      // 
      // DISTRIBUTION_NAME
      // 
      this.DISTRIBUTION_NAME.BorderStyle = System.Windows.Forms.BorderStyle.None;
      this.DISTRIBUTION_NAME.Location = new System.Drawing.Point(6, 4);
      this.DISTRIBUTION_NAME.Name = "DISTRIBUTION_NAME";
      this.DISTRIBUTION_NAME.Size = new System.Drawing.Size(93, 13);
      this.DISTRIBUTION_NAME.TabIndex = 0;
      // 
      // BREAKER_PANELS
      // 
      this.BREAKER_PANELS.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.BREAKER_PANELS.Location = new System.Drawing.Point(6, 612);
      this.BREAKER_PANELS.Name = "BREAKER_PANELS";
      this.BREAKER_PANELS.Size = new System.Drawing.Size(240, 23);
      this.BREAKER_PANELS.TabIndex = 11;
      this.BREAKER_PANELS.Text = "Breaker Panels";
      this.BREAKER_PANELS.UseVisualStyleBackColor = true;
      // 
      // BREAKER_LOAD_CALCULATIONS
      // 
      this.BREAKER_LOAD_CALCULATIONS.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.BREAKER_LOAD_CALCULATIONS.Location = new System.Drawing.Point(6, 641);
      this.BREAKER_LOAD_CALCULATIONS.Name = "BREAKER_LOAD_CALCULATIONS";
      this.BREAKER_LOAD_CALCULATIONS.Size = new System.Drawing.Size(240, 23);
      this.BREAKER_LOAD_CALCULATIONS.TabIndex = 12;
      this.BREAKER_LOAD_CALCULATIONS.Text = "Breaker Load Calculations";
      this.BREAKER_LOAD_CALCULATIONS.UseVisualStyleBackColor = true;
      // 
      // DELETE_BREAKER
      // 
      this.DELETE_BREAKER.BackColor = System.Drawing.Color.IndianRed;
      this.DELETE_BREAKER.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.DELETE_BREAKER.Location = new System.Drawing.Point(129, 583);
      this.DELETE_BREAKER.Name = "DELETE_BREAKER";
      this.DELETE_BREAKER.Size = new System.Drawing.Size(117, 23);
      this.DELETE_BREAKER.TabIndex = 10;
      this.DELETE_BREAKER.Text = "Delete Breaker";
      this.DELETE_BREAKER.UseVisualStyleBackColor = false;
      this.DELETE_BREAKER.Click += new System.EventHandler(this.DELETE_CHILD_Click);
      // 
      // ADD_BREAKER
      // 
      this.ADD_BREAKER.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.ADD_BREAKER.Location = new System.Drawing.Point(6, 583);
      this.ADD_BREAKER.Name = "ADD_BREAKER";
      this.ADD_BREAKER.Size = new System.Drawing.Size(113, 23);
      this.ADD_BREAKER.TabIndex = 9;
      this.ADD_BREAKER.Text = "Add Breaker";
      this.ADD_BREAKER.UseVisualStyleBackColor = true;
      this.ADD_BREAKER.Click += new System.EventHandler(this.ADD_CHILD_Click);
      // 
      // PARENT
      // 
      this.PARENT.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
      this.PARENT.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.PARENT.FormattingEnabled = true;
      this.PARENT.Items.AddRange(new object[] {
            "Main"});
      this.PARENT.Location = new System.Drawing.Point(6, 61);
      this.PARENT.Margin = new System.Windows.Forms.Padding(2);
      this.PARENT.Name = "PARENT";
      this.PARENT.Size = new System.Drawing.Size(240, 21);
      this.PARENT.TabIndex = 2;
      this.PARENT.SelectedIndexChanged += new System.EventHandler(this.PARENT_SelectedIndexChanged);
      // 
      // label5
      // 
      this.label5.AutoSize = true;
      this.label5.Location = new System.Drawing.Point(9, 46);
      this.label5.Margin = new System.Windows.Forms.Padding(2);
      this.label5.Name = "label5";
      this.label5.Size = new System.Drawing.Size(38, 13);
      this.label5.TabIndex = 27;
      this.label5.Text = "Parent";
      // 
      // SET_DISTRIBUTION_LOCATION
      // 
      this.SET_DISTRIBUTION_LOCATION.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.SET_DISTRIBUTION_LOCATION.Location = new System.Drawing.Point(6, 243);
      this.SET_DISTRIBUTION_LOCATION.Name = "SET_DISTRIBUTION_LOCATION";
      this.SET_DISTRIBUTION_LOCATION.Size = new System.Drawing.Size(240, 23);
      this.SET_DISTRIBUTION_LOCATION.TabIndex = 7;
      this.SET_DISTRIBUTION_LOCATION.Text = "Set Distribution Location";
      this.SET_DISTRIBUTION_LOCATION.UseVisualStyleBackColor = true;
      this.SET_DISTRIBUTION_LOCATION.Click += new System.EventHandler(this.SET_DISTRIBUTION_LOCATION_Click);
      // 
      // BREAKER_EQUIPMENT
      // 
      this.BREAKER_EQUIPMENT.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.BREAKER_EQUIPMENT.Location = new System.Drawing.Point(6, 670);
      this.BREAKER_EQUIPMENT.Name = "BREAKER_EQUIPMENT";
      this.BREAKER_EQUIPMENT.Size = new System.Drawing.Size(240, 23);
      this.BREAKER_EQUIPMENT.TabIndex = 13;
      this.BREAKER_EQUIPMENT.Text = "Breaker Equipment";
      this.BREAKER_EQUIPMENT.UseVisualStyleBackColor = true;
      // 
      // DISTANCE_FROM_PARENT_LABEL
      // 
      this.DISTANCE_FROM_PARENT_LABEL.AutoSize = true;
      this.DISTANCE_FROM_PARENT_LABEL.Location = new System.Drawing.Point(8, 206);
      this.DISTANCE_FROM_PARENT_LABEL.Margin = new System.Windows.Forms.Padding(2);
      this.DISTANCE_FROM_PARENT_LABEL.Name = "DISTANCE_FROM_PARENT_LABEL";
      this.DISTANCE_FROM_PARENT_LABEL.Size = new System.Drawing.Size(106, 13);
      this.DISTANCE_FROM_PARENT_LABEL.TabIndex = 31;
      this.DISTANCE_FROM_PARENT_LABEL.Text = "Distance from Parent";
      // 
      // DISTANCE_FROM_PARENT_PANEL
      // 
      this.DISTANCE_FROM_PARENT_PANEL.BackColor = System.Drawing.SystemColors.Control;
      this.DISTANCE_FROM_PARENT_PANEL.Controls.Add(this.DISTANCE_FROM_PARENT);
      this.DISTANCE_FROM_PARENT_PANEL.Location = new System.Drawing.Point(6, 220);
      this.DISTANCE_FROM_PARENT_PANEL.Name = "DISTANCE_FROM_PARENT_PANEL";
      this.DISTANCE_FROM_PARENT_PANEL.Padding = new System.Windows.Forms.Padding(3);
      this.DISTANCE_FROM_PARENT_PANEL.Size = new System.Drawing.Size(240, 21);
      this.DISTANCE_FROM_PARENT_PANEL.TabIndex = 6;
      // 
      // DISTANCE_FROM_PARENT
      // 
      this.DISTANCE_FROM_PARENT.BorderStyle = System.Windows.Forms.BorderStyle.None;
      this.DISTANCE_FROM_PARENT.Enabled = false;
      this.DISTANCE_FROM_PARENT.Location = new System.Drawing.Point(6, 4);
      this.DISTANCE_FROM_PARENT.Name = "DISTANCE_FROM_PARENT";
      this.DISTANCE_FROM_PARENT.Size = new System.Drawing.Size(228, 13);
      this.DISTANCE_FROM_PARENT.TabIndex = 0;
      // 
      // DistributionForm
      // 
      this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
      this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
      this.BackColor = System.Drawing.SystemColors.Control;
      this.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
      this.Controls.Add(this.DISTANCE_FROM_PARENT_PANEL);
      this.Controls.Add(this.DISTANCE_FROM_PARENT_LABEL);
      this.Controls.Add(this.BREAKER_EQUIPMENT);
      this.Controls.Add(this.SET_DISTRIBUTION_LOCATION);
      this.Controls.Add(this.PARENT);
      this.Controls.Add(this.label5);
      this.Controls.Add(this.DELETE_BREAKER);
      this.Controls.Add(this.ADD_BREAKER);
      this.Controls.Add(this.BREAKER_LOAD_CALCULATIONS);
      this.Controls.Add(this.BREAKER_PANELS);
      this.Controls.Add(this.panel1);
      this.Controls.Add(this.STATUS);
      this.Controls.Add(this.SIZE);
      this.Controls.Add(this.TABS);
      this.Controls.Add(this.label4);
      this.Controls.Add(this.KAIC);
      this.Controls.Add(this.label3);
      this.Controls.Add(this.CONFIGURATION);
      this.Controls.Add(this.label2);
      this.Controls.Add(this.label1);
      this.Name = "DistributionForm";
      this.Padding = new System.Windows.Forms.Padding(6);
      this.Size = new System.Drawing.Size(252, 702);
      this.Tag = "UPWARDS_ARROW";
      this.STATUS.ResumeLayout(false);
      this.STATUS.PerformLayout();
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      this.DISTANCE_FROM_PARENT_PANEL.ResumeLayout(false);
      this.DISTANCE_FROM_PARENT_PANEL.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();

    }

    #endregion
    private System.Windows.Forms.Label label1;
    private System.Windows.Forms.Label label2;
    private System.Windows.Forms.ComboBox CONFIGURATION;
    private System.Windows.Forms.Label label3;
    private System.Windows.Forms.ComboBox KAIC;
    private System.Windows.Forms.Label label4;
    private System.Windows.Forms.TabControl TABS;
    private System.Windows.Forms.ComboBox SIZE;
    private System.Windows.Forms.RadioButton NEW;
    private System.Windows.Forms.RadioButton EXISTING;
    private System.Windows.Forms.GroupBox STATUS;
    private System.Windows.Forms.Panel panel1;
    private System.Windows.Forms.TextBox DISTRIBUTION_NAME;
    private System.Windows.Forms.Button BREAKER_PANELS;
    private System.Windows.Forms.Button BREAKER_LOAD_CALCULATIONS;
    private System.Windows.Forms.Button DELETE_BREAKER;
    private System.Windows.Forms.Button ADD_BREAKER;
    private System.Windows.Forms.ComboBox PARENT;
    private System.Windows.Forms.Label label5;
    private System.Windows.Forms.Button SET_DISTRIBUTION_LOCATION;
    private System.Windows.Forms.Button BREAKER_EQUIPMENT;
    private System.Windows.Forms.Label DISTANCE_FROM_PARENT_LABEL;
    private System.Windows.Forms.Panel DISTANCE_FROM_PARENT_PANEL;
    private System.Windows.Forms.TextBox DISTANCE_FROM_PARENT;
  }
}
 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\SingleLineDiagram\UserControls\ItemTab.cs 
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace GMEPElectricalResidential
{
  public partial class ItemTab : UserControl
  {
    private string waterMark = "Enter name...";

    public ItemTab()
    {
      InitializeComponent();
      SetWatermarkText();

      TYPE.SelectedIndex = 2;
      BREAKER_SIZES.SelectedIndex = 8;
      XFMR.SelectedIndex = 0;

      NAME.Enter += NAME_Enter;
      NAME.Leave += NAME_Leave;
    }

    private void SetWatermarkText()
    {
      NAME.ForeColor = Color.Gray;
      NAME.Text = waterMark;
    }

    private void TYPE_SelectedIndexChanged(object sender, EventArgs e)
    {
      if (TYPE.SelectedIndex == 0)
      {
        NAME.Enabled = false;
      }
      else
      {
        NAME.Enabled = true;
      }
    }

    private void NAME_Enter(object sender, EventArgs e)
    {
      if (NAME.Text == waterMark)
      {
        NAME.Text = "";
        NAME.ForeColor = Color.Black;
      }
    }

    private void NAME_Leave(object sender, EventArgs e)
    {
      if (NAME.Text == "")
      {
        SetWatermarkText();
      }
    }
  }
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\SingleLineDiagram\UserControls\ItemTab.Designer.cs 
﻿namespace GMEPElectricalResidential
{
  partial class ItemTab
  {
    /// <summary> 
    /// Required designer variable.
    /// </summary>
    private System.ComponentModel.IContainer components = null;

    /// <summary> 
    /// Clean up any resources being used.
    /// </summary>
    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    protected override void Dispose(bool disposing)
    {
      if (disposing && (components != null))
      {
        components.Dispose();
      }
      base.Dispose(disposing);
    }

    #region Component Designer generated code

    /// <summary> 
    /// Required method for Designer support - do not modify 
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {
      this.TYPE = new System.Windows.Forms.ComboBox();
      this.label5 = new System.Windows.Forms.Label();
      this.BREAKER_SIZES = new System.Windows.Forms.ComboBox();
      this.label1 = new System.Windows.Forms.Label();
      this.label2 = new System.Windows.Forms.Label();
      this.NEW = new System.Windows.Forms.RadioButton();
      this.EXISTING = new System.Windows.Forms.RadioButton();
      this.STATUS = new System.Windows.Forms.GroupBox();
      this.XFMR = new System.Windows.Forms.ComboBox();
      this.label3 = new System.Windows.Forms.Label();
      this.panel1 = new System.Windows.Forms.Panel();
      this.NAME = new System.Windows.Forms.TextBox();
      this.SET_BREAKER_ITEM_LOCATION = new System.Windows.Forms.Button();
      this.SET_XFMR_LOCATION = new System.Windows.Forms.Button();
      this.POLE_GROUP = new System.Windows.Forms.GroupBox();
      this.POLE3 = new System.Windows.Forms.RadioButton();
      this.POLE2 = new System.Windows.Forms.RadioButton();
      this.POLE1 = new System.Windows.Forms.RadioButton();
      this.STATUS.SuspendLayout();
      this.panel1.SuspendLayout();
      this.POLE_GROUP.SuspendLayout();
      this.SuspendLayout();
      // 
      // TYPE
      // 
      this.TYPE.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
      this.TYPE.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.TYPE.FormattingEnabled = true;
      this.TYPE.Items.AddRange(new object[] {
            "No Work",
            "Panel",
            "Load Calculation",
            "Distribution",
            "Equipment"});
      this.TYPE.Location = new System.Drawing.Point(6, 25);
      this.TYPE.Name = "TYPE";
      this.TYPE.Size = new System.Drawing.Size(220, 21);
      this.TYPE.TabIndex = 0;
      this.TYPE.SelectedIndexChanged += new System.EventHandler(this.TYPE_SelectedIndexChanged);
      // 
      // label5
      // 
      this.label5.AutoSize = true;
      this.label5.Location = new System.Drawing.Point(3, 6);
      this.label5.Margin = new System.Windows.Forms.Padding(3);
      this.label5.Name = "label5";
      this.label5.Size = new System.Drawing.Size(31, 13);
      this.label5.TabIndex = 12;
      this.label5.Text = "Type";
      // 
      // BREAKER_SIZES
      // 
      this.BREAKER_SIZES.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.BREAKER_SIZES.FormattingEnabled = true;
      this.BREAKER_SIZES.Items.AddRange(new object[] {
            "20A",
            "30A",
            "40A",
            "50A",
            "60A",
            "70A",
            "80A",
            "90A",
            "100A",
            "125A",
            "150A",
            "200A",
            "400A",
            "600A",
            "800A",
            "1000A"});
      this.BREAKER_SIZES.Location = new System.Drawing.Point(6, 65);
      this.BREAKER_SIZES.Name = "BREAKER_SIZES";
      this.BREAKER_SIZES.Size = new System.Drawing.Size(220, 21);
      this.BREAKER_SIZES.TabIndex = 1;
      // 
      // label1
      // 
      this.label1.AutoSize = true;
      this.label1.Location = new System.Drawing.Point(3, 49);
      this.label1.Margin = new System.Windows.Forms.Padding(0);
      this.label1.Name = "label1";
      this.label1.Size = new System.Drawing.Size(67, 13);
      this.label1.TabIndex = 14;
      this.label1.Text = "Breaker Size";
      // 
      // label2
      // 
      this.label2.AutoSize = true;
      this.label2.Location = new System.Drawing.Point(3, 89);
      this.label2.Margin = new System.Windows.Forms.Padding(0);
      this.label2.Name = "label2";
      this.label2.Size = new System.Drawing.Size(35, 13);
      this.label2.TabIndex = 16;
      this.label2.Text = "Name";
      // 
      // NEW
      // 
      this.NEW.AutoSize = true;
      this.NEW.Checked = true;
      this.NEW.Location = new System.Drawing.Point(10, 17);
      this.NEW.Name = "NEW";
      this.NEW.Size = new System.Drawing.Size(47, 17);
      this.NEW.TabIndex = 1;
      this.NEW.TabStop = true;
      this.NEW.Text = "New";
      this.NEW.UseVisualStyleBackColor = true;
      // 
      // EXISTING
      // 
      this.EXISTING.AutoSize = true;
      this.EXISTING.Location = new System.Drawing.Point(58, 17);
      this.EXISTING.Margin = new System.Windows.Forms.Padding(0);
      this.EXISTING.Name = "EXISTING";
      this.EXISTING.Size = new System.Drawing.Size(61, 17);
      this.EXISTING.TabIndex = 0;
      this.EXISTING.TabStop = true;
      this.EXISTING.Text = "Existing";
      this.EXISTING.UseVisualStyleBackColor = true;
      // 
      // STATUS
      // 
      this.STATUS.Controls.Add(this.NEW);
      this.STATUS.Controls.Add(this.EXISTING);
      this.STATUS.Location = new System.Drawing.Point(101, 131);
      this.STATUS.Name = "STATUS";
      this.STATUS.Padding = new System.Windows.Forms.Padding(0);
      this.STATUS.Size = new System.Drawing.Size(125, 42);
      this.STATUS.TabIndex = 5;
      this.STATUS.TabStop = false;
      this.STATUS.Text = "Status";
      // 
      // XFMR
      // 
      this.XFMR.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
      this.XFMR.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.XFMR.FormattingEnabled = true;
      this.XFMR.Items.AddRange(new object[] {
            "N/A",
            "15 KVA",
            "30 KVA",
            "45 KVA",
            "75 KVA",
            "112.5 KVA",
            "150 KVA",
            "225 KVA",
            "300 KVA",
            "500 KVA",
            "750 KVA",
            "1000 KVA"});
      this.XFMR.Location = new System.Drawing.Point(6, 147);
      this.XFMR.Name = "XFMR";
      this.XFMR.Size = new System.Drawing.Size(82, 21);
      this.XFMR.TabIndex = 4;
      // 
      // label3
      // 
      this.label3.AutoSize = true;
      this.label3.Location = new System.Drawing.Point(3, 131);
      this.label3.Margin = new System.Windows.Forms.Padding(0);
      this.label3.Name = "label3";
      this.label3.Size = new System.Drawing.Size(85, 13);
      this.label3.TabIndex = 20;
      this.label3.Text = "Upstream XFMR";
      // 
      // panel1
      // 
      this.panel1.BackColor = System.Drawing.SystemColors.Window;
      this.panel1.Controls.Add(this.NAME);
      this.panel1.Location = new System.Drawing.Point(6, 104);
      this.panel1.Name = "panel1";
      this.panel1.Padding = new System.Windows.Forms.Padding(3, 0, 3, 0);
      this.panel1.Size = new System.Drawing.Size(64, 21);
      this.panel1.TabIndex = 2;
      // 
      // NAME
      // 
      this.NAME.BorderStyle = System.Windows.Forms.BorderStyle.None;
      this.NAME.Location = new System.Drawing.Point(6, 4);
      this.NAME.Name = "NAME";
      this.NAME.Size = new System.Drawing.Size(52, 13);
      this.NAME.TabIndex = 0;
      // 
      // SET_BREAKER_ITEM_LOCATION
      // 
      this.SET_BREAKER_ITEM_LOCATION.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.SET_BREAKER_ITEM_LOCATION.Location = new System.Drawing.Point(6, 179);
      this.SET_BREAKER_ITEM_LOCATION.Name = "SET_BREAKER_ITEM_LOCATION";
      this.SET_BREAKER_ITEM_LOCATION.Size = new System.Drawing.Size(220, 23);
      this.SET_BREAKER_ITEM_LOCATION.TabIndex = 6;
      this.SET_BREAKER_ITEM_LOCATION.Text = "Set Breaker Item Location";
      this.SET_BREAKER_ITEM_LOCATION.UseVisualStyleBackColor = true;
      // 
      // SET_XFMR_LOCATION
      // 
      this.SET_XFMR_LOCATION.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
      this.SET_XFMR_LOCATION.Location = new System.Drawing.Point(6, 208);
      this.SET_XFMR_LOCATION.Name = "SET_XFMR_LOCATION";
      this.SET_XFMR_LOCATION.Size = new System.Drawing.Size(220, 23);
      this.SET_XFMR_LOCATION.TabIndex = 7;
      this.SET_XFMR_LOCATION.Text = "Set XFMR Location";
      this.SET_XFMR_LOCATION.UseVisualStyleBackColor = true;
      // 
      // POLE_GROUP
      // 
      this.POLE_GROUP.Controls.Add(this.POLE3);
      this.POLE_GROUP.Controls.Add(this.POLE2);
      this.POLE_GROUP.Controls.Add(this.POLE1);
      this.POLE_GROUP.Location = new System.Drawing.Point(83, 89);
      this.POLE_GROUP.Name = "POLE_GROUP";
      this.POLE_GROUP.Padding = new System.Windows.Forms.Padding(0);
      this.POLE_GROUP.Size = new System.Drawing.Size(143, 42);
      this.POLE_GROUP.TabIndex = 3;
      this.POLE_GROUP.TabStop = false;
      this.POLE_GROUP.Text = "Poles";
      // 
      // POLE3
      // 
      this.POLE3.AutoSize = true;
      this.POLE3.Checked = true;
      this.POLE3.Location = new System.Drawing.Point(99, 17);
      this.POLE3.Name = "POLE3";
      this.POLE3.Size = new System.Drawing.Size(38, 17);
      this.POLE3.TabIndex = 3;
      this.POLE3.TabStop = true;
      this.POLE3.Text = "3P";
      this.POLE3.UseVisualStyleBackColor = true;
      // 
      // POLE2
      // 
      this.POLE2.AutoSize = true;
      this.POLE2.Location = new System.Drawing.Point(55, 17);
      this.POLE2.Name = "POLE2";
      this.POLE2.Size = new System.Drawing.Size(38, 17);
      this.POLE2.TabIndex = 2;
      this.POLE2.Text = "2P";
      this.POLE2.UseVisualStyleBackColor = true;
      // 
      // POLE1
      // 
      this.POLE1.AutoSize = true;
      this.POLE1.Location = new System.Drawing.Point(11, 17);
      this.POLE1.Name = "POLE1";
      this.POLE1.Size = new System.Drawing.Size(38, 17);
      this.POLE1.TabIndex = 1;
      this.POLE1.Text = "1P";
      this.POLE1.UseVisualStyleBackColor = true;
      // 
      // ItemTab
      // 
      this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
      this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
      this.BackColor = System.Drawing.Color.Snow;
      this.Controls.Add(this.POLE_GROUP);
      this.Controls.Add(this.SET_XFMR_LOCATION);
      this.Controls.Add(this.SET_BREAKER_ITEM_LOCATION);
      this.Controls.Add(this.panel1);
      this.Controls.Add(this.XFMR);
      this.Controls.Add(this.label3);
      this.Controls.Add(this.STATUS);
      this.Controls.Add(this.label2);
      this.Controls.Add(this.BREAKER_SIZES);
      this.Controls.Add(this.label1);
      this.Controls.Add(this.TYPE);
      this.Controls.Add(this.label5);
      this.Margin = new System.Windows.Forms.Padding(0);
      this.Name = "ItemTab";
      this.Padding = new System.Windows.Forms.Padding(3);
      this.Size = new System.Drawing.Size(232, 240);
      this.STATUS.ResumeLayout(false);
      this.STATUS.PerformLayout();
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      this.POLE_GROUP.ResumeLayout(false);
      this.POLE_GROUP.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();

    }

    #endregion

    private System.Windows.Forms.ComboBox TYPE;
    private System.Windows.Forms.Label label5;
    private System.Windows.Forms.ComboBox BREAKER_SIZES;
    private System.Windows.Forms.Label label1;
    private System.Windows.Forms.Label label2;
    private System.Windows.Forms.RadioButton NEW;
    private System.Windows.Forms.RadioButton EXISTING;
    private System.Windows.Forms.GroupBox STATUS;
    private System.Windows.Forms.ComboBox XFMR;
    private System.Windows.Forms.Label label3;
    private System.Windows.Forms.Panel panel1;
    private System.Windows.Forms.TextBox NAME;
    private System.Windows.Forms.Button SET_BREAKER_ITEM_LOCATION;
    private System.Windows.Forms.Button SET_XFMR_LOCATION;
    private System.Windows.Forms.GroupBox POLE_GROUP;
    private System.Windows.Forms.RadioButton POLE3;
    private System.Windows.Forms.RadioButton POLE2;
    private System.Windows.Forms.RadioButton POLE1;
  }
}
 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\SingleLineDiagram\UserControls\MainForm.cs 
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace GMEPElectricalResidential
{
  public partial class MainForm : UserControl
  {
    private string amperageWaterMark = "Enter amperage...";

    public MainForm(Point location)
    {
      Location = location;
      InitializeComponent();
      SetWaterMarkText();
      CONFIGURATION.SelectedIndex = 0;
      KAIC.SelectedIndex = 1;
      AMPERAGE.Enter += new EventHandler(AMPERAGE_Enter);
      AMPERAGE.Leave += new EventHandler(AMPERAGE_Leave);
    }

    private void SetWaterMarkText()
    {
      AMPERAGE.Text = amperageWaterMark;
      AMPERAGE.ForeColor = Color.Gray;
    }

    private void AMPERAGE_Enter(object sender, EventArgs e)
    {
      if (AMPERAGE.Text == amperageWaterMark)
      {
        AMPERAGE.Text = "";
        AMPERAGE.ForeColor = Color.Black;
      }
    }

    private void AMPERAGE_Leave(object sender, EventArgs e)
    {
      if (AMPERAGE.Text.Length == 0)
      {
        SetWaterMarkText();
      }
    }
  }
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\SingleLineDiagram\UserControls\MainForm.Designer.cs 
﻿namespace GMEPElectricalResidential
{
  partial class MainForm
  {
    /// <summary> 
    /// Required designer variable.
    /// </summary>
    private System.ComponentModel.IContainer components = null;

    /// <summary> 
    /// Clean up any resources being used.
    /// </summary>
    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    protected override void Dispose(bool disposing)
    {
      if (disposing && (components != null))
      {
        components.Dispose();
      }
      base.Dispose(disposing);
    }

    #region Component Designer generated code

    /// <summary> 
    /// Required method for Designer support - do not modify 
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {
      this.AMPERAGE = new System.Windows.Forms.TextBox();
      this.label1 = new System.Windows.Forms.Label();
      this.label2 = new System.Windows.Forms.Label();
      this.CONFIGURATION = new System.Windows.Forms.ComboBox();
      this.label3 = new System.Windows.Forms.Label();
      this.KAIC = new System.Windows.Forms.ComboBox();
      this.SuspendLayout();
      // 
      // AMPERAGE
      // 
      this.AMPERAGE.Location = new System.Drawing.Point(9, 22);
      this.AMPERAGE.Margin = new System.Windows.Forms.Padding(6, 3, 6, 6);
      this.AMPERAGE.Name = "AMPERAGE";
      this.AMPERAGE.Size = new System.Drawing.Size(100, 20);
      this.AMPERAGE.TabIndex = 0;
      // 
      // label1
      // 
      this.label1.AutoSize = true;
      this.label1.Location = new System.Drawing.Point(9, 6);
      this.label1.Name = "label1";
      this.label1.Size = new System.Drawing.Size(55, 13);
      this.label1.TabIndex = 1;
      this.label1.Text = "Amperage";
      // 
      // label2
      // 
      this.label2.AutoSize = true;
      this.label2.Location = new System.Drawing.Point(9, 48);
      this.label2.Name = "label2";
      this.label2.Size = new System.Drawing.Size(69, 13);
      this.label2.TabIndex = 2;
      this.label2.Text = "Configuration";
      // 
      // CONFIGURATION
      // 
      this.CONFIGURATION.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
      this.CONFIGURATION.FormattingEnabled = true;
      this.CONFIGURATION.Items.AddRange(new object[] {
            "120/208V 1PH 3W",
            "120/240V 1PH 3W",
            "120/208V 3PH 4W",
            "120/240V 3PH 4W",
            "277/480V 3PH 4W"});
      this.CONFIGURATION.Location = new System.Drawing.Point(9, 64);
      this.CONFIGURATION.Margin = new System.Windows.Forms.Padding(6, 3, 6, 6);
      this.CONFIGURATION.Name = "CONFIGURATION";
      this.CONFIGURATION.Size = new System.Drawing.Size(121, 21);
      this.CONFIGURATION.TabIndex = 3;
      // 
      // label3
      // 
      this.label3.AutoSize = true;
      this.label3.Location = new System.Drawing.Point(9, 91);
      this.label3.Name = "label3";
      this.label3.Size = new System.Drawing.Size(31, 13);
      this.label3.TabIndex = 5;
      this.label3.Text = "KAIC";
      // 
      // KAIC
      // 
      this.KAIC.FormattingEnabled = true;
      this.KAIC.Items.AddRange(new object[] {
            "10",
            "22",
            "42",
            "65"});
      this.KAIC.Location = new System.Drawing.Point(9, 107);
      this.KAIC.Margin = new System.Windows.Forms.Padding(6, 3, 6, 6);
      this.KAIC.Name = "KAIC";
      this.KAIC.Size = new System.Drawing.Size(121, 21);
      this.KAIC.TabIndex = 7;
      // 
      // MainForm
      // 
      this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
      this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
      this.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
      this.Controls.Add(this.KAIC);
      this.Controls.Add(this.label3);
      this.Controls.Add(this.CONFIGURATION);
      this.Controls.Add(this.label2);
      this.Controls.Add(this.label1);
      this.Controls.Add(this.AMPERAGE);
      this.Name = "MainForm";
      this.Padding = new System.Windows.Forms.Padding(6);
      this.Size = new System.Drawing.Size(1040, 160);
      this.Tag = "UPWARDS_ARROW";
      this.ResumeLayout(false);
      this.PerformLayout();

    }

    #endregion

    private System.Windows.Forms.TextBox AMPERAGE;
    private System.Windows.Forms.Label label1;
    private System.Windows.Forms.Label label2;
    private System.Windows.Forms.ComboBox CONFIGURATION;
    private System.Windows.Forms.Label label3;
    private System.Windows.Forms.ComboBox KAIC;
  }
}
 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\SingleLineDiagram\UserControls\MeterAndMainForm.cs 
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace GMEPElectricalResidential
{
  public partial class MeterAndMainForm : UserControl
  {
    private string amperageWaterMark = "Enter amperage...";

    public MeterAndMainForm(Point location)
    {
      Location = location;
      InitializeComponent();
      SetWaterMarkText();
      CONFIGURATION.SelectedIndex = 0;
      KAIC.SelectedIndex = 1;
      AMPERAGE.Enter += new EventHandler(AMPERAGE_Enter);
      AMPERAGE.Leave += new EventHandler(AMPERAGE_Leave);
    }

    private void SetWaterMarkText()
    {
      AMPERAGE.Text = amperageWaterMark;
      AMPERAGE.ForeColor = Color.Gray;
    }

    private void AMPERAGE_Enter(object sender, EventArgs e)
    {
      if (AMPERAGE.Text == amperageWaterMark)
      {
        AMPERAGE.Text = "";
        AMPERAGE.ForeColor = Color.Black;
      }
    }

    private void AMPERAGE_Leave(object sender, EventArgs e)
    {
      if (AMPERAGE.Text.Length == 0)
      {
        SetWaterMarkText();
      }
    }
  }
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\SingleLineDiagram\UserControls\MeterAndMainForm.Designer.cs 
﻿namespace GMEPElectricalResidential
{
  partial class MeterAndMainForm
  {
    /// <summary> 
    /// Required designer variable.
    /// </summary>
    private System.ComponentModel.IContainer components = null;

    /// <summary> 
    /// Clean up any resources being used.
    /// </summary>
    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    protected override void Dispose(bool disposing)
    {
      if (disposing && (components != null))
      {
        components.Dispose();
      }
      base.Dispose(disposing);
    }

    #region Component Designer generated code

    /// <summary> 
    /// Required method for Designer support - do not modify 
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {
      this.AMPERAGE = new System.Windows.Forms.TextBox();
      this.label1 = new System.Windows.Forms.Label();
      this.label2 = new System.Windows.Forms.Label();
      this.CONFIGURATION = new System.Windows.Forms.ComboBox();
      this.label3 = new System.Windows.Forms.Label();
      this.CTS = new System.Windows.Forms.CheckBox();
      this.KAIC = new System.Windows.Forms.ComboBox();
      this.SuspendLayout();
      // 
      // AMPERAGE
      // 
      this.AMPERAGE.Location = new System.Drawing.Point(9, 22);
      this.AMPERAGE.Margin = new System.Windows.Forms.Padding(6, 3, 6, 6);
      this.AMPERAGE.Name = "AMPERAGE";
      this.AMPERAGE.Size = new System.Drawing.Size(100, 20);
      this.AMPERAGE.TabIndex = 0;
      // 
      // label1
      // 
      this.label1.AutoSize = true;
      this.label1.Location = new System.Drawing.Point(9, 6);
      this.label1.Name = "label1";
      this.label1.Size = new System.Drawing.Size(55, 13);
      this.label1.TabIndex = 1;
      this.label1.Text = "Amperage";
      // 
      // label2
      // 
      this.label2.AutoSize = true;
      this.label2.Location = new System.Drawing.Point(9, 48);
      this.label2.Name = "label2";
      this.label2.Size = new System.Drawing.Size(69, 13);
      this.label2.TabIndex = 2;
      this.label2.Text = "Configuration";
      // 
      // CONFIGURATION
      // 
      this.CONFIGURATION.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
      this.CONFIGURATION.FormattingEnabled = true;
      this.CONFIGURATION.Items.AddRange(new object[] {
            "120/208V 1PH 3W",
            "120/240V 1PH 3W",
            "120/208V 3PH 4W",
            "120/240V 3PH 4W",
            "277/480V 3PH 4W"});
      this.CONFIGURATION.Location = new System.Drawing.Point(9, 64);
      this.CONFIGURATION.Margin = new System.Windows.Forms.Padding(6, 3, 6, 6);
      this.CONFIGURATION.Name = "CONFIGURATION";
      this.CONFIGURATION.Size = new System.Drawing.Size(121, 21);
      this.CONFIGURATION.TabIndex = 3;
      // 
      // label3
      // 
      this.label3.AutoSize = true;
      this.label3.Location = new System.Drawing.Point(9, 91);
      this.label3.Name = "label3";
      this.label3.Size = new System.Drawing.Size(31, 13);
      this.label3.TabIndex = 5;
      this.label3.Text = "KAIC";
      // 
      // CTS
      // 
      this.CTS.AutoSize = true;
      this.CTS.CheckAlign = System.Drawing.ContentAlignment.BottomCenter;
      this.CTS.Checked = true;
      this.CTS.CheckState = System.Windows.Forms.CheckState.Checked;
      this.CTS.Location = new System.Drawing.Point(118, 6);
      this.CTS.Name = "CTS";
      this.CTS.Size = new System.Drawing.Size(32, 31);
      this.CTS.TabIndex = 6;
      this.CTS.Text = "CTS";
      this.CTS.UseVisualStyleBackColor = true;
      // 
      // KAIC
      // 
      this.KAIC.FormattingEnabled = true;
      this.KAIC.Items.AddRange(new object[] {
            "10",
            "22",
            "42",
            "65"});
      this.KAIC.Location = new System.Drawing.Point(9, 107);
      this.KAIC.Margin = new System.Windows.Forms.Padding(6, 3, 6, 6);
      this.KAIC.Name = "KAIC";
      this.KAIC.Size = new System.Drawing.Size(121, 21);
      this.KAIC.TabIndex = 7;
      // 
      // MeterAndMainForm
      // 
      this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
      this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
      this.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
      this.Controls.Add(this.KAIC);
      this.Controls.Add(this.CTS);
      this.Controls.Add(this.label3);
      this.Controls.Add(this.CONFIGURATION);
      this.Controls.Add(this.label2);
      this.Controls.Add(this.label1);
      this.Controls.Add(this.AMPERAGE);
      this.Name = "MeterAndMainForm";
      this.Padding = new System.Windows.Forms.Padding(6);
      this.Size = new System.Drawing.Size(1040, 160);
      this.Tag = "UPWARDS_ARROW";
      this.ResumeLayout(false);
      this.PerformLayout();

    }

    #endregion

    private System.Windows.Forms.TextBox AMPERAGE;
    private System.Windows.Forms.Label label1;
    private System.Windows.Forms.Label label2;
    private System.Windows.Forms.ComboBox CONFIGURATION;
    private System.Windows.Forms.Label label3;
    private System.Windows.Forms.CheckBox CTS;
    private System.Windows.Forms.ComboBox KAIC;
  }
}
 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\SingleLineDiagram\UserControls\MeterComboForm.cs 
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace GMEPElectricalResidential
{
  public partial class MeterComboForm : UserControl
  {
    private string panelWaterMark = "Enter panel name...";
    private string sizeWaterMark = "Enter panel size...";
    private string amperageWaterMark = "Enter amperage...";

    public MeterComboForm(Point location)
    {
      Location = location;
      InitializeComponent();
      SetWatermarkText();

      CONFIGURATION.SelectedIndex = 0;
      KAIC.SelectedIndex = 1;

      PANEL_NAME.Enter += PANEL_NAME_Enter;
      PANEL_NAME.Leave += PANEL_NAME_Leave;
      PANEL_SIZE.Enter += PANEL_SIZE_Enter;
      PANEL_SIZE.Leave += PANEL_SIZE_Leave;
      AMPERAGE.Enter += AMPERAGE_Enter;
      AMPERAGE.Leave += AMPERAGE_Leave;
    }

    private void SetWatermarkText()
    {
      PANEL_NAME.ForeColor = Color.Gray;
      PANEL_NAME.Text = panelWaterMark;
      PANEL_SIZE.ForeColor = Color.Gray;
      PANEL_SIZE.Text = sizeWaterMark;
      AMPERAGE.ForeColor = Color.Gray;
      AMPERAGE.Text = amperageWaterMark;
    }

    // TextBox Enter event handler
    private void PANEL_NAME_Enter(object sender, EventArgs e)
    {
      if (PANEL_NAME.Text == panelWaterMark)
      {
        PANEL_NAME.Text = "";
        PANEL_NAME.ForeColor = Color.Black;
      }
    }

    // TextBox Leave event handler
    private void PANEL_NAME_Leave(object sender, EventArgs e)
    {
      if (string.IsNullOrWhiteSpace(PANEL_NAME.Text))
      {
        SetWatermarkText();
      }
    }

    // TextBox Enter event handler
    private void PANEL_SIZE_Enter(object sender, EventArgs e)
    {
      if (PANEL_SIZE.Text == sizeWaterMark)
      {
        PANEL_SIZE.Text = "";
        PANEL_SIZE.ForeColor = Color.Black;
      }
    }

    // TextBox Leave event handler
    private void PANEL_SIZE_Leave(object sender, EventArgs e)
    {
      if (string.IsNullOrWhiteSpace(PANEL_SIZE.Text))
      {
        SetWatermarkText();
      }
    }

    // TextBox Enter event handler
    private void AMPERAGE_Enter(object sender, EventArgs e)
    {
      if (AMPERAGE.Text == amperageWaterMark)
      {
        AMPERAGE.Text = "";
        AMPERAGE.ForeColor = Color.Black;
      }
    }

    // TextBox Leave event handler
    private void AMPERAGE_Leave(object sender, EventArgs e)
    {
      if (string.IsNullOrWhiteSpace(AMPERAGE.Text))
      {
        SetWatermarkText();
      }
    }
  }
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\SingleLineDiagram\UserControls\MeterComboForm.Designer.cs 
﻿namespace GMEPElectricalResidential
{
  partial class MeterComboForm
  {
    /// <summary> 
    /// Required designer variable.
    /// </summary>
    private System.ComponentModel.IContainer components = null;

    /// <summary> 
    /// Clean up any resources being used.
    /// </summary>
    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    protected override void Dispose(bool disposing)
    {
      if (disposing && (components != null))
      {
        components.Dispose();
      }
      base.Dispose(disposing);
    }

    #region Component Designer generated code

    /// <summary> 
    /// Required method for Designer support - do not modify 
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {
      this.AMPERAGE = new System.Windows.Forms.TextBox();
      this.label1 = new System.Windows.Forms.Label();
      this.label2 = new System.Windows.Forms.Label();
      this.CONFIGURATION = new System.Windows.Forms.ComboBox();
      this.label3 = new System.Windows.Forms.Label();
      this.KAIC = new System.Windows.Forms.ComboBox();
      this.label4 = new System.Windows.Forms.Label();
      this.PANEL_NAME = new System.Windows.Forms.TextBox();
      this.label5 = new System.Windows.Forms.Label();
      this.PANEL_SIZE = new System.Windows.Forms.TextBox();
      this.SuspendLayout();
      // 
      // AMPERAGE
      // 
      this.AMPERAGE.Location = new System.Drawing.Point(9, 22);
      this.AMPERAGE.Margin = new System.Windows.Forms.Padding(6, 3, 6, 6);
      this.AMPERAGE.Name = "AMPERAGE";
      this.AMPERAGE.Size = new System.Drawing.Size(100, 20);
      this.AMPERAGE.TabIndex = 0;
      // 
      // label1
      // 
      this.label1.AutoSize = true;
      this.label1.Location = new System.Drawing.Point(9, 6);
      this.label1.Name = "label1";
      this.label1.Size = new System.Drawing.Size(55, 13);
      this.label1.TabIndex = 1;
      this.label1.Text = "Amperage";
      // 
      // label2
      // 
      this.label2.AutoSize = true;
      this.label2.Location = new System.Drawing.Point(9, 48);
      this.label2.Name = "label2";
      this.label2.Size = new System.Drawing.Size(69, 13);
      this.label2.TabIndex = 2;
      this.label2.Text = "Configuration";
      // 
      // CONFIGURATION
      // 
      this.CONFIGURATION.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
      this.CONFIGURATION.FormattingEnabled = true;
      this.CONFIGURATION.Items.AddRange(new object[] {
            "120/208V 1PH 3W",
            "120/240V 1PH 3W",
            "120/208V 3PH 4W",
            "120/240V 3PH 4W",
            "277/480V 3PH 4W"});
      this.CONFIGURATION.Location = new System.Drawing.Point(9, 64);
      this.CONFIGURATION.Margin = new System.Windows.Forms.Padding(6, 3, 6, 6);
      this.CONFIGURATION.Name = "CONFIGURATION";
      this.CONFIGURATION.Size = new System.Drawing.Size(121, 21);
      this.CONFIGURATION.TabIndex = 3;
      // 
      // label3
      // 
      this.label3.AutoSize = true;
      this.label3.Location = new System.Drawing.Point(9, 91);
      this.label3.Name = "label3";
      this.label3.Size = new System.Drawing.Size(31, 13);
      this.label3.TabIndex = 5;
      this.label3.Text = "KAIC";
      // 
      // KAIC
      // 
      this.KAIC.FormattingEnabled = true;
      this.KAIC.Items.AddRange(new object[] {
            "10",
            "22",
            "42",
            "65"});
      this.KAIC.Location = new System.Drawing.Point(9, 107);
      this.KAIC.Margin = new System.Windows.Forms.Padding(6, 3, 6, 6);
      this.KAIC.Name = "KAIC";
      this.KAIC.Size = new System.Drawing.Size(121, 21);
      this.KAIC.TabIndex = 7;
      // 
      // label4
      // 
      this.label4.AutoSize = true;
      this.label4.Location = new System.Drawing.Point(159, 6);
      this.label4.Name = "label4";
      this.label4.Size = new System.Drawing.Size(65, 13);
      this.label4.TabIndex = 9;
      this.label4.Text = "Panel Name";
      // 
      // PANEL_NAME
      // 
      this.PANEL_NAME.Location = new System.Drawing.Point(159, 22);
      this.PANEL_NAME.Margin = new System.Windows.Forms.Padding(6, 3, 6, 6);
      this.PANEL_NAME.Name = "PANEL_NAME";
      this.PANEL_NAME.Size = new System.Drawing.Size(100, 20);
      this.PANEL_NAME.TabIndex = 8;
      // 
      // label5
      // 
      this.label5.AutoSize = true;
      this.label5.Location = new System.Drawing.Point(159, 49);
      this.label5.Name = "label5";
      this.label5.Size = new System.Drawing.Size(57, 13);
      this.label5.TabIndex = 11;
      this.label5.Text = "Panel Size";
      // 
      // PANEL_SIZE
      // 
      this.PANEL_SIZE.Location = new System.Drawing.Point(159, 65);
      this.PANEL_SIZE.Margin = new System.Windows.Forms.Padding(6, 3, 6, 6);
      this.PANEL_SIZE.Name = "PANEL_SIZE";
      this.PANEL_SIZE.Size = new System.Drawing.Size(100, 20);
      this.PANEL_SIZE.TabIndex = 10;
      // 
      // MeterComboForm
      // 
      this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
      this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
      this.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
      this.Controls.Add(this.label5);
      this.Controls.Add(this.PANEL_SIZE);
      this.Controls.Add(this.label4);
      this.Controls.Add(this.PANEL_NAME);
      this.Controls.Add(this.KAIC);
      this.Controls.Add(this.label3);
      this.Controls.Add(this.CONFIGURATION);
      this.Controls.Add(this.label2);
      this.Controls.Add(this.label1);
      this.Controls.Add(this.AMPERAGE);
      this.Name = "MeterComboForm";
      this.Padding = new System.Windows.Forms.Padding(6);
      this.Size = new System.Drawing.Size(1040, 160);
      this.Tag = "UPWARDS_ARROW";
      this.ResumeLayout(false);
      this.PerformLayout();

    }

    #endregion

    private System.Windows.Forms.TextBox AMPERAGE;
    private System.Windows.Forms.Label label1;
    private System.Windows.Forms.Label label2;
    private System.Windows.Forms.ComboBox CONFIGURATION;
    private System.Windows.Forms.Label label3;
    private System.Windows.Forms.ComboBox KAIC;
    private System.Windows.Forms.Label label4;
    private System.Windows.Forms.TextBox PANEL_NAME;
    private System.Windows.Forms.Label label5;
    private System.Windows.Forms.TextBox PANEL_SIZE;
  }
}
 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\SingleLineDiagram\UserControls\PullSectionAboveForm.cs 
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace GMEPElectricalResidential
{
  public partial class PullSectionAboveForm : UserControl
  {
    private string amperageWaterMark = "Enter amperage...";

    public PullSectionAboveForm(Point location)
    {
      Location = location;
      InitializeComponent();
      SetWatermarkText();
      AMPERAGE.Enter += AMPERAGE_Enter;
      AMPERAGE.Leave += AMPERAGE_Leave;
    }

    private void SetWatermarkText()
    {
      AMPERAGE.ForeColor = Color.Gray;
      AMPERAGE.Text = amperageWaterMark;
    }

    // TextBox Enter event handler
    private void AMPERAGE_Enter(object sender, EventArgs e)
    {
      if (AMPERAGE.Text == amperageWaterMark)
      {
        AMPERAGE.Text = "";
        AMPERAGE.ForeColor = Color.Black;
      }
    }

    // TextBox Leave event handler
    private void AMPERAGE_Leave(object sender, EventArgs e)
    {
      if (string.IsNullOrWhiteSpace(AMPERAGE.Text))
      {
        AMPERAGE.Text = amperageWaterMark;
        AMPERAGE.ForeColor = Color.Gray;
      }
    }
  }
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\SingleLineDiagram\UserControls\PullSectionAboveForm.Designer.cs 
﻿namespace GMEPElectricalResidential
{
  partial class PullSectionAboveForm
  {
    /// <summary> 
    /// Required designer variable.
    /// </summary>
    private System.ComponentModel.IContainer components = null;

    /// <summary> 
    /// Clean up any resources being used.
    /// </summary>
    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    protected override void Dispose(bool disposing)
    {
      if (disposing && (components != null))
      {
        components.Dispose();
      }
      base.Dispose(disposing);
    }

    #region Component Designer generated code

    /// <summary> 
    /// Required method for Designer support - do not modify 
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {
      this.AMPERAGE = new System.Windows.Forms.TextBox();
      this.label1 = new System.Windows.Forms.Label();
      this.SuspendLayout();
      // 
      // AMPERAGE
      // 
      this.AMPERAGE.Location = new System.Drawing.Point(9, 22);
      this.AMPERAGE.Name = "AMPERAGE";
      this.AMPERAGE.Size = new System.Drawing.Size(100, 20);
      this.AMPERAGE.TabIndex = 0;
      // 
      // label1
      // 
      this.label1.AutoSize = true;
      this.label1.Location = new System.Drawing.Point(9, 6);
      this.label1.Name = "label1";
      this.label1.Size = new System.Drawing.Size(55, 13);
      this.label1.TabIndex = 1;
      this.label1.Text = "Amperage";
      // 
      // PullSectionAboveForm
      // 
      this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
      this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
      this.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
      this.Controls.Add(this.label1);
      this.Controls.Add(this.AMPERAGE);
      this.Name = "PullSectionAboveForm";
      this.Padding = new System.Windows.Forms.Padding(6);
      this.Size = new System.Drawing.Size(1040, 160);
      this.Tag = "UPWARDS_ARROW";
      this.ResumeLayout(false);
      this.PerformLayout();

    }

    #endregion

    private System.Windows.Forms.TextBox AMPERAGE;
    private System.Windows.Forms.Label label1;
  }
}
 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\SingleLineDiagram\UserControls\PullSectionBelowForm.cs 
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace GMEPElectricalResidential
{
  public partial class PullSectionBelowForm : UserControl
  {
    private string amperageWaterMark = "Enter amperage...";

    public PullSectionBelowForm(Point location)
    {
      Location = location;
      InitializeComponent();
      SetWatermarkText();
      AMPERAGE.Enter += AMPERAGE_Enter;
      AMPERAGE.Leave += AMPERAGE_Leave;
    }

    private void SetWatermarkText()
    {
      AMPERAGE.ForeColor = Color.Gray;
      AMPERAGE.Text = amperageWaterMark;
    }

    // TextBox Enter event handler
    private void AMPERAGE_Enter(object sender, EventArgs e)
    {
      if (AMPERAGE.Text == amperageWaterMark)
      {
        AMPERAGE.Text = "";
        AMPERAGE.ForeColor = Color.Black;
      }
    }

    // TextBox Leave event handler
    private void AMPERAGE_Leave(object sender, EventArgs e)
    {
      if (string.IsNullOrWhiteSpace(AMPERAGE.Text))
      {
        AMPERAGE.Text = amperageWaterMark;
        AMPERAGE.ForeColor = Color.Gray;
      }
    }
  }
} 
 
File: C:\Users\JacobH\source\repos\GMEPElectricalResidential\SingleLineDiagram\UserControls\PullSectionBelowForm.Designer.cs 
﻿namespace GMEPElectricalResidential
{
  partial class PullSectionBelowForm
  {
    /// <summary> 
    /// Required designer variable.
    /// </summary>
    private System.ComponentModel.IContainer components = null;

    /// <summary> 
    /// Clean up any resources being used.
    /// </summary>
    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    protected override void Dispose(bool disposing)
    {
      if (disposing && (components != null))
      {
        components.Dispose();
      }
      base.Dispose(disposing);
    }

    #region Component Designer generated code

    /// <summary> 
    /// Required method for Designer support - do not modify 
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {
      this.AMPERAGE = new System.Windows.Forms.TextBox();
      this.label1 = new System.Windows.Forms.Label();
      this.SuspendLayout();
      // 
      // AMPERAGE
      // 
      this.AMPERAGE.Location = new System.Drawing.Point(9, 22);
      this.AMPERAGE.Name = "AMPERAGE";
      this.AMPERAGE.Size = new System.Drawing.Size(100, 20);
      this.AMPERAGE.TabIndex = 0;
      // 
      // label1
      // 
      this.label1.AutoSize = true;
      this.label1.Location = new System.Drawing.Point(9, 6);
      this.label1.Name = "label1";
      this.label1.Size = new System.Drawing.Size(55, 13);
      this.label1.TabIndex = 1;
      this.label1.Text = "Amperage";
      // 
      // PullSectionBelowForm
      // 
      this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
      this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
      this.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
      this.Controls.Add(this.label1);
      this.Controls.Add(this.AMPERAGE);
      this.Name = "PullSectionBelowForm";
      this.Padding = new System.Windows.Forms.Padding(6);
      this.Size = new System.Drawing.Size(1040, 160);
      this.Tag = "UPWARDS_ARROW";
      this.ResumeLayout(false);
      this.PerformLayout();

    }

    #endregion

    private System.Windows.Forms.TextBox AMPERAGE;
    private System.Windows.Forms.Label label1;
  }
}
 
 
